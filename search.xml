<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java JDK安装及环境变量配置（windows）</title>
    <url>/2020/07/23/Java-JDK%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%EF%BC%88windows%EF%BC%89/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h2 id="1、JDK-jre-8uxxx-windows-x64-exe-下载"><a href="#1、JDK-jre-8uxxx-windows-x64-exe-下载" class="headerlink" title="1、JDK    jre-8uxxx-windows-x64.exe 下载"></a>1、JDK    jre-8uxxx-windows-x64.exe 下载</h2><p> 所有平台： <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
<p>选择 “Accept License Agreement”</p>
<p>根据系统选择对应的安装文件，64位系统安装64位JDK<br><img src="https://img-blog.csdnimg.cn/20200717145105546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="2、JDK安装过程"><a href="#2、JDK安装过程" class="headerlink" title="2、JDK安装过程"></a>2、JDK安装过程</h2><p> a、双击运行安装文件 jdk-8uxxx-windows-x64.exe<br> b、指定jdk安装目录 C:\Java\jdk1.8.0_xxx   然后点击“下一步”<br> c、指定JRE安装目录 C:\Java\jre1.8.0_xxx，点击“下一步”<br> d、安装完成，点击“关闭”</p>
<hr>
<h2 id="3、JDK-环境变量配置"><a href="#3、JDK-环境变量配置" class="headerlink" title="3、JDK 环境变量配置"></a>3、JDK 环境变量配置</h2><p>  a、新建 JAVA_HOME 环境变量，JAVA_HOME=C:\Java\jdk1.8.0_144</p>
<p>  b、修改 path 环境变量，在path变量尾部添加%JAVA_HOME%\bin</p>
<p>  c、新建 classpath 环境变量 ，classpath=.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\tools.jar</p>
<p>  说明：（jdk 需要配置三个环境变量； 1.5之后可以不再设置classpath，但建议保留classpath设置）</p>
<p>开始菜单 -&gt; “计算机” -&gt; 右键 -&gt; 属性  打开 “系统面板”<br><img src="https://img-blog.csdnimg.cn/20200717145721301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击 “高级系统设置” 打开 “系统属性”窗口，点击 “环境变量” 打开“系统环境变量”窗格<br><img src="https://img-blog.csdnimg.cn/2020071714574096.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200717145751767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200717145802298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>连续点击“确定”，完成环境变量配置。</p>
<hr>
<h2 id="4、验证-java-和-javac-命令"><a href="#4、验证-java-和-javac-命令" class="headerlink" title="4、验证 java 和 javac 命令"></a>4、验证 java 和 javac 命令</h2><p>   a、打开cmd命令行窗口，输入 java ，回车执行<br>   <img src="https://img-blog.csdnimg.cn/20200717145935892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   b、输入javac 命令，回车执行<br>   <img src="https://img-blog.csdnimg.cn/20200717145948331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   弹出以上java 和javac命令输出，则表明jdk安装配置成功！<br>   <strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JDK安装教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web之环境搭建（测试用）</title>
    <url>/2020/07/22/Java-Web%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E6%B5%8B%E8%AF%95%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="Java-Web之环境搭建"><a href="#Java-Web之环境搭建" class="headerlink" title="Java Web之环境搭建"></a>Java Web之环境搭建</h1><h2 id="1-Java-Web介绍"><a href="#1-Java-Web介绍" class="headerlink" title="1. Java Web介绍"></a>1. Java Web介绍</h2><p>Java Web是用Java技术来解决web领域的技术，需要运行在特定的web服务器上，Java Web是跨平台的，可以在不同的平台上进行部署运行。<br>需要掌握的技术<br>1.前端方面的相关技术如：html、css、js等<br>2.服务端先关技术如：java，jsp，服务器，ssh、ssm框架，等<br>3.数据库相关：MySQL，Oracle等</p>
<h2 id="2-开发环境准备"><a href="#2-开发环境准备" class="headerlink" title="2. 开发环境准备"></a>2. 开发环境准备</h2><p>编辑器：Eclipse或Idea等<br>java环境：JDK1.8<br>服务器：Tomcat<br>环境搭建完毕之后，就可以创建项目开始开发了。</p>
<!-- more -->
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>参考：<br><a href="https://blog.csdn.net/yuzhiqiang_1993/article/details/81166813" target="_blank" rel="noopener">Java Web之环境搭建</a>.</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb开发免费后台Html样式模板</title>
    <url>/2020/07/23/JavaWeb%E5%BC%80%E5%8F%91%E5%85%8D%E8%B4%B9%E5%90%8E%E5%8F%B0Html%E6%A0%B7%E5%BC%8F%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="后台Html样式模板"><a href="#后台Html样式模板" class="headerlink" title="后台Html样式模板"></a>后台Html样式模板</h1><p>免费模板网（<a href="http://www.freemoban.com）提供大量的免费网站HTML网页模板,企业/响应式/自适应等免费网站模板源码，可以任意下载安装测试使用。" target="_blank" rel="noopener">www.freemoban.com）提供大量的免费网站HTML网页模板,企业/响应式/自适应等免费网站模板源码，可以任意下载安装测试使用。</a><br><img src="https://img-blog.csdnimg.cn/20200606170000413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>链接: <a href="https://www.freemoban.com/tag/%E5%90%8E%E5%8F%B0" target="_blank" rel="noopener">免费模板</a></p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript匿名函数理解及应用</title>
    <url>/2020/07/23/JavaScript%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><p>匿名函数顾名思义就是没有名字的函数，在实际开发中经常会用到，也是JavaScript的重点。匿名函数又叫立即执行函数。</p>
<hr>
<p>由于这种函数是匿名的，所以它不能被调用。<br>由于它不能被调用，所以如果它不立即执行的话就没有了意义。<br>由于它需要立即执行，所以在执行完之后匿名函数就会被销毁。<br>匿名自执行函数的作用就是用于闭包和创建独立的命名空间两个方面。</p>
<!-- more -->
<hr>
<p>匿名函数的基本形式为(function(){…})();</p>
<p>前面的括号包含函数体，后面的括号就是给匿名函数传递参数然后立即执行。</p>
<p>匿名函数的作用是避免全局变量的污染以及函数名的冲突。</p>
<hr>
<p>匿名自执行函数的作用</p>
<p>1.匿名自执行函数最常见的作用是用于实现闭包的情况中。<br>闭包:闭包是JavaScript的一种特性，我们可以通过闭包实现函数内外部的连接，并且可以使得函数的局部变量始终存在于内存中。</p>
<p>2.匿名自执行函数还可以用于在JavaScript中模拟创建块级作用域.<br>使用匿名自执行函数将某些代码包裹起来可以实现块级作用域的效果，减少全局变量的数量，在匿名自执行函数执行结束后变量就会被内存释放掉，从而也会节省了内存。</p>
<hr>
<p><strong><em>小括号</em></strong><br>包着函数的小括号的作用：<br>小括号能把我们的表达式组合分块，并且每一块，也就是每一对小括号，都有一个返回值。这个返回值实际上也就是小括号中表达式的返回值。所以，当我们用一对小括号把匿名函数包起来的时，实际上小括号对返回的，就是一个匿名函数的Function 对象。因此，小括号对加上匿名函数就如同有名字的函数般被我们取得它的引用位置了。所以如果在这个引用变量后面再加上参数列表，就会实现普通函数的调用形式。</p>
<p>小括号有返回值，就是小括号内的函数或者表达式的返回值，所以小括号内的function返回值等于小括号的返回值。</p>
<hr>
<p><strong><em>写法</em></strong><br>匿名函数的写法<br>1.先定义一个普通函数Cat()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    alert(<span class="string">"喵喵喵~~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.去掉函数的名字构建匿名函数<br>不包裹一个括号不符合语法要求，会报错！需要给匿名函数外边包裹一个括号才能运行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    alert(<span class="string">"喵喵喵~~"</span>);</span><br><span class="line">&#125;)()                        <span class="comment">//()可省略</span></span><br></pre></td></tr></table></figure>
<p>3.当匿名函数需要传值，将参数写到括号内</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    alert(<span class="string">"喵喵喵~~"</span>+data);</span><br><span class="line">&#125;)(<span class="string">"汪汪汪~~"</span>)</span><br></pre></td></tr></table></figure>
<hr>
<p>4种实现方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常见匿名函数：</span></span><br><span class="line">            <span class="comment">//1，匿名函数的第一种实现方式</span></span><br><span class="line">    		(<span class="function"><span class="keyword">function</span>(<span class="params">cat</span>)</span>&#123;</span><br><span class="line">    			alert(cat);</span><br><span class="line">    		&#125;)(<span class="string">"喵喵喵~~"</span>);</span><br><span class="line">    		<span class="comment">//2.匿名自执行函数的第二种实现方式（常用）jQuery </span></span><br><span class="line">    		(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    			alert(<span class="string">"cat"</span>);</span><br><span class="line">    		&#125;());</span><br><span class="line">    		<span class="comment">//3.匿名自执行函数的第三种实现方式</span></span><br><span class="line">    		!<span class="function"><span class="keyword">function</span>(<span class="params">cat</span>)</span>&#123;</span><br><span class="line">    			alert(cat);</span><br><span class="line">    		&#125;(<span class="string">"喵喵喵~~"</span>);</span><br><span class="line">    		<span class="comment">//4.匿名自执行函数的第四种实现方式</span></span><br><span class="line">    		<span class="keyword">var</span> fun=<span class="function"><span class="keyword">function</span>(<span class="params">cat</span>)</span>&#123;</span><br><span class="line">    			alert(cat);</span><br><span class="line">    		&#125;(<span class="string">"喵喵喵~~"</span>);</span><br><span class="line"><span class="comment">//不常见匿名函数：</span></span><br><span class="line">            </span><br><span class="line">			~(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">			</span><br><span class="line">			alert(<span class="string">'cat'</span>); </span><br><span class="line">			&#125;)();</span><br><span class="line">			<span class="comment">//效率最高</span></span><br><span class="line">			<span class="keyword">void</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">			</span><br><span class="line">			alert(<span class="string">'cat'</span>); </span><br><span class="line">			&#125;();</span><br><span class="line">					</span><br><span class="line">			+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">			</span><br><span class="line">			alert(<span class="string">'cat'</span>); </span><br><span class="line">			&#125;();</span><br><span class="line">			</span><br><span class="line">			-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">			</span><br><span class="line">			alert(<span class="string">'cat'</span>); </span><br><span class="line">			&#125;();</span><br><span class="line">			</span><br><span class="line">			~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">			</span><br><span class="line">			alert(<span class="string">'cat'</span>); </span><br><span class="line">			&#125;();</span><br><span class="line">			</span><br><span class="line">			!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">			</span><br><span class="line">			alert(<span class="string">'cat'</span>); </span><br><span class="line">			&#125;();</span><br><span class="line">			<span class="comment">//强制执行</span></span><br><span class="line">			(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">			</span><br><span class="line">			alert(<span class="string">'cat'</span>); </span><br><span class="line">			&#125;());</span><br></pre></td></tr></table></figure>
<hr>
<p><strong><em>匿名函数的应用</em></strong><br>1.绑定事件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;input type="button" value="点击" id="btn"&gt;</span><br><span class="line"></span><br><span class="line">```<span class="selector-tag">javascript</span></span><br><span class="line">var btn=document.querySelector("#btn");    //querySelector是H5中新增的查找dom元素的方法</span><br><span class="line">    		btn.οnclick=function()&#123;</span><br><span class="line">    			<span class="selector-tag">alert</span>("");</span><br><span class="line">    		&#125;</span><br></pre></td></tr></table></figure>
<p>2.应用对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line"></span><br><span class="line">    animal:<span class="string">"汤姆猫"</span>,</span><br><span class="line"></span><br><span class="line">    voice:<span class="string">"喵喵喵~~"</span>,</span><br><span class="line"></span><br><span class="line">    CAT:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是"</span>+<span class="keyword">this</span>.animal+<span class="string">"，我会"</span>+<span class="keyword">this</span>.voice+<span class="string">"叫！"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(obj.CAT());</span><br></pre></td></tr></table></figure>
<p>3.应用函数表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将匿名函数赋值给变量cat</span></span><br><span class="line"><span class="keyword">var</span> cat=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"喵喵喵~~"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用方式与调用普通函数一样</span></span><br><span class="line">alert(cat());</span><br></pre></td></tr></table></figure>
<p>4、回调函数的应用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是每5秒执行一次的回调函数"</span>);</span><br><span class="line">&#125;,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure>
<p>5、返回值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//返回匿名函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"喵喵喵~~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用匿名函数</span></span><br><span class="line">alert(cat()());</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="keyword">var</span> mao=cat();</span><br><span class="line">alert(mao());</span><br></pre></td></tr></table></figure>
<p>6.链式调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">animal</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">alert(animal); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">arguments</span>.callee; </span><br><span class="line"></span><br><span class="line">&#125;)(<span class="string">'cat'</span>)(<span class="string">'dog'</span>)(<span class="string">'pig'</span>);</span><br></pre></td></tr></table></figure>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven仓库安装配置教程(windows)</title>
    <url>/2020/07/21/Maven%E4%BB%93%E5%BA%93%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B-windows/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h2 id="1-安装本地Maven"><a href="#1-安装本地Maven" class="headerlink" title="1. 安装本地Maven"></a>1. 安装本地Maven</h2><p>点此进入<a href="http://maven.apache.org/guides/getting-started/index.html" target="_blank" rel="noopener">maven官网</a>下载<br><img src="https://img-blog.csdnimg.cn/20200717171858155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><p>系统变量:MAVEN_HOME = D:\apache-maven-3.6.1<br><img src="https://img-blog.csdnimg.cn/20200717172006252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>系统变量:path = %MAVEN_HOME%\bin<br><img src="https://img-blog.csdnimg.cn/20200717172116727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<!-- more -->
<hr>
<h2 id="3-验证安装"><a href="#3-验证安装" class="headerlink" title="3. 验证安装"></a>3. 验证安装</h2><p>然后win+R 运行cmd 输入 mvn -version，如图所示则配置成功！！！<br><img src="https://img-blog.csdnimg.cn/20200717172219961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="4-配置settings文件"><a href="#4-配置settings文件" class="headerlink" title="4. 配置settings文件"></a>4. 配置settings文件</h2><p>在D:\apache-maven-3.6.1\conf下可以找到settings文件<br>找到第52行，这里是maven默认的仓库，复制第53行<br><localRepository>/path/to/local/repo</localRepository><br>将它拿到注释外并将中间的内容改成你需要的路径:(不改也行)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;localRepository&gt;D:/repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>
<p>这里的路径随便设置，注意这里是正斜杠<br>因为国外的服务器下载jar包很慢所以我们改为阿里云服务器（大约在150行左右），这两个仓库只用选一个(根据大家反馈建议使用第一个，第二个在有的版本可能会出现warning)<br> <!-- 阿里云仓库 --><br>        <mirror><br>            <id>alimaven</id><br>            <mirrorOf>central</mirrorOf><br>            <name>aliyun maven</name><br>            <url><a href="http://maven.aliyun.com/nexus/content/repositories/central/" target="_blank" rel="noopener">http://maven.aliyun.com/nexus/content/repositories/central/</a></url><br>        </mirror><br>     或者<br>      <mirror><br>        <id>nexus-aliyun</id><br>        <mirrorOf>*</mirrorOf><br>        <name>Nexus aliyun</name><br>        <url><a href="http://maven.aliyun.com/nexus/content/groups/public" target="_blank" rel="noopener">http://maven.aliyun.com/nexus/content/groups/public</a></url><br>     </mirror><br>在最后配置jdk，也要夹在两个profiles标签之间（不改也没事）</p>
<!-- more -->

<!-- java版本 --> 
<profile>
      <id>jdk-1.8</id>
      <activation>
        <activeByDefault>true</activeByDefault>
        <jdk>1.8</jdk>
      </activation>

<pre><code>&lt;properties&gt;
  &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
  &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
  &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;
&lt;/properties&gt;</code></pre></profile>

<p>配置完成，在命令行输入mvn help:system测试，看到下载链接里面是ailiyun的链接表示配置成功：<br><img src="https://img-blog.csdnimg.cn/20200717172718483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MANIFEST.MF文件属性总结理解</title>
    <url>/2020/07/22/MANIFEST-MF%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E6%80%BB%E7%BB%93%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="MANIFEST-MF"><a href="#MANIFEST-MF" class="headerlink" title="MANIFEST.MF"></a>MANIFEST.MF</h1><p>定义了与扩展和包相关的数据；<br>打开Java的JAR文件我们经常可以看到文件中包含着一个META-INF目录， 这个目录下会有一些文件，其中必有一个MANIFEST.MF，这个文件描述了该Jar文件的很多信息。<br><img src="https://img-blog.csdnimg.cn/20200720161738668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="MANIFEST-MF文件属性"><a href="#MANIFEST-MF文件属性" class="headerlink" title="MANIFEST.MF文件属性"></a>MANIFEST.MF文件属性</h2><p><img src="https://img-blog.csdnimg.cn/20200720162632799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<!-- more -->
<p>一. 一般属性</p>
<ol>
<li>Manifest-Version<br>用来定义manifest文件的版本，例如：Manifest-Version: 1.0</li>
<li>Created-By<br>声明该文件的生成者，一般该属性是由jar命令行工具生成的，例如：Created-By: Apache Ant 1.5.1</li>
<li>Signature-Version<br>定义jar文件的签名版本</li>
<li>Class-Path<br>应用程序或者类装载器使用该值来构建内部的类搜索路径</li>
</ol>
<p>二. 应用程序相关属性</p>
<ol>
<li>Main-Class<br>定义jar文件的入口类，该类必须是一个可执行的类，一旦定义了该属性即可通过 java -jar x.jar来运行该jar文件。</li>
</ol>
<p>三. 小程序(Applet)相关属性</p>
<ol>
<li>Extendsion-List<br>该属性指定了小程序需要的扩展信息列表，列表中的每个名字对应以下的属性</li>
<li><extension>-Extension-Name</li>
<li><extension>-Specification-Version</li>
<li><extension>-Implementation-Version</li>
<li><extension>-Implementation-Vendor-Id</li>
<li><extension>-Implementation-URL</li>
</ol>
<p>四. 扩展标识属性</p>
<ol>
<li>Extension-Name<br>该属性定义了jar文件的标识，例如Extension-Name: Struts Framework</li>
</ol>
<p>五. 包扩展属性</p>
<ol>
<li>Implementation-Title   定义了扩展实现的标题</li>
<li>Implementation-Version   定义扩展实现的版本</li>
<li>Implementation-Vendor   定义扩展实现的组织  </li>
<li>Implementation-Vendor-Id   定义扩展实现的组织的标识</li>
<li>Implementation-URL :   定义该扩展包的下载地址(URL)</li>
<li>Specification-Title   定义扩展规范的标题</li>
<li>Specification-Version   定义扩展规范的版本</li>
<li>Specification-Vendor   声明了维护该规范的组织</li>
<li>Sealed   定义jar文件是否封存，值可以是true或者false (这点我还不是很理解)</li>
</ol>
<p>六. 签名相关属性</p>
<p>签名方面的属性我们可以来参照JavaMail所提供的mail.jar中的一段</p>
<p>Name: javax/mail/Address.class<br>Digest-Algorithms: SHA MD5<br>SHA-Digest: AjR7RqnN//cdYGouxbd06mSVfI4=<br>MD5-Digest: ZnTIQ2aQAtSNIOWXI1pQpw==</p>
<p>这段内容定义类签名的类名、计算摘要的算法名以及对应的摘要内容(使用BASE方法进行编码)</p>
<p>七.自定义属性</p>
<p>除了前面提到的一些属性外，你也可以在MANIFEST.MF中增加自己的属性以及响应的值，例如J2ME程序jar包中就可能包含着如下信息</p>
<p>MicroEdition-Configuration: CLDC-1.0<br>MIDlet-Name: J2ME_MOBBER Midlet Suite<br>MIDlet-Info-URL: <a href="http://www.javayou.com" target="_blank" rel="noopener">http://www.javayou.com</a><br>MIDlet-Icon: /icon.png<br>MIDlet-Vendor: Midlet Suite Vendor<br>MIDlet-1: mobber,/icon.png,mobber<br>MIDlet-Version: 1.0.0<br>MicroEdition-Profile: MIDP-1.0<br>MIDlet-Description: Communicator<br>其他可参考：<br><a href="https://www.cnblogs.com/Gandy/p/7290069.html" target="_blank" rel="noopener">MANIFEST.MF文件详解</a></p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>MANIFEST.MF</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven仓库导包慢的解决办法</title>
    <url>/2020/07/22/Maven%E4%BB%93%E5%BA%93%E5%AF%BC%E5%8C%85%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="故障原因"><a href="#故障原因" class="headerlink" title="故障原因"></a>故障原因</h1><p>原因：默认安装的maven使用官网地址下载依赖包，在国内访问比较慢。<br>方法：将maven配置文件中下载依赖包地址修改成国内地址，一般都使用阿里的地址。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>1，右键项目名，选择maven<br><img src="https://img-blog.csdnimg.cn/20200717092137188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>替换setting.xml文件中的这部分为如下样式：<br><img src="https://img-blog.csdnimg.cn/20200717092316725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<!-- more -->
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;!-- mirror</span><br><span class="line">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="line">     | <span class="keyword">this</span> mirror serves has an ID that matches the mirrorOf element of <span class="keyword">this</span> mirror. IDs are used</span><br><span class="line">     | <span class="keyword">for</span> inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="line">     |</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;mirrorId&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http:<span class="comment">//my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;!-- &lt;mirror&gt;       --&gt;</span><br><span class="line">      &lt;!-- &lt;id&gt;repo2&lt;/id&gt;       --&gt;</span><br><span class="line">      &lt;!-- &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;       --&gt;</span><br><span class="line">      &lt;!-- &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;       --&gt;</span><br><span class="line">      &lt;!-- &lt;url&gt;http:<span class="comment">//repo2.maven.org/maven2/&lt;/url&gt;       --&gt;</span></span><br><span class="line">    &lt;!-- &lt;/mirror&gt;    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;!--This sends everything <span class="keyword">else</span> to /<span class="keyword">public</span> --&gt;</span><br><span class="line">      &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; </span><br><span class="line">      &lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;!--This is used to direct the <span class="keyword">public</span> snapshots repo in the </span><br><span class="line">          profile below over to a different nexus group --&gt;</span><br><span class="line">      &lt;id&gt;nexus-public-snapshots&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;public-snapshots&lt;/mirrorOf&gt; </span><br><span class="line">      &lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/repositories/snapshots/&lt;/url&gt;</span></span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p>2.打开本地maven位置，选择setting.xml文件，修改同上位置<br><img src="https://img-blog.csdnimg.cn/20200717092604424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开.xml文件后替换红框部分：<br><img src="https://img-blog.csdnimg.cn/20200717092759968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重启idea后更新maven仓库，下载飞快。</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis映射标签resultMap与resultType、parameterMap与 parameterType</title>
    <url>/2020/07/21/MyBatis%E6%98%A0%E5%B0%84%E6%A0%87%E7%AD%BEresultMap%E4%B8%8EresultType%E3%80%81parameterMap%E4%B8%8E-parameterType/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="MyBatis映射标签"><a href="#MyBatis映射标签" class="headerlink" title="MyBatis映射标签"></a>MyBatis映射标签</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.dvms.dao.UserDao"</span>&gt;</span><br><span class="line">....</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200718195511189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<!-- more -->
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.dvms.dao.UserDao"</span>&gt;</span><br><span class="line">&lt;!--注册/新增用户--&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"save"</span> parameterType=<span class="string">"User"</span>&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">user</span> <span class="params">(id,username,password,sex,phone,email,role)</span> <span class="title">values</span> <span class="params">(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;sex&#125;,#&#123;phone&#125;,#&#123;email&#125;,#&#123;role&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">&lt;!--登录验证--&gt;</span></span><br><span class="line"><span class="function">    &lt;select id</span>=<span class="string">"login"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        select id,username,password,sex,phone,email,role from user</span><br><span class="line">        where username =#&#123;username&#125; and password =#&#123;password&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;!--查询所有用户--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAlluser"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        select id,username,password,sex,phone,email,role from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;!--删除用户--&gt;</span><br><span class="line">    &lt;delete id=<span class="string">"delete"</span> parameterType=<span class="string">"String"</span>&gt;</span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">&lt;!--修改用户信息--&gt;</span><br><span class="line">    &lt;!--查到要修改的用户信息--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"update"</span> parameterType=<span class="string">"String"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        select id,username,password,sex,phone,email,role from user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--修改用户信息--&gt;</span><br><span class="line">    &lt;update id=<span class="string">"add"</span> parameterType=<span class="string">"User"</span>&gt;</span><br><span class="line">        update user set username=#&#123;username&#125;,password=#&#123;password&#125;,sex=#&#123;sex&#125;,phone=#&#123;phone&#125;,email=#&#123;email&#125;,role=#&#123;role&#125; where id=#&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<p>在MyBatis中，输入与输出都是相对于<strong>数据库</strong>而言，我们通过<strong>parameterType</strong>完成输入映射(指将值映射到sql语句的占位符中，值的类型与dao层响应方法的参数类型一致)，通过<strong>resultType</strong>完成输出映射(从数据库中输出，通过dao层的方法查询到的数据输出到pojo对象（实体类entity）中)。 </p>
<h1 id="1-输入映射（往数据库输入）"><a href="#1-输入映射（往数据库输入）" class="headerlink" title="1. 输入映射（往数据库输入）"></a>1. 输入映射（往数据库输入）</h1><h2 id="parameterMap（不常用）与-parameterType（常用）"><a href="#parameterMap（不常用）与-parameterType（常用）" class="headerlink" title="parameterMap（不常用）与 parameterType（常用）"></a>parameterMap（不常用）与 parameterType（常用）</h2><p> ParameterMap和resultMap类似，表示将查询结果集中列值的类型一一映射到java对象属性的类型上，在开发过程中不推荐这种方式。<br> 一般使用<strong>parameterType</strong>直接将查询结果列值类型自动对应到java对象属性类型上，不再配置映射关系一一对应。</p>
<hr>
<h1 id="2-输出映射（从数据库输出）"><a href="#2-输出映射（从数据库输出）" class="headerlink" title="2. 输出映射（从数据库输出）"></a>2. 输出映射（从数据库输出）</h1><h2 id="resultMap与resultType（常用）"><a href="#resultMap与resultType（常用）" class="headerlink" title="resultMap与resultType（常用）"></a>resultMap与resultType（常用）</h2><p> 两者都是表示查询结果集与java对象之间的一种关系，处理查询结果集，映射到java对象。<br> resultMap表示将查询结果集中的列一一映射到bean对象的各个属性。映射的查询结果集中的列标签可以根据需要灵活变化，并且，在映射关系中，还可以通过typeHandler设置实现查询结果值的类型转换，比如布尔型与0/1的类型转换。</p>
<hr>
<h2 id="和-的使用"><a href="#和-的使用" class="headerlink" title="#{}和${}的使用"></a>#{}和${}的使用</h2><p>resultMap和ParameterMap书写拼写要使用#{}，resultType 和parameterType类型使用${}，（一般是用<strong>#{}</strong>）使用例子如下：</p>
<p>Select ID，COMMAND from Message where COMMAND=#{command}</p>
<p>Select ID，COMMAND from Message where COMMAND=‘${command}’</p>
<p>前者解析为：</p>
<pre><code>Select ID，COMMAND from Message where COMMAND=？具有预编译效果</code></pre><p>后者解析为：</p>
<pre><code>Select ID，COMMAND from Message where COMMAND=段子   不具有预编译效果</code></pre><hr>
<!-- more -->
<p>在Mybatis中传递多个参数要做参数的绑定（@Param）<br><img src="https://img-blog.csdnimg.cn/20200719121212891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不写parameterType也可以运行,因为Mybatis能自动识别，但返回值类型不能不写!!<br>Mybatis自动识别入参对象, 传入单个map或单个对象,无需写@Param注解   如@Param(“map”)  Map&lt;String, Object&gt; map<br>那么什么时候必须在mapper接口上写@Param注解呢,   mapper接口中有<strong>多个参数</strong>(每个对象或参数都要加@Param注解), 或<strong>一个 String</strong>, 必须使用@Param注解,<br><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库范围、模糊、时间范围（时间段）查询语句</title>
    <url>/2020/07/23/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%9B%B4%E3%80%81%E6%A8%A1%E7%B3%8A%E3%80%81%E6%97%B6%E9%97%B4%E8%8C%83%E5%9B%B4%EF%BC%88%E6%97%B6%E9%97%B4%E6%AE%B5%EF%BC%89%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="MySQL数据库范围、模糊、时间范围查询语句"><a href="#MySQL数据库范围、模糊、时间范围查询语句" class="headerlink" title="MySQL数据库范围、模糊、时间范围查询语句"></a>MySQL数据库范围、模糊、时间范围查询语句</h1><h2 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h2><ul>
<li>MySQL5.46</li>
</ul>
<hr>
<h2 id="1-模糊查询语句"><a href="#1-模糊查询语句" class="headerlink" title="1. 模糊查询语句"></a>1. 模糊查询语句</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT 字段 FROM TABLENAME WHERE 某字段 Like 条件</span><br></pre></td></tr></table></figure>
<p>其中条件有四种匹配方式：<br>1、<strong>%</strong>：表示任意0个或多个字符。可匹配任意类型和长度的字符，如果是中文，使用两个百分号（%%）来表示。</p>
<p>eg:SELECT * FROM TABLENAME WHERE NAME LIKE ‘%aa%’<br>功能：找出NAME中含有aa的所有记录<br>eg:SELECT * FROM TABLENAME WHERE NAME LIKE ‘%aa%’ AND NAME LIKE ‘%bb%’<br>功能：找出NAME中既有“aa”又有“bb”的所有记录<br>eg:SELECT * FROM TABLENAME WHERE NAME LIKE ‘%aa%bb%’<br>功能：找出 NAME中形如aabbcc,不能找出bbaacc</p>
<p>2、<strong>_</strong>： 表示任意单个字符。匹配单个任意字符，常用来限制表达式的字符长度语句</p>
<p>eg: SELECT * FROM TABLENAME WHERE NAME LIKE ‘<em>aa</em>‘<br>功能：找出 NAME中形如找出bbaacc,也就是aa位于中间的所有记录<br>eg:  SELECT * FROM TABLENAME WHERE NAME LIKE ‘aa__’;<br>功能：找出 NAME中形如aabbcc,不能找出bbaacc,只能找出以aa开头的所有记录</p>
<p>3、<strong>[ ]</strong>：表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。</p>
<p>eg:  SELECT * FROM TABLENAME WHERE NAME LIKE ‘[abc]d’<br>功能：找出 NAME中形如ad、bd、cd的所有记录<br>当 <strong>[ ]</strong> 内有一系列字符（01234、abcde之类的）则可略写为“0-4”、“a-e”<br>eg:SELECT * FROM TABLENAME WHERE NAME LIKE ‘a[a-e]’<br>功能：找出 NAME中形如aa、ab、ac、ad、ae的所有记录</p>
<p>4、<strong>[^ ]</strong> ：表示不在括号所列之内的单个字符。其取值和 [] 相同，要求所匹配对象为指定字符以外的任一个字符。</p>
<p>eg:SELECT * FROM TABLENAME WHERE NAME LIKE ‘[^abc]d’<br>功能：找出 NAME中除了形如ad、bd、cd的所有记录<br>eg:SELECT * FROM TABLENAME WHERE NAME LIKE ‘d[^abc]’<br>其中abc也可以写成a-c<br>功能：找出 NAME中除了形如da、db、dc的所有记录</p>
<hr>
<h2 id="范围查询语句"><a href="#范围查询语句" class="headerlink" title="范围查询语句"></a>范围查询语句</h2><p><strong>between</strong>：between限制查询数据范围时包括了边界值<br>between and 包含时间界限，这就相当于&gt;= &lt;=，而&gt; &lt;不包含<br><strong>not between</strong>不包括的数据范围</p>
<p>eg: SELECT * FROM TABLENAME WHERE time BETWEEN time1 AND time2<br>功能：找出==在==time1 和 time2范围内的所有记录</p>
<p>eg:  SELECT * FROM TABLENAME WHERE  A NOT  BETWEEN num1 AND num2<br>功能：找出==不在== num1 和 num2范围内的所有记录</p>
<hr>
<h2 id="时间范围（时间段）查询语句"><a href="#时间范围（时间段）查询语句" class="headerlink" title="时间范围（时间段）查询语句"></a>时间范围（时间段）查询语句</h2><p>eg: SELECT * FROM TABLENAME WHERE time BETWEEN ‘2020-06-13 00:00:00’ and ‘2020-06-13 18:30:59’<br>功能：找出==在== 2020-06-13 00:00:00 和 2020-06-13 18:30:59范围内的所有记录</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>sql语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装教程（windows）</title>
    <url>/2020/07/23/Nginx%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88windows%EF%BC%89/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h2 id="1-官网下载"><a href="#1-官网下载" class="headerlink" title="1.官网下载"></a>1.官网下载</h2><p> <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">Nginx官网</a><br><img src="https://img-blog.csdnimg.cn/20200717111521554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载后解压到本地<br><img src="https://img-blog.csdnimg.cn/20200717111714376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="2-安装部署"><a href="#2-安装部署" class="headerlink" title="2.安装部署"></a>2.安装部署</h2><p>1、下载完成后，解压缩，运行cmd，使用命令进行操作，<strong>不要直接双击nginx.exe</strong>，一定要在dos窗口启动，不要直接双击nginx.exe，这样会导致修改配置后重启、停止nginx无效，需要手动关闭任务管理器内的所有nginx进程，再启动才可以。<br>2、使用命令行到达nginx的加压缩后的目录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cd D:\nginx-<span class="number">1.19</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<p>3、启动nginx服务，启动时会一闪而过是正常的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">start nginx</span><br></pre></td></tr></table></figure>
<p>4、查看任务进程是否存在，dos或打开任务管理器都行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tasklist /fi <span class="string">"imagename eq nginx.exe"</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200717112404316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过任务管理器确认：<br><img src="https://img-blog.csdnimg.cn/20200717112422100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后就打开浏览器访问刚才的域名及端口<a href="http://localhost:80或127.0.0.1:80，（默认为80）出现欢迎页就说明部署成功了！">http://localhost:80或127.0.0.1:80，（默认为80）出现欢迎页就说明部署成功了！</a><br><img src="https://img-blog.csdnimg.cn/20200717112701940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>启动脚本startup.bat（新建txt后另存，放到nginx.exe同一级）或者直接点击nginx.exe<br>脚本内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@echo</span> off</span><br><span class="line">rem 如果启动前已经启动nginx并记录下pid文件，会kill指定进程</span><br><span class="line">nginx.exe -s stop</span><br><span class="line"></span><br><span class="line">rem 测试配置文件语法正确性</span><br><span class="line">nginx.exe -t -c conf/nginx.conf</span><br><span class="line"></span><br><span class="line">rem 显示版本信息</span><br><span class="line">nginx.exe -v</span><br><span class="line"></span><br><span class="line">rem 按照指定配置去启动nginx</span><br><span class="line">nginx.exe -c conf/nginx.conf</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-常见问题"><a href="#3-常见问题" class="headerlink" title="3.常见问题"></a>3.常见问题</h2><p>错误查看：<br><img src="https://img-blog.csdnimg.cn/20200717113419110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-常见错误："><a href="#3-常见错误：" class="headerlink" title="3.常见错误："></a>3.常见错误：</h2><p>(1)端口号被占用<br>在conf目录下找到nginx.conf使用txt文本打开即可，找到server这个节点，修改端口号，如果有需求可以修改主页目录没有就不用修改<br><img src="https://img-blog.csdnimg.cn/20200717113636799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改完成后保存，使用以下命令检查一下配置文件是否正确，后面是nginx.conf文件的路径，successful就说明正确了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nginx -t -c /nginx-<span class="number">1.15</span><span class="number">.2</span>/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p>如果程序没启动就直接start nginx启动，如果已经启动了就使用以下命令重新加载配置文件并重启</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>在项目中用到nginx，启动时闪退，查看错误日志，给出的错误如下：<br>nginx: [emerg] bind() to 0.0.0.0:80 failed (10013: An attempt was made to access<br> a socket in a way forbidden by its access permissions)<br>分析：<br>nginx的默认端口是80，通过错误日志可以看出是80端口被占用导致了nginx无法启动。<br>解决办法：<br>1、按键win+R打开运行界面，输入cmd进入控制台界面<br>2、输入netstat -ano | findstr “:80 “<br>通过上述命令查看80端口占用情况，查看后，pid的值为4。<br>参考：链接: <a href="https://blog.csdn.net/ytm15732625529/article/details/79058372" target="_blank" rel="noopener">link</a>.<br>(2)nginx文件夹路径含中文</p>
<hr>
<h2 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4.常用命令"></a>4.常用命令</h2><p>关闭nginx服务使用以下命令，同样也是一闪而过是正常的，看一下是否进程已消失即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nginx -s stop       快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。</span><br><span class="line">nginx -s quit       平稳关闭Nginx，保存相关信息，有安排的结束web服务。</span><br><span class="line">nginx -s reload     因改变了Nginx相关配置，需要重新加载配置而重载。</span><br><span class="line">nginx -s reopen     重新打开日志文件。</span><br><span class="line">nginx -c filename   为 Nginx 指定一个配置文件，来代替缺省的。</span><br><span class="line">nginx -t            不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。</span><br><span class="line">nginx -v            显示 nginx 的版本。</span><br><span class="line">nginx -V            显示 nginx 的版本，编译器版本和配置参数。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx安装教程</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库安装教程(windows)</title>
    <url>/2020/07/23/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-windows/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h2 id="1-下载及配置环境变量"><a href="#1-下载及配置环境变量" class="headerlink" title="1. 下载及配置环境变量"></a>1. 下载及配置环境变量</h2><p>⦁    解压mysql安装包：<br>将mysql-5.7.22-win32的zip解压缩到一个位置，在这里我们假设其被解压缩到D盘<br>⦁    解压完后的mysql-5.7.22-win32文件夹如图2.1所示，在mysql-5.7.22-win32文件夹下新建一个叫data的文件夹和一个ini格式的叫my.ini的文件（用记事本新建一个txt，再将其另存为成my.ini）<br><img src="https://img-blog.csdnimg.cn/20200717151045808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>my.ini内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[mysql]  </span><br><span class="line"># 设置mysql客户端默认字符集  </span><br><span class="line"><span class="keyword">default</span>-character-set=utf8  </span><br><span class="line">[mysqld]  </span><br><span class="line">#设置3306端口</span><br><span class="line">port = <span class="number">3306</span>  </span><br><span class="line"># 设置mysql的安装目录  </span><br><span class="line">basedir=D:\mysql-<span class="number">5.7</span><span class="number">.22</span>-win32</span><br><span class="line"># 设置mysql数据库的数据的存放目录  </span><br><span class="line">datadir=D:\mysql-<span class="number">5.7</span><span class="number">.22</span>-win32\data  </span><br><span class="line"># 允许最大连接数  </span><br><span class="line">max_connections=<span class="number">200</span>  </span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集  </span><br><span class="line">character-set-server=utf8  </span><br><span class="line"># 创建新表时将使用的默认存储引擎  </span><br><span class="line"><span class="keyword">default</span>-storage-engine=INNODB</span><br></pre></td></tr></table></figure>
<p>配置环境变量：右键点击“我的电脑”，选择“属性”，得到如图3.1所示界面，选择“高<br>级系统设置”；<br>进入“环境变量”后，在下边的系统变量里选择“新建”，在弹出的对话框里“变量名”一栏里填mysql_home，变量值里填MySQL的bin文件夹的路径，本例中为D:\mysql-5.7.22-win32\bin。<br> <img src="https://img-blog.csdnimg.cn/2020071715143948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后再环境变量path中添加mysql的环境变量，选择Path的环境变量，之后点击编辑——右上角新建——填写”%环境变量名称%\bin”，图中划横线的地方填写的是上一步第一个输入框的名称，所以我这是%mysql_home%\bin；如果是windows7的可以在Path后追加“;%mysql_home%\bin”。<br><img src="https://img-blog.csdnimg.cn/20200717151609870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="2-配置MySQL数据库"><a href="#2-配置MySQL数据库" class="headerlink" title="2. 配置MySQL数据库"></a>2. 配置MySQL数据库</h2><p>1.以管理员身份运行cmd（按照C:\Windows\System32的路径找到cmd.exe，右键点击，选择“以管理员身份运行”），之后输入<strong>D:</strong>（即MySQL所在的盘），然后再输入<strong>cd mysql-5.7.22-win32\bin</strong>（即MySQL的bin文件夹的路径）;<br>2.这样就通过cmd进入MySQL的bin文件夹了。之后再输入<strong>mysqld –install</strong>，完成对MySQL的安装;<br>3.再输入<strong>mysqld -–initialize</strong>，完成对MySQL的初始化，这一步骤会有一段时间;<br>4.data文件夹会出现一些文件，其中.err的文件中有生成的MySQL初始密码，该密码为随机产生的，因此务必记住；<br>5.启动 MySQL 服务：进入 MySQL 的 bin 目录(经过前面的步骤，此时正处于 MySQL 的 bin目录下)，输入：<strong>net start mysql</strong><br>登录MySQL，输入<strong>mysql -u root –p</strong>，当出现Enter password：就输入刚才随机生成的初始密码（==注意：初始密码无法复制，必须手动输入==）<br>6.若觉得初始密码太过难记，则可修改密码，输入<strong>set password for root@localhost=password(‘123456’);</strong>其中括号里的就是修改后的密码，（现在我们的密码是：123456，必须加分号）<br>进行上述步骤后，我们已经可以使用MySQL了，只要进行第5、6步就可以，但是这样的MySQL很不直观，因此我们有必要再安装MySQL的可视化文件MySQL workbench。<br><img src="https://img-blog.csdnimg.cn/20200717151710738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;D:</span><br><span class="line"></span><br><span class="line">D:\&gt;cd mysql-<span class="number">5.7</span><span class="number">.22</span>-win32\bin</span><br><span class="line"></span><br><span class="line">D:\mysql-<span class="number">5.7</span><span class="number">.22</span>-win32\bin&gt;mysqld -install</span><br><span class="line">Service successfully installed.</span><br><span class="line"></span><br><span class="line">D:\mysql-<span class="number">5.7</span><span class="number">.22</span>-win32\bin&gt;mysqld --initialize</span><br><span class="line"></span><br><span class="line">D:\mysql-<span class="number">5.7</span><span class="number">.22</span>-win32\bin&gt;net start mysql</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功。</span><br><span class="line"></span><br><span class="line">D:\mysql-<span class="number">5.7</span><span class="number">.22</span>-win32\bin&gt;mysql -u root -p</span><br><span class="line">Enter password: ************</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">2</span></span><br><span class="line">Server version: <span class="number">5.7</span><span class="number">.22</span></span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2018</span>, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> help. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; set password <span class="keyword">for</span> root<span class="meta">@localhost</span>=password(<span class="string">'123456'</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>常见错误解决办法：<br>1.未以管理员身份运行cmd<br>执行mysqld  -install时，出现Install/Remove  of   the  Service   Denied!<br>进入系统盘找到C:\Windows\System32\cmd.exe（文件较多，可以快速搜索找到cmd.exe）右键以管理员身份运行  再次进入相应目录执行.<br>2.mysql解压目录下没有my.ini配置文件<br>mysqld: [ERROR] Found option without preceding group in config file D:\mysql-5.7.22-win32\my.ini at line 1!<br>mysqld: [ERROR] Fatal error in defaults handling. Program aborted!<br>3.弹出：由于找不到MSVCR120.dll,无法继续执行代码.重新安装程序可能会解决此问题！（未安装 vcredist 引起的）<br>下载 vcredist 地址：链接: <a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=40784" target="_blank" rel="noopener">vcredist</a><br><img src="https://img-blog.csdnimg.cn/20200717154150718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020071715420274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装刚才下载的那个软件，位置默认即可（会有一个安装不成功，不影响），然后重新进行安装，成功解决这个问题！</p>
<hr>
<h2 id="3-安装可视化文件MySQL-workbench"><a href="#3-安装可视化文件MySQL-workbench" class="headerlink" title="3.安装可视化文件MySQL workbench"></a>3.安装可视化文件MySQL workbench</h2><p>本文中安装的workbench的文件名为：mysql-workbench-community-6.3.10-winx64.msi<br>可能会出现如下情况，系统缺少“Visual C++2015 Redistributable Package”。此时运行文件夹下的vc_进行安装。<br>双击后点击next按钮，之后我们可以选择workbench的安装路径，这里我们使用默认路径，再点击next，因为workbench并不大，因此我们选择完全安装，点击next，进入安装界面，点击Install即可安装等待安装完成后，点击Finish即可完成安装。<br>安装完成后我们打开workbench，点击Local instance MySQL，输入我们设置的MySQL密码即可连接数据库：<br><img src="https://img-blog.csdnimg.cn/20200717152941696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>数据库可视化界面如下：<br><img src="https://img-blog.csdnimg.cn/20200717152956581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库安装教程</tag>
      </tags>
  </entry>
  <entry>
    <title>PageHelper分页插件的整合与项目应用</title>
    <url>/2020/07/22/PageHelper%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E7%9A%84%E6%95%B4%E5%90%88%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="MyBatis-分页插件-PageHelper"><a href="#MyBatis-分页插件-PageHelper" class="headerlink" title="MyBatis 分页插件 PageHelper"></a>MyBatis 分页插件 PageHelper</h1><p>链接: <a href="https://pagehelper.github.io/" target="_blank" rel="noopener">PageHelper官网</a>.<br>分页插件支持任何复杂的单表、多表分页；</p>
<hr>
<p>分页结果（结合了一点BootStrap）：<br><img src="https://img-blog.csdnimg.cn/20200525223811792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h1><!-- more -->
<ul>
<li>IDEA2018.3 </li>
<li>JDK1.8 </li>
<li>SpringBoot2.3.0 </li>
<li>360浏览器</li>
</ul>
<hr>
<h1 id="Springboot整合PageHelper插件"><a href="#Springboot整合PageHelper插件" class="headerlink" title="Springboot整合PageHelper插件"></a>Springboot整合PageHelper插件</h1><h2 id="1-pom-xml引入PageHelper依赖"><a href="#1-pom-xml引入PageHelper依赖" class="headerlink" title="1. pom.xml引入PageHelper依赖"></a>1. pom.xml引入PageHelper依赖</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--引入pagehelper分页插件--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="2-配置application-properties-application-yml"><a href="#2-配置application-properties-application-yml" class="headerlink" title="2. 配置application.properties/application.yml"></a>2. 配置application.properties/application.yml</h2><p>application.properties:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># pagehelper分页插件配置</span><br><span class="line">pagehelper.helperDialect=mysql</span><br><span class="line">pagehelper.reasonable=<span class="keyword">true</span></span><br><span class="line">pagehelper.supportMethodsArguments=<span class="keyword">true</span></span><br><span class="line">pagehelper.params=count=countSql</span><br></pre></td></tr></table></figure>
<p>application.yml:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># pagehelper分页插件配置</span><br><span class="line">pagehelper:</span><br><span class="line">  helperDialect: mysql</span><br><span class="line">  reasonable: <span class="keyword">true</span> </span><br><span class="line">  supportMethodsArguments: <span class="keyword">true</span> </span><br><span class="line">  pageSizeZero: false #pageSize=0</span><br></pre></td></tr></table></figure>
<p>有关分页插件的基本配置就完成了（当然其他必要的基本配置也需要提前配置好）;<br>也可以直接参考官网链接: <a href="https://pagehelper.github.io/docs/howtouse/" target="_blank" rel="noopener">使用文档</a>.</p>
<hr>
<h1 id="SpringBoot结合Thymeleaf实现分页"><a href="#SpringBoot结合Thymeleaf实现分页" class="headerlink" title="SpringBoot结合Thymeleaf实现分页"></a>SpringBoot结合Thymeleaf实现分页</h1><p>首先我们需要写一个查询数据库然后展示到前端界面的各层代码：<br>Entity类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cjw.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>) <span class="comment">//链式调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date bir;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Dao层接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cjw.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cjw.entity.Emp;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Emp&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据库Mapper.xml文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.cjw.dao.EmpDao"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--查询所有--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultType=<span class="string">"Emp"</span>&gt;</span><br><span class="line">        select id,name,salary,age,bir from t_emp</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p>服务层及其实现层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cjw.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cjw.entity.Emp;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Emp&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cjw.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cjw.dao.EmpDao;</span><br><span class="line"><span class="keyword">import</span> com.cjw.entity.Emp;</span><br><span class="line"><span class="keyword">import</span> com.cjw.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpServiceImpl</span> <span class="keyword">implements</span> <span class="title">EmpService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后只需要在控制层中使用分页插件进行替换，并用model返回至前端：<br>控制层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"emp/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(@RequestParam(defaultValue = <span class="string">"1"</span>)</span> <span class="keyword">int</span> pageNum,</span></span><br><span class="line"><span class="function">                          @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"5"</span>)</span> <span class="keyword">int</span> pageSize,</span></span><br><span class="line"><span class="function">                          Model model)</span>&#123;</span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);<span class="comment">//关键</span></span><br><span class="line">        PageInfo&lt;Emp&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(empService.findAll());</span><br><span class="line">        model.addAttribute(<span class="string">"pageInfo"</span>,pageInfo);</span><br><span class="line"><span class="comment">//        List&lt;Emp&gt; emps = empService.findAll();</span></span><br><span class="line"><span class="comment">//        model.addAttribute("emps",emps);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ems/emplist"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>前端Html:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;table class="table"&gt;</span><br><span class="line">						&lt;tr class="table_header"&gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								ID</span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								用户名</span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								收入</span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								年龄</span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								生日</span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								操作</span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">						&lt;/tr&gt;</span><br><span class="line">&lt;tr th:class="$&#123;rowstate.odd&#125;?'row1':'row2'" th:each="emp,rowstate:$&#123;pageInfo.list&#125;"  &gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								&lt;span th:text=<span class="string">"$&#123;emp.id&#125;"</span>&gt;&lt;/span&gt;</span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								&lt;span th:text=<span class="string">"$&#123;emp.name&#125;"</span>&gt;&lt;/span&gt;</span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								&lt;span th:text=<span class="string">"$&#123;emp.salary&#125;"</span>&gt;&lt;/span&gt;</span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								&lt;span th:text=<span class="string">"$&#123;emp.age&#125;"</span>&gt;&lt;/span&gt;</span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								&lt;span th:text=<span class="string">"$&#123;#dates.format(emp.bir,'yyyy-MM-dd')&#125;"</span>&gt;&lt;/span&gt;</span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">							&lt;td&gt;</span><br><span class="line">								&lt;!--&lt;a th:href=<span class="string">"@&#123;/toSave&#125;"</span>&gt;新增&lt;/a&gt;&amp;nbsp;--&gt;</span><br><span class="line">								&lt;a th:href=<span class="string">"@&#123;/emp/update(id=$&#123;emp.id&#125;)&#125;"</span>&gt;更改&lt;/a&gt;&amp;nbsp;</span><br><span class="line">								&lt;a th:href=<span class="string">"@&#123;/emp/delete(id=$&#123;emp.id&#125;)&#125;"</span>&gt;删除&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">							&lt;/td&gt;</span><br><span class="line">						&lt;/tr&gt;</span><br><span class="line">					&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p>分页部分：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;div class="modal-footer no-margin-top"&gt;</span><br><span class="line">					&lt;ul class="pagination pagination-lg"&gt;</span><br><span class="line">						&lt;li class="page-item"&gt;&lt;a class="page-link"&gt;&lt;span&gt;当前页为：&lt;/span&gt;&lt;span th:text="第+$&#123;pageInfo.pageNum&#125;+页"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">						&lt;!--&lt;li class="page-item"&gt;&lt;a class="page-link" th:href="@&#123;/emp/findAll&#125;"&gt;首页&lt;/a&gt;&lt;/li&gt;--&gt;</span><br><span class="line"></span><br><span class="line">						&lt;li&gt;&lt;a th:href=<span class="string">"@&#123;/emp/findAll?pageNum=0&#125;"</span>&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">						&lt;li class="page-item"&gt;&lt;a class="page-link" th:href="@&#123;/emp/findAll(pageNum=1)&#125;"&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">						&lt;li class="page-item"&gt;&lt;a class="page-link" th:href="@&#123;/emp/findAll(pageNum=2)&#125;"&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">						&lt;li class="page-item"&gt;&lt;a class="page-link" th:href="@&#123;/emp/findAll(pageNum=3)&#125;"&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">						&lt;li class="page-item"&gt;&lt;a class="page-link" th:href="@&#123;/emp/findAll(pageNum=$&#123;pageInfo.getNextPage()&#125;)&#125;"&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">						&lt;li class="page-item"&gt;&lt;a class="page-link"&gt;&lt;span th:text="共+$&#123;pageInfo.pageSize&#125;+页"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">					&lt;/ul&gt;</span><br><span class="line">					&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>PageHelper</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm连接MySQL数据库安装过程及常见问题的解决办法</title>
    <url>/2020/07/23/PyCharm%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>

<p>首先对于PyCharm社区版来说，在侧面和View的工具窗口中没有database，如果要与数据库连接需要下载以下几个内容：<br>1.MySQL数据库(下载并配置好)<br>2.pymysql</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<p>3.DataBase<br><img src="https://img-blog.csdnimg.cn/20200314101727511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<p>安装完成后会在PyCharm的工具栏多出一个DB Navigator：<br><img src="https://img-blog.csdnimg.cn/20200314102507370.png" alt="在这里插入图片描述"><br>点击 <strong>+</strong> 选择或删除对应的数据库:</p>
<p><img src="https://img-blog.csdnimg.cn/20200314102617714.png" alt="在这里插入图片描述"><br>之后填入与数据库一致的用户名和密码:<br><img src="https://img-blog.csdnimg.cn/20200314102711215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后配置==驱动jdbc(关键)==：<br>在本地文件夹中导入下载好的驱动（<strong>注意数据库版本：低版本对应低版本的驱动，不然会报错</strong>）<br>报错原因：版本不一致导致时差问题<br>The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.<br>方法一：版本对应；<br>方法二：修改数据库中的配置文件my,ini,添加代码：<br>default-time_zone = ‘+8:00’<br><img src="https://img-blog.csdnimg.cn/20200314103523747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试连接：<br><img src="https://img-blog.csdnimg.cn/20200314103555744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改Name然后按确定退出<br><img src="https://img-blog.csdnimg.cn/20200314103905326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>弹出提示：<br><img src="https://img-blog.csdnimg.cn/20200314104010846.png" alt="在这里插入图片描述"><br>点击Connection<br><img src="https://img-blog.csdnimg.cn/20200314104719638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>连接成功！！！</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>Pycharm</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5下拉框及其点击事件绑定</title>
    <url>/2020/07/23/PyQt5%E4%B8%8B%E6%8B%89%E6%A1%86%E5%8F%8A%E5%85%B6%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h1 id="PyQt5下拉框及其点击事件绑定"><a href="#PyQt5下拉框及其点击事件绑定" class="headerlink" title="PyQt5下拉框及其点击事件绑定"></a>PyQt5下拉框及其点击事件绑定</h1><h2 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h2><ul>
<li>Python 3.x </li>
<li>Pyqt5 </li>
<li>Qt designer </li>
<li>PyUIC</li>
</ul>
<hr>
<h2 id="最终效果描述"><a href="#最终效果描述" class="headerlink" title="最终效果描述"></a>最终效果描述</h2><p>通过点击下拉框选中信息显示在界面指定区域上，可以应用于在界面指定区域显示图像、文字、表格、数据库查询等方面。</p>
<hr>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>1.需要自己设计好QComboBox下拉框（通过Qt designer ，也可以直接手写）及其他组件<br>2.了解QComboBox类常用的信号及方法<br>|信号|描述  |<br>|–|–|<br>|Activated  |  选中下拉选项时发射信号|<br>|currentIdexChanged  | 当下拉选项索引发生变化时发射信号 |<br>|highlighted  | 当选中已选中的下拉框时发射信号 |<br>3.新建下拉框相关函数test：<br>（展示图片、文字、数据库查询（需要自己连接数据库，未提供数据库连接代码，可参考链接: <a href="https://blog.csdn.net/cjw12581/article/details/105937418" target="_blank" rel="noopener">利用pymysql操纵MySQl数据库</a>.））</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#[str] 表示comboBox中的选择框内容</span></span><br><span class="line">self.comboBox_test.activated[str].connect(self.test)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findstate</span><span class="params">(self, itemtext)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> state_flag1</span><br><span class="line">    statename = itemtext</span><br><span class="line">    <span class="comment"># 添加数据库连接代码位置</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># cur = database.cursor()</span></span><br><span class="line">        <span class="keyword">if</span> itemtext == <span class="string">"小猫"</span>:</span><br><span class="line">            self.graphicsView_5.setStyleSheet(<span class="string">"border-image: url(:/images/cat.png);"</span>)</span><br><span class="line">        self.lineEdit_58.setText(<span class="string">"小猫"</span>)</span><br><span class="line">        cur.execute(<span class="string">'select * from world where animals="小猫"'</span>)</span><br><span class="line">        <span class="keyword">elif</span> itemtext == <span class="string">"小狗"</span>:</span><br><span class="line">            self.graphicsView_5.setStyleSheet(<span class="string">"border-image: url(:/images/dog.png);"</span>)</span><br><span class="line">        self.lineEdit_58.setText(<span class="string">"小狗"</span>)</span><br><span class="line">        cur.execute(<span class="string">'select * from world where animals="小狗"'</span>)</span><br><span class="line">        <span class="keyword">elif</span> itemtext == <span class="string">"小猪"</span>:</span><br><span class="line">            self.graphicsView_5.setStyleSheet(<span class="string">"border-image: url(:/images/pig.png);"</span>)</span><br><span class="line">        self.lineEdit_58.setText(<span class="string">"小猪"</span>)</span><br><span class="line">        cur.execute(<span class="string">'select * from world where animals="小猪"'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 提示信息</span></span><br><span class="line">            self.box = QMessageBox(QMessageBox.Warning, <span class="string">"提示信息"</span>, <span class="string">"未查询到相关信息！"</span>)</span><br><span class="line">            qyes = self.box.addButton(self.tr(<span class="string">"确定"</span>), QMessageBox.YesRole)</span><br><span class="line">            <span class="comment"># qno = self.box.addButton(self.tr("否"), QMessageBox.NoRole)</span></span><br><span class="line">            self.box.exec_()</span><br><span class="line">        <span class="comment"># print(state_flag1)</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"未知异常！"</span>)</span><br><span class="line">        <span class="comment"># 提示信息</span></span><br><span class="line">        self.box = QMessageBox(QMessageBox.Warning, <span class="string">"提示信息"</span>, <span class="string">"未知异常！"</span>)</span><br><span class="line">        qyes = self.box.addButton(self.tr(<span class="string">"确定"</span>), QMessageBox.YesRole)</span><br><span class="line">        <span class="comment"># qno = self.box.addButton(self.tr("否"), QMessageBox.NoRole)</span></span><br><span class="line">        self.box.exec_()</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="通过按钮点击激活下拉框操作"><a href="#通过按钮点击激活下拉框操作" class="headerlink" title="通过按钮点击激活下拉框操作"></a>通过按钮点击激活下拉框操作</h2><p>方法：通过变量传值的方式，将item选中的内容先传递给一个临时变量或数组，当点击按钮时通过临时变量或数组执行相关操作。</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>PyQt5</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm本地恢复或查看历史代码</title>
    <url>/2020/07/23/PyCharm%E6%9C%AC%E5%9C%B0%E6%81%A2%E5%A4%8D%E6%88%96%E6%9F%A5%E7%9C%8B%E5%8E%86%E5%8F%B2%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<p>首先，打开PyCharm软件后选中项目文件；<br>点击pycharm的菜单中的 vcs ，选中菜单local history的选项<br><img src="https://img-blog.csdnimg.cn/20200618175201570.png" alt="在这里插入图片描述"><br>选择对应历史代码查看或者右键进行恢复。</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>Pycharm</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5 通过文本框等组件动态实现数据库查询</title>
    <url>/2020/07/23/PyQt5-%E9%80%9A%E8%BF%87%E6%96%87%E6%9C%AC%E6%A1%86%E7%AD%89%E7%BB%84%E4%BB%B6%E5%8A%A8%E6%80%81%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h1 id="PyQt5-通过文本框等组件动态实现数据库查询"><a href="#PyQt5-通过文本框等组件动态实现数据库查询" class="headerlink" title="PyQt5 通过文本框等组件动态实现数据库查询"></a>PyQt5 通过文本框等组件动态实现数据库查询</h1><h2 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h2><ul>
<li>Python 3.x </li>
<li>Pyqt5 </li>
<li>Qt designer </li>
<li>PyUIC</li>
<li>MySQL</li>
<li>pymysql</li>
</ul>
<hr>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>通过在界面文本框等组件输入相关信息，点击按钮通过pysql完成数据库语句拼接实现数据库动态查询相关操作，查询后可通过表格组件展示。</p>
<hr>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>1.在界面中设计好文本框、按钮等组件<br>2.利用pymysql实现查询及创建点击函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.button_test.clicked.connect(self.button_test_clicked)  <span class="comment"># 点击查询功能</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_test_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 打开数据库连接（IP地址/数据库用户名/登录密码/数据库模式名/编码方式/端口号）</span></span><br><span class="line">    database = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>,</span><br><span class="line">                               password=<span class="string">'123456'</span>, db=<span class="string">"angleStatemonitor"</span>, charset=<span class="string">'utf8'</span>, port=<span class="number">3306</span>)</span><br><span class="line">    cur = database.cursor()</span><br><span class="line">    <span class="comment"># 单日记录查询</span></span><br><span class="line">    <span class="keyword">if</span> self.lineEdit_find.text() == self.lineEdit_find.text() <span class="keyword">and</span> self.lineEdit_find.text() <span class="keyword">is</span> <span class="keyword">not</span> <span class="string">""</span>:</span><br><span class="line">        sql_select = <span class="string">"select * from OperationRecord where time like '"</span> + str(self.lineEdit_find.text()) + <span class="string">"'"</span></span><br><span class="line">        cur.execute(sql_select)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 提示信息</span></span><br><span class="line">         self.box = QMessageBox(QMessageBox.Warning, <span class="string">"提示信息"</span>, <span class="string">"查询失败！"</span>)</span><br><span class="line">         qyes = self.box.addButton(self.tr(<span class="string">"确定"</span>), QMessageBox.YesRole)</span><br><span class="line">         <span class="comment"># qno = self.box.addButton(self.tr("否"), QMessageBox.NoRole)</span></span><br><span class="line">         self.box.exec_()</span><br></pre></td></tr></table></figure>

<hr>
<p>其他python数据库语句请参考链接: <a href="https://blog.csdn.net/cjw12581/article/details/106735644" target="_blank" rel="noopener">MySQL数据库范围、模糊、时间范围（时间段）查询语句</a>.</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>PyQt5</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5安装及Qt designer ，PyUIC工具的配置</title>
    <url>/2020/07/23/PyQt5%E5%AE%89%E8%A3%85%E5%8F%8AQt-designer-%EF%BC%8CPyUIC%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h2 id="PyQt5安装"><a href="#PyQt5安装" class="headerlink" title="PyQt5安装"></a><strong><em>PyQt5安装</em></strong></h2><p>==PyQt5==主要是用在==Python GUI界面开发==,可以不用纯代码编写界面(偷懒方便或技术不行),这时可以利用PyQt5来完成Python图形界面的开发。下面我们来谈谈在PyCharm下的PyQt5安装过程（Windows环境下）：</p>
<h3 id="1-安装-sip"><a href="#1-安装-sip" class="headerlink" title="1.安装 sip"></a><strong><em>1.安装 sip</em></strong></h3><p>sip属于python依赖库（直接使用命令安装），是RiverBank（也就是PyQt的开发商）开发的用于PyQt的Python/C++混合编程解决方案。它包括一个sip工具、SDK以及Python Module。在windows的命令行窗口输入如下命令安装：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install sip</span><br></pre></td></tr></table></figure>

<h3 id="2-PyQt5"><a href="#2-PyQt5" class="headerlink" title="2.PyQt5"></a><strong><em>2.PyQt5</em></strong></h3><h4 id="2-1-安装-PyQt5"><a href="#2-1-安装-PyQt5" class="headerlink" title="2.1 安装 PyQt5"></a><strong><em>2.1 安装 PyQt5</em></strong></h4><p>PyQt5是python的一个插件库,通过这个库我们可以连接Qt和Python来进行GUI编程。<br>==注意==：安装的版本问题PyQt5只有针对==Python3.x==的安装包而没有针对python2的安装版本。在windows的命令行窗口输入如下命令安装：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Pip  install –user   d:\ PyQt5<span class="number">-5.10</span><span class="number">-5.10</span><span class="number">.0</span>-cp35.cp36.cp37-none-win_amd64.whl</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install PyQt5</span><br></pre></td></tr></table></figure>
<h4 id="2-2-安装-PyQt5-tools"><a href="#2-2-安装-PyQt5-tools" class="headerlink" title="2.2 安装 PyQt5-tools"></a><strong><em>2.2 安装 PyQt5-tools</em></strong></h4><p>在windows的命令行窗口输入如下命令安装：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install PyQt5-tools</span><br></pre></td></tr></table></figure>
<p>安装完成后，我们可以在Python或者 Anaconda安装目录下看到 相应的文件。</p>
<h3 id="3-PyCharm中的配置"><a href="#3-PyCharm中的配置" class="headerlink" title="3.PyCharm中的配置"></a><strong><em>3.PyCharm中的配置</em></strong></h3><p>==目的==：在PyCharm里面实现打开Qt designer，然后生成Qt文件，并通过PyUIC将qt文件转换成python语言的软件文件直接使用，实现代码分离。<br>配置过程如下图所示：<br>点击File—&gt;Tools—&gt;External Tools后，点击==绿色的+==，添加Tools 完成如下配置：<br><img src="https://img-blog.csdnimg.cn/20200223200530869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="配置"><br>进行Qt designer的配置：<br>|Name  |Qt designer  |<br>|–|–|<br>|Program  | 指向安装PyQt5-tools文件夹里面的designer.exe  |<br>|Work directory  | <code>$FileDir$</code>  |<br><img src="https://img-blog.csdnimg.cn/20200223195734350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="PyQt5配置"><br>然后新建“PyUIC”，配置如下图所示：<br>| Name |PyUIC  |<br>|–|–|<br>| Program | 指向文件里面的python.exe |<br>| Arguments | <code>-m PyQt5.uic.pyuic  $FileName$ -o $FileNameWithoutExtension$.py</code>（固定代码） |<br>| Work directory| <code>$FileDir$</code> |<br><img src="https://img-blog.csdnimg.cn/20200223200302621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="PyUIC配置"><br>配置完成如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200223201559960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="配置完成"></p>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a><strong><em>4.测试</em></strong></h3><p>通过Extrernal Tools打开Qt designer如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200223202716801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="界面"><br>在界面中绘制如下图形测试：<br><img src="https://img-blog.csdnimg.cn/20200223202826526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="绘制界面"><br>在左侧工程栏中会出现cjw.ui文件（前提是保存在当前工程下），之后鼠标右键点击选中Extrernal Tools中的PyUIC则会左侧工程栏自动生成一个cjw.py文件如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200223203732485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="测试代码"><br>测试的界面代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file 'cjw.ui'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.13.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow1</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        MainWindow.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">1179</span>, <span class="number">912</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">"centralwidget"</span>)</span><br><span class="line">        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)</span><br><span class="line">        self.textBrowser.setGeometry(QtCore.QRect(<span class="number">490</span>, <span class="number">170</span>, <span class="number">111</span>, <span class="number">51</span>))</span><br><span class="line">        self.textBrowser.setObjectName(<span class="string">"textBrowser"</span>)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(<span class="string">"statusbar"</span>)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"MainWindow"</span>))</span><br><span class="line">        self.textBrowser.setHtml(_translate(<span class="string">"MainWindow"</span>, <span class="string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\"&gt;\n"</span></span><br><span class="line"><span class="string">"&lt;html&gt;&lt;head&gt;&lt;meta name=\"qrichtext\" content=\"1\" /&gt;&lt;style type=\"text/css\"&gt;\n"</span></span><br><span class="line"><span class="string">"p, li &#123; white-space: pre-wrap; &#125;\n"</span></span><br><span class="line"><span class="string">"&lt;/style&gt;&lt;/head&gt;&lt;body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\"&gt;\n"</span></span><br><span class="line"><span class="string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"&gt;&lt;span style=\" font-size:26pt; font-weight:600; font-style:italic;\"&gt;PyQt5&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"</span>))</span><br></pre></td></tr></table></figure>

<p>新建一个测试运行代码文件如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试PyQt5运行 CJW</span></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cjw <span class="keyword">import</span> Ui_MainWindow1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    MainWindow = QMainWindow()</span><br><span class="line">    ui = Ui_MainWindow1()</span><br><span class="line">    ui.setupUi(MainWindow)</span><br><span class="line">    MainWindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p>配置好路径后点击运行上述文件，结果如下：<br><img src="https://img-blog.csdnimg.cn/20200223210107817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="测试结果"><br>Pyqt5安装成功！！！<br><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>PyQt5</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5界面设计问题</title>
    <url>/2020/07/23/PyQt5%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h2 id="PyQt5界面设计问题及解决办法"><a href="#PyQt5界面设计问题及解决办法" class="headerlink" title="PyQt5界面设计问题及解决办法"></a>PyQt5界面设计问题及解决办法</h2><p>最近在做有关界面的项目遇到一些问题，在这里把遇到的一些问题做一个总结</p>
<h3 id="1-窗体设计样式问题"><a href="#1-窗体设计样式问题" class="headerlink" title="1.窗体设计样式问题"></a>1.窗体设计样式问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.setStyleSheet(<span class="string">"#MainWindow&#123;background-color: white&#125;"</span>)</span><br><span class="line">self.setWindowTitle(<span class="string">'XXX软件v1.0'</span>)</span><br><span class="line">self.setWindowIcon(QIcon(<span class="string">'D:/系统v1.0/systemcode/images/icon1.png'</span>))  <span class="comment"># 设置窗体标题图标</span></span><br></pre></td></tr></table></figure>
<h3 id="2-文本显示问题"><a href="#2-文本显示问题" class="headerlink" title="2.文本显示问题"></a>2.文本显示问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.label_state.setText(<span class="string">"CJW"</span>)  <span class="comment"># 当前状态</span></span><br><span class="line">self.label_state.setStyleSheet(<span class="string">"font:15pt '楷体';color:red"</span>) <span class="comment"># 控件样式</span></span><br></pre></td></tr></table></figure>
<h3 id="3-控件传值问题"><a href="#3-控件传值问题" class="headerlink" title="3.控件传值问题"></a>3.控件传值问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">angle = self.doubleSpinBox.value()  <span class="comment"># 角度值传递</span></span><br><span class="line">self.labeljiaodu.setText(<span class="string">""</span> + str(angle))  <span class="comment"># 角度显示</span></span><br><span class="line">self.labeljiaodu.setText(<span class="string">""</span> + str((<span class="string">'%.3f'</span> %angle))) <span class="comment"># 保留3位有效数字</span></span><br></pre></td></tr></table></figure>
<h3 id="4-字体显示问题（在其它电脑打开会出现字样重叠）"><a href="#4-字体显示问题（在其它电脑打开会出现字样重叠）" class="headerlink" title="4.字体显示问题（在其它电脑打开会出现字样重叠）"></a>4.字体显示问题（在其它电脑打开会出现字样重叠）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)  <span class="comment"># Qt从5.6.0开始，支持High-DPI（插入这句code，必须放在创建QApplication项目之前）</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    md = MainCode()</span><br><span class="line">    md.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<h3 id="5-提示框问题"><a href="#5-提示框问题" class="headerlink" title="5.提示框问题"></a>5.提示框问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">QMessageBox.information(self,</span><br><span class="line">                                                <span class="string">"XXXX提示框"</span>,</span><br><span class="line">                                                <span class="string">"当前XXXX异常！！！"</span>, QMessageBox.Yes | QMessageBox.No)</span><br><span class="line"><span class="keyword">if</span> QMessageBox.Yes:</span><br><span class="line">    ..........</span><br></pre></td></tr></table></figure>
<h3 id="6-按钮图标问题"><a href="#6-按钮图标问题" class="headerlink" title="6.按钮图标问题"></a>6.按钮图标问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.button_begin.setIcon(QIcon(<span class="string">"D:/软件v1.0/systemcode/images/512.png"</span>))  <span class="comment"># 设置图标</span></span><br><span class="line">self.button_begin.setStyleSheet(<span class="string">"QPushButton&#123;color:black&#125;"</span></span><br><span class="line">                               <span class="string">"QPushButton:hover&#123;color:red&#125;"</span></span><br><span class="line">                               <span class="string">"QPushButton&#123;background-color:lightgreen&#125;"</span></span><br><span class="line">                               <span class="string">"QPushButton&#123;border:2px&#125;"</span></span><br><span class="line">                               <span class="string">"QPushButton&#123;border-radius:10px&#125;"</span></span><br><span class="line">                               <span class="string">"QPushButton&#123;padding:2px 4px&#125;"</span>)  <span class="comment"># 设置按钮样式</span></span><br></pre></td></tr></table></figure>
<h3 id="7-语音提示问题"><a href="#7-语音提示问题" class="headerlink" title="7.语音提示问题"></a>7.语音提示问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> win32com.client</span><br><span class="line">speak = win32com.client.Dispatch(<span class="string">'SAPI.SPVOICE'</span>)</span><br><span class="line">speak.Speak(<span class="string">'CJW'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="8-蜂鸣器设置问题"><a href="#8-蜂鸣器设置问题" class="headerlink" title="8.蜂鸣器设置问题"></a>8.蜂鸣器设置问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> winsound</span><br><span class="line">duration = <span class="number">150</span>  <span class="comment"># 持续时间</span></span><br><span class="line">freq = <span class="number">1000</span>  <span class="comment"># Hz</span></span><br><span class="line">winsound.Beep(freq, duration)</span><br></pre></td></tr></table></figure>
<h3 id="9-doubleSpinBox等控件禁止编辑"><a href="#9-doubleSpinBox等控件禁止编辑" class="headerlink" title="9.doubleSpinBox等控件禁止编辑"></a>9.doubleSpinBox等控件禁止编辑</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.doubleSpinBox.setFocusPolicy(QtCore.Qt.NoFocus)</span><br><span class="line">self.doubleSpinBox_2.setFocusPolicy(QtCore.Qt.NoFocus)</span><br><span class="line">self.doubleSpinBox.setSingleStep(<span class="number">0.0</span>)</span><br><span class="line">self.doubleSpinBox_2.setSingleStep(<span class="number">0.0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="10-窗口居中问题"><a href="#10-窗口居中问题" class="headerlink" title="10.窗口居中问题"></a>10.窗口居中问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 窗口居中</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QDesktopWidget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CJW</span><span class="params">(QtWidgets.QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        QtWidgets.QWidget.__init__(self, parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">'窗口居中实例'</span>)</span><br><span class="line">        <span class="comment"># 设置窗口的尺寸</span></span><br><span class="line">        self.resize(<span class="number">250</span>, <span class="number">250</span>)</span><br><span class="line">        self.center()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口居中函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算出显示器的分辨率(screen.width() * screen.height())</span></span><br><span class="line">        screen = QDesktopWidget().screenGeometry()</span><br><span class="line">        <span class="comment"># 获取QWidget窗口的大小(size.width()* size.heiget())</span></span><br><span class="line">        size = self.geometry()</span><br><span class="line">        <span class="comment"># 窗口移动到屏幕的中间位置</span></span><br><span class="line">        self.move((screen.width() - size.width()) / <span class="number">2</span>,</span><br><span class="line">                  (screen.height() - size.height()) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    md = CJW()</span><br><span class="line">    md.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<h3 id="11-禁止窗口最大化和禁止窗口拉伸"><a href="#11-禁止窗口最大化和禁止窗口拉伸" class="headerlink" title="11.禁止窗口最大化和禁止窗口拉伸"></a>11.禁止窗口最大化和禁止窗口拉伸</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainCode</span><span class="params">(QMainWindow, MainUi.Ui_MainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        QMainWindow.__init__(self)</span><br><span class="line">        MainUi.Ui_MainWindow.__init__(self)</span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.setFixedSize(self.width(), self.height())</span><br><span class="line">        self.resize(<span class="number">1138</span>, <span class="number">678</span>)</span><br><span class="line">        ..........................</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、方法setWindowFlags,选择哪些按钮生效，每个窗体应该都有</span></span><br><span class="line"><span class="comment"># 2、通过 | 来同时显现多个按钮</span></span><br><span class="line">Form.setWindowFlags(QtCore.Qt.WindowCloseButtonHint|QtCore.Qt.WindowMinimizeButtonHint)</span><br></pre></td></tr></table></figure>

<p>未完待续…….</p>
]]></content>
      <categories>
        <category>PyQt5</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5开发第二界面或弹出界面（子窗口）</title>
    <url>/2020/07/23/PyQt5%E5%BC%80%E5%8F%91%E7%AC%AC%E4%BA%8C%E7%95%8C%E9%9D%A2%E6%88%96%E5%BC%B9%E5%87%BA%E7%95%8C%E9%9D%A2%EF%BC%88%E5%AD%90%E7%AA%97%E5%8F%A3%EF%BC%89/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h1 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h1><ul>
<li>Python 3.x </li>
<li>pyqt5 </li>
<li>Qt designer </li>
<li>PyUIC</li>
<li>各种轮子</li>
</ul>
<hr>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><p>通过==点击父窗口（主界面）的按钮打开子窗口（二界面）==，为防止操作失误或程序自身问题造成的闪退，最好自己开发时加上异常处理机制。</p>
<hr>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><ol>
<li>首先设计二界面（子窗口）后生成.py文件，将设计好的二界面（子窗口）引入主界面当中<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二界面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondCode</span><span class="params">(QMainWindow, SecondUi.Ui_MainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        QMainWindow.__init__(self)</span><br><span class="line">        SecondUi.Ui_MainWindow.__init__(self)</span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.setWindowTitle(<span class="string">'二界面'</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">'icon.png'</span>))  <span class="comment"># 设置窗体标题图标</span></span><br><span class="line">        ...</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></li>
<li>通过主界面按钮打开二界面（当然前提必须先在主界面中设计好这个触发按钮）：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.button_opensecond.clicked.connect(button_opensecond_clicked)  <span class="comment"># 打开二界面按钮方法连接</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # 打开 second 界面</span></span><br><span class="line">    windowList = []  <span class="comment"># 窗口扩展数组</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">button_opensecond_clicked</span><span class="params">(self)</span>：</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line">        the_window = SecondCode()</span><br><span class="line">        self.windowList.append(the_window)  <span class="comment"># 不可删</span></span><br><span class="line">        the_window.show()</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># 二界面的属性和方法</span></span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
<p><strong>优点</strong>：可以在这个基础上扩展出多个弹出界面</p>
<p>3.点击按钮就可以从父窗口打开子窗口</p>
<hr>
<h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>点击主界面按钮后，二界面弹出，主界面此时依然在。</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>PyQt5</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5窗口退出X函数事件个性化设置</title>
    <url>/2020/07/23/PyQt5%E7%AA%97%E5%8F%A3%E9%80%80%E5%87%BAX%E5%87%BD%E6%95%B0%E4%BA%8B%E4%BB%B6%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h1 id="窗口退出X函数事件个性化"><a href="#窗口退出X函数事件个性化" class="headerlink" title="窗口退出X函数事件个性化"></a>窗口退出X函数事件个性化</h1><h2 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h2><ul>
<li>Python 3.x </li>
<li>Pyqt5 </li>
<li>Qt designer </li>
<li>PyUIC</li>
</ul>
<hr>
<h2 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h2><p>通过<strong>重写Qwidget类中的closeEvent方法</strong>，实现功能效果<br><img src="https://img-blog.csdnimg.cn/20200605180742854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><ol>
<li>首先设计好界面</li>
<li>重写方法closeEvent<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # 退出系统窗口 X 绑定函数事件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closeEvent</span><span class="params">(self, e)</span>:</span></span><br><span class="line">        self.box = QMessageBox(QMessageBox.Warning, <span class="string">"系统提示信息"</span>, <span class="string">"是否退出系统？"</span>)</span><br><span class="line">        qyes = self.box.addButton(self.tr(<span class="string">"是"</span>), QMessageBox.YesRole)</span><br><span class="line">        qno = self.box.addButton(self.tr(<span class="string">"否"</span>), QMessageBox.NoRole)</span><br><span class="line">        self.box.exec_()</span><br><span class="line">        <span class="keyword">if</span> self.box.clickedButton() == qyes:</span><br><span class="line">            e.accept()</span><br><span class="line">            QtWidgets.QWidget.closeEvent(self, e)</span><br><span class="line">            sys.exit().accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            e.ignore()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>点击窗口X后弹出提示信息，通过点击按钮选择退出与否<br><img src="https://img-blog.csdnimg.cn/20200605181139620.png" alt="在这里插入图片描述"><br>除此之外也可以在窗口中设置退出按钮来退出窗口，具体可参考链接: <a href="https://blog.csdn.net/cjw12581/article/details/106576051" target="_blank" rel="noopener">PyQt5通过绑定按钮事件实现点击后退出（含提示框）</a>.</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>PyQt5</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5通过绑定按钮事件实现点击后退出（含提示框）</title>
    <url>/2020/07/23/PyQt5%E9%80%9A%E8%BF%87%E7%BB%91%E5%AE%9A%E6%8C%89%E9%92%AE%E4%BA%8B%E4%BB%B6%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E5%90%8E%E9%80%80%E5%87%BA%EF%BC%88%E5%90%AB%E6%8F%90%E7%A4%BA%E6%A1%86%EF%BC%89/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h1 id="绑定按钮点击实现退出事件（含提示框）"><a href="#绑定按钮点击实现退出事件（含提示框）" class="headerlink" title="绑定按钮点击实现退出事件（含提示框）"></a>绑定按钮点击实现退出事件<code>（含提示框）</code></h1><h2 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h2><ul>
<li>Python 3.x </li>
<li>Pyqt5 </li>
<li>Qt designer </li>
<li>PyUIC</li>
</ul>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><ol>
<li><p>首先设计好界面及按钮</p>
</li>
<li><p>新建一个按钮点击函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_close_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    self.box = QMessageBox(QMessageBox.Warning, <span class="string">"系统提示信息"</span>, <span class="string">"是否退出系统？"</span>)</span><br><span class="line">    qyes = self.box.addButton(self.tr(<span class="string">"是"</span>), QMessageBox.YesRole)</span><br><span class="line">    qno = self.box.addButton(self.tr(<span class="string">"否"</span>), QMessageBox.NoRole)</span><br><span class="line">    self.box.exec_()</span><br><span class="line">    <span class="keyword">if</span> self.box.clickedButton() == qyes:</span><br><span class="line">        sys.exit().accept()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure></li>
<li><p>为界面按钮绑定按钮点击事件：</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.button_close.clicked.connect(self.button_close_clicked)  <span class="comment"># 退出系统按钮</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>通过点击界面按钮弹出提示框，然后通过点击提示框按钮选择退出与否<br><img src="https://img-blog.csdnimg.cn/202006051821418.png" alt="在这里插入图片描述"><br>此外，通过点击窗口 X 退出可参考链接: <a href="https://blog.csdn.net/cjw12581/article/details/106575868" target="_blank" rel="noopener">PyQt5窗口退出X函数事件个性化设置</a>.</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>PyQt5</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Python可运行文件加密方法</title>
    <url>/2020/07/23/Python%E5%8F%AF%E8%BF%90%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>

<h2 id="软件加密"><a href="#软件加密" class="headerlink" title="软件加密"></a><strong><em>软件加密</em></strong></h2><p>==软件：==<br>1.EXE ResPacker<br> 2.做好的可运行文件或安装包<br>加密方法：<br><strong>【步骤】</strong><br>1、指定要打包的软件源目录；<br>1、指定EXE主程序；<br>2、指定加密后文件输出目录。<br>3、设置加密密钥；<br>4、开始打包;<br>==备注==：不一定能保证软件绝对安全！！！<br>打包生成一个可以独立运行的exe文件，您可以将此打包后的文件分发给用户。界面如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200221203824738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="软件界面"><br>用户打开您打包的文件时会弹出一个认证框，要求用户输入开启密码才可以打开如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200221204019934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="认证框"><br>，此认证框中显示有用户的机器码，用户将他的机器码发给你，你根据用户机器码为他创建开启密码，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200221203711506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="创建密码"><br>【创建开启密码】<br>1、指定加密时使用的加密密钥;<br>2、指定用户的机器码;<br>3、创建开启密码；<br>开启密码发给用户，用户只能在自己的电脑上运行你的软件。比如：<br><img src="https://img-blog.csdnimg.cn/2020022120425370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="开始安装"><br><strong><em>END</em></strong></p>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>文件加密</tag>
      </tags>
  </entry>
  <entry>
    <title>Python可运行文件安装包制作</title>
    <url>/2020/07/23/Python%E5%8F%AF%E8%BF%90%E8%A1%8C%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8C%85%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h2 id="安装包制作"><a href="#安装包制作" class="headerlink" title="安装包制作"></a>安装包制作</h2><h3 id="1-制作前准备"><a href="#1-制作前准备" class="headerlink" title="1.制作前准备"></a>1.制作前准备</h3><p>a.软件：Advanced Installer<br>b.已经做好的可执行文件（.EXE）<br>c.其他程序扩展文件</p>
<h3 id="2-开始制作安装包"><a href="#2-开始制作安装包" class="headerlink" title="2.开始制作安装包"></a>2.开始制作安装包</h3><p>打开软件按如下步骤进行：<br>新建工程<br><img src="https://img-blog.csdnimg.cn/20200220120104369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="新建工程"><br><img src="https://img-blog.csdnimg.cn/2020022012033966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120404616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120430138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120447640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120504449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120523244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020022012055496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装界面样式有很多种：<br><img src="https://img-blog.csdnimg.cn/20200220120622672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="安装界面样式"><br><img src="https://img-blog.csdnimg.cn/20200220120640301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120654828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120729198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120748219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120801752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120824839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120847425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200220120859458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装成功：<br><img src="https://img-blog.csdnimg.cn/20200220120921737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在制作安装包其他可能需要的步骤是：<br><img src="https://img-blog.csdnimg.cn/202002201910258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="查看安装细节"><br><img src="https://img-blog.csdnimg.cn/2020022019111584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="设置序列码"><br><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>可运行文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Python类库和模块的安装</title>
    <url>/2020/07/23/Python%E7%B1%BB%E5%BA%93%E5%92%8C%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<p>在Python中除了Python自带的的类库以外，其他类库均需我们自己下载安装。<br>在利用PyCharm进行编程时，系统会提示对没有下载的包的安装。此外，我们还可以利用pip命令完成所需包的安装。</p>
<hr>
<h3 id="pip命令"><a href="#pip命令" class="headerlink" title="pip命令"></a><strong><em>pip命令</em></strong></h3><p>pip是Python自带的包管理工具，全称是python install pakeage，在使用Python开发的过程中,除了它自带的类库。几乎所有的第三方类库，均可以通过pip来安装，而且它可以随时地更新Python的类库。<br>| 命令 | 说明 |<br>|–|–|<br>|<code>pip install xxx</code>  |windows下安装某某第三方类库  |<br>|<code>pip3 install xxx</code>  |windows下安装某某第三方类库  |<br>|<code>brew install xxx</code>  |Mac下安装某个程序或者文件  |<br>==备注==：<br>pip3是python3.0之后出来的pip进阶版本，如果电脑安装python3.x的时候,就可以使用pip3命令,同时也可以使用pip命令。此外pip3命令安装的库默认出现在python3.x版本的文件夹中。<br>Homebrew是Mac系统上的包管理工具，只要是能在Mac上安装的东西，都可以通过Homebrew来安装和管理，并且可以及时的对其进行更新。（不常用）<br>在windows的命令行窗口输入对应的命令安装相应的第三方类库：<br>如安装sklearn库（用来进行ML的库）<br>首先打开命令行窗口：<br><img src="https://img-blog.csdnimg.cn/20200224220716797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="cmd"><br>在命令行输入pip install sklearn后回车即可，如下图所示：<br><img src="https://img-blog.csdnimg.cn/2020022422084716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="安装过程"><br>sklearn类库安装成功！！！</p>
<hr>
<h3 id="模块和第三方类库"><a href="#模块和第三方类库" class="headerlink" title="模块和第三方类库"></a>模块和第三方类库</h3><p><strong>模块</strong>是一个包含所有你定义的函数和变量的文件，其后缀名是.py<br>#导入模块import support<br>#现在可以调用模块里包含的函数了support.print_func(“Runoob”)<br>标准模块如：math，random</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Python多.py文件打包为可运行.exe文件</title>
    <url>/2020/07/23/Python%E5%A4%9A-py%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85%E4%B8%BA%E5%8F%AF%E8%BF%90%E8%A1%8C-exe%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h2 id="多文件Python项目打包成-exe运行文件"><a href="#多文件Python项目打包成-exe运行文件" class="headerlink" title="多文件Python项目打包成.exe运行文件"></a><strong><em>多文件Python项目打包成.exe运行文件</em></strong></h2><p>工具：Pycharm2019.2.2 + Anaconda3(导入需要的库及Python.exe以及==pyinstaller==)</p>
<h3 id="1-pyinstaller的安装"><a href="#1-pyinstaller的安装" class="headerlink" title="1.pyinstaller的安装"></a><strong><em>1.pyinstaller的安装</em></strong></h3><p>在PyCharm中点击工具菜单栏File后点击Settings后按如下图所示步骤进行：<br><img src="https://img-blog.csdnimg.cn/20200506183832308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200218134954590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="安装模块"><br>开始下载….<br><img src="https://img-blog.csdnimg.cn/20200218135357499.png" alt="下载模块"><br>下载成功（右下角会弹出提示框！）-*-<br><img src="https://img-blog.csdnimg.cn/20200218135502107.png" alt="下载成功"><br>成功后开始进入正题：打包.exe运行文件</p>
<h3 id="2-打包可运行文件"><a href="#2-打包可运行文件" class="headerlink" title="2.打包可运行文件"></a><strong><em>2.打包可运行文件</em></strong></h3><h4 id="2-1准备图标"><a href="#2-1准备图标" class="headerlink" title="2.1准备图标"></a><strong><em>2.1准备图标</em></strong></h4><p>a.图标下载网站链接: <a href="http://www.icontuku.com/" target="_blank" rel="noopener">图标下载网站</a>,也可以自己准备或设计好的图片，<br>b.然后通过图标转换网站链接： <a href="http://www.bitbug.net/" target="_blank" rel="noopener">图标转换网站</a>转换为合适可用的图标。<br>==备注==：所有图片路径必须改为绝对路径（否则无法显示）如：<br>self.setWindowIcon(QIcon(‘D:/工程名/systemcode/images/icon1.png’))  # 设置窗体标题图标</p>
<h4 id="2-2程序打包"><a href="#2-2程序打包" class="headerlink" title="2.2程序打包"></a><strong><em>2.2程序打包</em></strong></h4><p>1.在控制台中选择==Terminal==<br>输入形如以下形式内容（格式如：pyinstaller -F D:\工程名\systemcode\main.py）：<br><img src="https://img-blog.csdnimg.cn/20200506184013643.png" alt="生成文件1"></p>
<p>运行过程如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(base) D:\工程名&gt;pyinstaller -F D:\工程名\systemcode\main.py</span><br><span class="line"><span class="number">224</span> INFO: PyInstaller: <span class="number">3.6</span></span><br><span class="line"><span class="number">225</span> INFO: Python: <span class="number">3.7</span><span class="number">.3</span> (conda)</span><br><span class="line"><span class="number">227</span> INFO: Platform: Windows<span class="number">-10</span><span class="number">-10.0</span><span class="number">.18362</span>-SP0</span><br><span class="line"><span class="number">229</span> INFO: wrote D:\工程名\main.spec</span><br><span class="line"><span class="number">237</span> INFO: UPX <span class="keyword">is</span> <span class="keyword">not</span> available.</span><br><span class="line"><span class="number">248</span> INFO: Extending PYTHONPATH <span class="keyword">with</span> paths</span><br><span class="line">[<span class="string">'D:\\工程名'</span>, <span class="string">'D:\\工程名'</span>]</span><br><span class="line"><span class="number">248</span> INFO: checking Analysis</span><br><span class="line"><span class="number">249</span> INFO: Building Analysis because Analysis<span class="number">-00.</span>toc <span class="keyword">is</span> non existent</span><br><span class="line"><span class="number">249</span> INFO: Initializing module dependency graph...</span><br><span class="line"><span class="number">270</span> INFO: Caching module graph hooks...</span><br><span class="line"><span class="number">288</span> INFO: Analyzing base_library.zip ...</span><br><span class="line"><span class="number">16899</span> INFO: Caching module dependency graph...</span><br><span class="line"><span class="number">17181</span> INFO: running Analysis Analysis<span class="number">-00.</span>toc</span><br><span class="line"><span class="number">17244</span> INFO: Adding Microsoft.Windows.Common-Controls to dependent assemblies of final executable</span><br><span class="line">  required by D:\Anaconda3\python.exe</span><br><span class="line"><span class="number">20606</span> INFO: Analyzing D:\工程名\systemcode\main.py</span><br><span class="line"><span class="number">22940</span> INFO: Processing pre-find module path hook   distutils</span><br><span class="line"><span class="number">22975</span> INFO: distutils: retargeting to non-venv dir <span class="string">'D:\\Anaconda3\\lib'</span></span><br><span class="line"><span class="number">24081</span> INFO: Processing module hooks...</span><br><span class="line"><span class="number">24082</span> INFO: Loading module hook <span class="string">"hook-cv2.py"</span>...</span><br><span class="line"><span class="number">39939</span> INFO: Processing pre-safe <span class="keyword">import</span> module hook   setuptools.extern.six.moves</span><br><span class="line"><span class="number">42892</span> INFO: Processing pre-find module path hook   site</span><br><span class="line"><span class="number">42900</span> INFO: site: retargeting to fake-dir <span class="string">'D:\\Anaconda3\\lib\\site-packages\\PyInstaller\\fake-modules'</span></span><br><span class="line"><span class="number">66116</span> INFO: Loading module hook <span class="string">"hook-distutils.py"</span>...</span><br><span class="line"><span class="number">66148</span> INFO: Loading module hook <span class="string">"hook-encodings.py"</span>...</span><br><span class="line"><span class="number">67143</span> INFO: Loading module hook <span class="string">"hook-importlib_metadata.py"</span>...</span><br><span class="line"><span class="number">67149</span> INFO: Loading module hook <span class="string">"hook-lib2to3.py"</span>...</span><br><span class="line"><span class="number">67160</span> INFO: Loading module hook <span class="string">"hook-numpy.core.py"</span>...</span><br><span class="line"><span class="number">68459</span> INFO: MKL libraries found when importing numpy. Adding MKL to binaries</span><br><span class="line"><span class="number">68482</span> INFO: Loading module hook <span class="string">"hook-numpy.py"</span>...</span><br><span class="line"><span class="number">68486</span> INFO: Loading module hook <span class="string">"hook-pkg_resources.py"</span>...</span><br><span class="line"><span class="number">71269</span> INFO: Processing pre-safe <span class="keyword">import</span> module hook   win32com</span><br><span class="line"><span class="number">72539</span> INFO: Excluding <span class="keyword">import</span> <span class="string">'__main__'</span></span><br><span class="line"><span class="number">72541</span> INFO:   Removing <span class="keyword">import</span> of __main__ <span class="keyword">from</span> module pkg_resources</span><br><span class="line"><span class="number">72541</span> INFO: Loading module hook <span class="string">"hook-pycparser.py"</span>...</span><br><span class="line"><span class="number">72543</span> INFO: Loading module hook <span class="string">"hook-pydoc.py"</span>...</span><br><span class="line"><span class="number">72545</span> INFO: Loading module hook <span class="string">"hook-PyQt5.py"</span>...</span><br><span class="line"><span class="number">73014</span> INFO: Loading module hook <span class="string">"hook-PyQt5.QtCore.py"</span>...</span><br><span class="line"><span class="number">73283</span> INFO: Loading module hook <span class="string">"hook-PyQt5.QtGui.py"</span>...</span><br><span class="line"><span class="number">73747</span> INFO: Loading module hook <span class="string">"hook-PyQt5.QtWidgets.py"</span>...</span><br><span class="line"><span class="number">74148</span> INFO: Loading module hook <span class="string">"hook-pytest.py"</span>...</span><br><span class="line"><span class="number">80434</span> INFO: Loading module hook <span class="string">"hook-pythoncom.py"</span>...</span><br><span class="line"><span class="number">82638</span> INFO: Loading module hook <span class="string">"hook-pywintypes.py"</span>...</span><br><span class="line"><span class="number">84663</span> INFO: Loading module hook <span class="string">"hook-scipy.py"</span>...</span><br><span class="line"><span class="number">84701</span> INFO: Loading module hook <span class="string">"hook-setuptools.py"</span>...</span><br><span class="line"><span class="number">88301</span> INFO: Loading module hook <span class="string">"hook-sysconfig.py"</span>...</span><br><span class="line"><span class="number">88359</span> INFO: Loading module hook <span class="string">"hook-win32com.py"</span>...</span><br><span class="line"><span class="number">90940</span> INFO: Loading module hook <span class="string">"hook-xml.dom.domreg.py"</span>...</span><br><span class="line"><span class="number">90942</span> INFO: Loading module hook <span class="string">"hook-xml.etree.cElementTree.py"</span>...</span><br><span class="line"><span class="number">90944</span> INFO: Loading module hook <span class="string">"hook-xml.py"</span>...</span><br><span class="line"><span class="number">91005</span> INFO: Looking <span class="keyword">for</span> ctypes DLLs</span><br><span class="line"><span class="number">91213</span> INFO: Analyzing run-time hooks ...</span><br><span class="line"><span class="number">91222</span> INFO: Including run-time hook <span class="string">'pyi_rth_pyqt5.py'</span></span><br><span class="line"><span class="number">91243</span> INFO: Including run-time hook <span class="string">'pyi_rth_multiprocessing.py'</span></span><br><span class="line"><span class="number">91260</span> INFO: Including run-time hook <span class="string">'pyi_rth_pkgres.py'</span></span><br><span class="line"><span class="number">91282</span> INFO: Including run-time hook <span class="string">'pyi_rth_win32comgenpy.py'</span></span><br><span class="line"><span class="number">91336</span> INFO: Looking <span class="keyword">for</span> dynamic libraries</span><br><span class="line"><span class="number">91478</span> WARNING: lib <span class="keyword">not</span> found: msmpi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_msmpi_ilp64.dll</span><br><span class="line"><span class="number">91541</span> WARNING: lib <span class="keyword">not</span> found: mpich2mpi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_mpich2_lp64.dll</span><br><span class="line"><span class="number">92243</span> WARNING: lib <span class="keyword">not</span> found: mpich2mpi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_mpich2_ilp64.dll</span><br><span class="line"><span class="number">93386</span> WARNING: lib <span class="keyword">not</span> found: impi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_intelmpi_lp64.dll</span><br><span class="line"><span class="number">94157</span> WARNING: lib <span class="keyword">not</span> found: pgf90rtl.dll dependency of D:\Anaconda3\Library\bin\mkl_pgi_thread.dll</span><br><span class="line"><span class="number">94167</span> WARNING: lib <span class="keyword">not</span> found: pgc14.dll dependency of D:\Anaconda3\Library\bin\mkl_pgi_thread.dll</span><br><span class="line"><span class="number">94177</span> WARNING: lib <span class="keyword">not</span> found: pgf90.dll dependency of D:\Anaconda3\Library\bin\mkl_pgi_thread.dll</span><br><span class="line"><span class="number">96204</span> WARNING: lib <span class="keyword">not</span> found: impi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_intelmpi_ilp64.dll</span><br><span class="line"><span class="number">97152</span> WARNING: lib <span class="keyword">not</span> found: msmpi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_msmpi_lp64.dll</span><br><span class="line"><span class="number">101534</span> WARNING: lib <span class="keyword">not</span> found: api-ms-win-downlevel-shlwapi-l1<span class="number">-1</span><span class="number">-0.</span>dll dependency of D:\Anaconda3\Library\bin\opencv_videoio342.dll</span><br><span class="line"><span class="number">102988</span> INFO: Looking <span class="keyword">for</span> eggs</span><br><span class="line"><span class="number">102988</span> INFO: Using Python library D:\Anaconda3\python37.dll</span><br><span class="line"><span class="number">102989</span> INFO: Found binding redirects:</span><br><span class="line">[]</span><br><span class="line"><span class="number">103009</span> INFO: Warnings written to D:\工程名\build\main\warn-main.txt</span><br><span class="line"><span class="number">103213</span> INFO: Graph cross-reference written to D:\工程名\build\main\xref-main.html</span><br><span class="line"><span class="number">103297</span> INFO: checking PYZ</span><br><span class="line"><span class="number">103298</span> INFO: Building PYZ because PYZ<span class="number">-00.</span>toc <span class="keyword">is</span> non existent</span><br><span class="line"><span class="number">103298</span> INFO: Building PYZ (ZlibArchive) D:\工程名\build\main\PYZ<span class="number">-00.</span>pyz</span><br><span class="line"><span class="number">105361</span> INFO: Building PYZ (ZlibArchive) D:\工程名\build\main\PYZ<span class="number">-00.</span>pyz completed successfully.</span><br><span class="line"><span class="number">105453</span> INFO: checking PKG</span><br><span class="line"><span class="number">105453</span> INFO: Building PKG because PKG<span class="number">-00.</span>toc <span class="keyword">is</span> non existent</span><br><span class="line"><span class="number">105454</span> INFO: Building PKG (CArchive) PKG<span class="number">-00.</span>pkg</span><br><span class="line"><span class="number">285478</span> INFO: Building PKG (CArchive) PKG<span class="number">-00.</span>pkg completed successfully.</span><br><span class="line"><span class="number">285516</span> INFO: Bootloader D:\Anaconda3\lib\site-packages\PyInstaller\bootloader\Windows<span class="number">-64</span>bit\run.exe</span><br><span class="line"><span class="number">285518</span> INFO: checking EXE</span><br><span class="line"><span class="number">285534</span> INFO: Building EXE because EXE<span class="number">-00.</span>toc <span class="keyword">is</span> non existent</span><br><span class="line"><span class="number">285535</span> INFO: Building EXE <span class="keyword">from</span> EXE<span class="number">-00.</span>toc</span><br><span class="line"><span class="number">285548</span> INFO: Appending archive to EXE D:\工程名\dist\main.exe</span><br><span class="line"><span class="number">286886</span> INFO: Building EXE <span class="keyword">from</span> EXE<span class="number">-00.</span>toc completed successfully.</span><br></pre></td></tr></table></figure>
<p>==注意==在运行过程中有很多==WARNNING：==<br>我们需要把这些都找出来放到一个新文件夹中如下所示：<br><img src="https://img-blog.csdnimg.cn/20200218194016389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="程序扩展"><br>2.修改生成的main.spec文件，在其中修改位置做出修改如：<br>hiddenimports=[‘MainUi.py’, ‘SecondUi’, ‘c57.py’],<br>console=False , icon=’D:\工程名\systemcode\logo.ico’<br>如下图所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- mode: python ; coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">block_cipher = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Analysis([<span class="string">'D:\\工程名\\systemcode\\main.py'</span>],</span><br><span class="line">             pathex=[<span class="string">'D:\\工程名'</span>],</span><br><span class="line">             binaries=[],</span><br><span class="line">             datas=[],</span><br><span class="line">             hiddenimports=[<span class="string">'MainUi.py'</span>, <span class="string">'SecondUi'</span>, <span class="string">'c57.py'</span>], <span class="comment">#修改位置：添加其他.py文件</span></span><br><span class="line">             hookspath=[],</span><br><span class="line">             runtime_hooks=[],</span><br><span class="line">             excludes=[],</span><br><span class="line">             win_no_prefer_redirects=<span class="literal">False</span>,</span><br><span class="line">             win_private_assemblies=<span class="literal">False</span>,</span><br><span class="line">             cipher=block_cipher,</span><br><span class="line">             noarchive=<span class="literal">False</span>)</span><br><span class="line">pyz = PYZ(a.pure, a.zipped_data,</span><br><span class="line">             cipher=block_cipher)</span><br><span class="line">exe = EXE(pyz,</span><br><span class="line">          a.scripts,</span><br><span class="line">          a.binaries,</span><br><span class="line">          a.zipfiles,</span><br><span class="line">          a.datas,</span><br><span class="line">          [],</span><br><span class="line">          name=<span class="string">'main'</span>,</span><br><span class="line">          debug=<span class="literal">False</span>,</span><br><span class="line">          bootloader_ignore_signals=<span class="literal">False</span>,</span><br><span class="line">          strip=<span class="literal">False</span>,</span><br><span class="line">          upx=<span class="literal">True</span>,</span><br><span class="line">          upx_exclude=[],</span><br><span class="line">          runtime_tmpdir=<span class="literal">None</span>,</span><br><span class="line">          console=<span class="literal">False</span> , icon=<span class="string">'D:\\工程名\\systemcode\\logo.ico'</span> ) <span class="comment">#修改位置：添加图标位置</span></span><br></pre></td></tr></table></figure>
<p>当我们修改完main.spec之后，对文件进行打包了，在命令框中输入如下命令<br>（形如：pyinstaller -F -w -i  D:\工程名\systemcode\logo.ico main.spec）：<br><img src="https://img-blog.csdnimg.cn/20200218145136229.png" alt="打包"><br>点击运行过程如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(base) D:\工程名&gt;pyinstaller -F -w -i  D:\project\systemcode\logo.ico main.spec</span><br><span class="line"><span class="number">231</span> INFO: PyInstaller: <span class="number">3.6</span></span><br><span class="line"><span class="number">232</span> INFO: Python: <span class="number">3.7</span><span class="number">.3</span> (conda)</span><br><span class="line"><span class="number">233</span> INFO: Platform: Windows<span class="number">-10</span><span class="number">-10.0</span><span class="number">.18362</span>-SP0</span><br><span class="line"><span class="number">240</span> INFO: UPX <span class="keyword">is</span> <span class="keyword">not</span> available.</span><br><span class="line"><span class="number">243</span> INFO: Extending PYTHONPATH <span class="keyword">with</span> paths</span><br><span class="line">[<span class="string">'D:\\工程名'</span>, <span class="string">'D:\\工程名'</span>]</span><br><span class="line"><span class="number">243</span> INFO: checking Analysis</span><br><span class="line"><span class="number">256</span> INFO: Building because hiddenimports changed</span><br><span class="line"><span class="number">256</span> INFO: Initializing module dependency graph...</span><br><span class="line"><span class="number">276</span> INFO: Caching module graph hooks...</span><br><span class="line"><span class="number">286</span> INFO: Analyzing base_library.zip ...</span><br><span class="line"><span class="number">13046</span> INFO: Caching module dependency graph...</span><br><span class="line"><span class="number">13322</span> INFO: running Analysis Analysis<span class="number">-00.</span>toc</span><br><span class="line"><span class="number">13353</span> INFO: Adding Microsoft.Windows.Common-Controls to dependent assemblies of final executable</span><br><span class="line">  required by D:\Anaconda3\python.exe</span><br><span class="line"><span class="number">14102</span> INFO: Analyzing D:\工程名\systemcode\main.py</span><br><span class="line"><span class="number">15118</span> INFO: Processing pre-find module path hook   distutils</span><br><span class="line"><span class="number">15120</span> INFO: distutils: retargeting to non-venv dir <span class="string">'D:\\Anaconda3\\lib'</span></span><br><span class="line"><span class="number">15864</span> INFO: Analyzing hidden <span class="keyword">import</span> <span class="string">'MainUi.py'</span></span><br><span class="line"><span class="number">15868</span> ERROR: Hidden <span class="keyword">import</span> <span class="string">'MainUi.py'</span> <span class="keyword">not</span> found</span><br><span class="line"><span class="number">15868</span> INFO: Analyzing hidden <span class="keyword">import</span> <span class="string">'SecondUi'</span></span><br><span class="line"><span class="number">15872</span> ERROR: Hidden <span class="keyword">import</span> <span class="string">'SecondUi'</span> <span class="keyword">not</span> found</span><br><span class="line"><span class="number">15872</span> INFO: Analyzing hidden <span class="keyword">import</span> <span class="string">'c57.py'</span></span><br><span class="line"><span class="number">15879</span> ERROR: Hidden <span class="keyword">import</span> <span class="string">'c57.py'</span> <span class="keyword">not</span> found</span><br><span class="line"><span class="number">15879</span> INFO: Processing module hooks...</span><br><span class="line"><span class="number">15880</span> INFO: Loading module hook <span class="string">"hook-cv2.py"</span>...</span><br><span class="line"><span class="number">29174</span> INFO: Processing pre-safe <span class="keyword">import</span> module hook   setuptools.extern.six.moves</span><br><span class="line"><span class="number">32195</span> INFO: Processing pre-find module path hook   site</span><br><span class="line"><span class="number">32197</span> INFO: site: retargeting to fake-dir <span class="string">'D:\\Anaconda3\\lib\\site-packages\\PyInstaller\\fake-modules'</span></span><br><span class="line"><span class="number">50105</span> INFO: Loading module hook <span class="string">"hook-distutils.py"</span>...</span><br><span class="line"><span class="number">50108</span> INFO: Loading module hook <span class="string">"hook-encodings.py"</span>...</span><br><span class="line"><span class="number">50502</span> INFO: Loading module hook <span class="string">"hook-importlib_metadata.py"</span>...</span><br><span class="line"><span class="number">50508</span> INFO: Loading module hook <span class="string">"hook-lib2to3.py"</span>...</span><br><span class="line"><span class="number">50518</span> INFO: Loading module hook <span class="string">"hook-numpy.core.py"</span>...</span><br><span class="line"><span class="number">50826</span> INFO: MKL libraries found when importing numpy. Adding MKL to binaries</span><br><span class="line"><span class="number">50847</span> INFO: Loading module hook <span class="string">"hook-numpy.py"</span>...</span><br><span class="line"><span class="number">50849</span> INFO: Loading module hook <span class="string">"hook-pkg_resources.py"</span>...</span><br><span class="line"><span class="number">53673</span> INFO: Processing pre-safe <span class="keyword">import</span> module hook   win32com</span><br><span class="line"><span class="number">54626</span> INFO: Excluding <span class="keyword">import</span> <span class="string">'__main__'</span></span><br><span class="line"><span class="number">54628</span> INFO:   Removing <span class="keyword">import</span> of __main__ <span class="keyword">from</span> module pkg_resources</span><br><span class="line"><span class="number">54629</span> INFO: Loading module hook <span class="string">"hook-pycparser.py"</span>...</span><br><span class="line"><span class="number">54630</span> INFO: Loading module hook <span class="string">"hook-pydoc.py"</span>...</span><br><span class="line"><span class="number">54632</span> INFO: Loading module hook <span class="string">"hook-PyQt5.py"</span>...</span><br><span class="line"><span class="number">55169</span> INFO: Loading module hook <span class="string">"hook-PyQt5.QtCore.py"</span>...</span><br><span class="line"><span class="number">55386</span> INFO: Loading module hook <span class="string">"hook-PyQt5.QtGui.py"</span>...</span><br><span class="line"><span class="number">55830</span> INFO: Loading module hook <span class="string">"hook-PyQt5.QtWidgets.py"</span>...</span><br><span class="line"><span class="number">56219</span> INFO: Loading module hook <span class="string">"hook-pytest.py"</span>...</span><br><span class="line"><span class="number">60422</span> INFO: Loading module hook <span class="string">"hook-pythoncom.py"</span>...</span><br><span class="line"><span class="number">62380</span> INFO: Loading module hook <span class="string">"hook-pywintypes.py"</span>...</span><br><span class="line"><span class="number">64671</span> INFO: Loading module hook <span class="string">"hook-scipy.py"</span>...</span><br><span class="line"><span class="number">64679</span> INFO: Loading module hook <span class="string">"hook-setuptools.py"</span>...</span><br><span class="line"><span class="number">67959</span> INFO: Loading module hook <span class="string">"hook-sysconfig.py"</span>...</span><br><span class="line"><span class="number">67962</span> INFO: Loading module hook <span class="string">"hook-win32com.py"</span>...</span><br><span class="line"><span class="number">70088</span> INFO: Loading module hook <span class="string">"hook-xml.dom.domreg.py"</span>...</span><br><span class="line"><span class="number">70090</span> INFO: Loading module hook <span class="string">"hook-xml.etree.cElementTree.py"</span>...</span><br><span class="line"><span class="number">70092</span> INFO: Loading module hook <span class="string">"hook-xml.py"</span>...</span><br><span class="line"><span class="number">70166</span> INFO: Looking <span class="keyword">for</span> ctypes DLLs</span><br><span class="line"><span class="number">70414</span> INFO: Analyzing run-time hooks ...</span><br><span class="line"><span class="number">70424</span> INFO: Including run-time hook <span class="string">'pyi_rth_pyqt5.py'</span></span><br><span class="line"><span class="number">70426</span> INFO: Including run-time hook <span class="string">'pyi_rth_multiprocessing.py'</span></span><br><span class="line"><span class="number">70433</span> INFO: Including run-time hook <span class="string">'pyi_rth_pkgres.py'</span></span><br><span class="line"><span class="number">70440</span> INFO: Including run-time hook <span class="string">'pyi_rth_win32comgenpy.py'</span></span><br><span class="line"><span class="number">70474</span> INFO: Looking <span class="keyword">for</span> dynamic libraries</span><br><span class="line"><span class="number">70552</span> WARNING: lib <span class="keyword">not</span> found: msmpi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_msmpi_ilp64.dll</span><br><span class="line"><span class="number">70770</span> WARNING: lib <span class="keyword">not</span> found: mpich2mpi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_mpich2_ilp64.dll</span><br><span class="line"><span class="number">71062</span> WARNING: lib <span class="keyword">not</span> found: impi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_intelmpi_ilp64.dll</span><br><span class="line"><span class="number">71619</span> WARNING: lib <span class="keyword">not</span> found: pgc14.dll dependency of D:\Anaconda3\Library\bin\mkl_pgi_thread.dll</span><br><span class="line"><span class="number">71628</span> WARNING: lib <span class="keyword">not</span> found: pgf90rtl.dll dependency of D:\Anaconda3\Library\bin\mkl_pgi_thread.dll</span><br><span class="line"><span class="number">71637</span> WARNING: lib <span class="keyword">not</span> found: pgf90.dll dependency of D:\Anaconda3\Library\bin\mkl_pgi_thread.dll</span><br><span class="line"><span class="number">72151</span> WARNING: lib <span class="keyword">not</span> found: msmpi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_msmpi_lp64.dll</span><br><span class="line"><span class="number">72204</span> WARNING: lib <span class="keyword">not</span> found: impi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_intelmpi_lp64.dll</span><br><span class="line"><span class="number">72244</span> WARNING: lib <span class="keyword">not</span> found: mpich2mpi.dll dependency of D:\Anaconda3\Library\bin\mkl_blacs_mpich2_lp64.dll</span><br><span class="line"><span class="number">74930</span> WARNING: lib <span class="keyword">not</span> found: api-ms-win-downlevel-shlwapi-l1<span class="number">-1</span><span class="number">-0.</span>dll dependency of D:\Anaconda3\Library\bin\opencv_videoio342.dll</span><br><span class="line"><span class="number">75978</span> INFO: Looking <span class="keyword">for</span> eggs</span><br><span class="line"><span class="number">75978</span> INFO: Using Python library D:\Anaconda3\python37.dll</span><br><span class="line"><span class="number">75979</span> INFO: Found binding redirects:</span><br><span class="line">[]</span><br><span class="line"><span class="number">76044</span> INFO: Warnings written to D:\工程名\build\main\warn-main.txt</span><br><span class="line"><span class="number">76265</span> INFO: Graph cross-reference written to D:\工程名\build\main\xref-main.html</span><br><span class="line"><span class="number">76316</span> INFO: checking PYZ</span><br><span class="line"><span class="number">76329</span> INFO: Building because toc changed</span><br><span class="line"><span class="number">76329</span> INFO: Building PYZ (ZlibArchive) D:\工程名\build\main\PYZ<span class="number">-00.</span>pyz</span><br><span class="line"><span class="number">79360</span> INFO: Building PYZ (ZlibArchive) D:\工程名\build\main\PYZ<span class="number">-00.</span>pyz completed successfully.</span><br><span class="line"><span class="number">79392</span> INFO: checking PKG</span><br><span class="line"><span class="number">79397</span> INFO: Building because toc changed</span><br><span class="line"><span class="number">79397</span> INFO: Building PKG (CArchive) PKG<span class="number">-00.</span>pkg</span><br><span class="line"><span class="number">228706</span> INFO: Building PKG (CArchive) PKG<span class="number">-00.</span>pkg completed successfully.</span><br><span class="line"><span class="number">228720</span> INFO: Bootloader D:\Anaconda3\lib\site-packages\PyInstaller\bootloader\Windows<span class="number">-64</span>bit\runw.exe</span><br><span class="line"><span class="number">228720</span> INFO: checking EXE</span><br><span class="line"><span class="number">228727</span> INFO: Building because console changed</span><br><span class="line"><span class="number">228727</span> INFO: Building EXE <span class="keyword">from</span> EXE<span class="number">-00.</span>toc</span><br><span class="line"><span class="number">228840</span> INFO: Copying icons <span class="keyword">from</span> [<span class="string">'D:\\工程名\\systemcode\\logo.ico'</span>]</span><br><span class="line"><span class="number">228924</span> INFO: Writing RT_GROUP_ICON <span class="number">0</span> resource <span class="keyword">with</span> <span class="number">20</span> bytes</span><br><span class="line"><span class="number">228924</span> INFO: Writing RT_ICON <span class="number">1</span> resource <span class="keyword">with</span> <span class="number">4264</span> bytes</span><br><span class="line"><span class="number">228935</span> INFO: Updating manifest <span class="keyword">in</span> D:\工程名\build\main\runw.exe.t4_sreaw</span><br><span class="line"><span class="number">229409</span> INFO: Updating resource type <span class="number">24</span> name <span class="number">1</span> language <span class="number">0</span></span><br><span class="line"><span class="number">229415</span> INFO: Appending archive to EXE D:\工程名\dist\main.exe</span><br><span class="line"><span class="number">230034</span> INFO: Building EXE <span class="keyword">from</span> EXE<span class="number">-00.</span>toc completed successfully.</span><br></pre></td></tr></table></figure>
<p>打包成功！！！<br>在生成的dist文件夹中生成了打包好的.exe文件如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200218145845690.png" alt=".exe"><br>点击main.exe，正常运行。<br>你以为这就完了（当时我也是怎么以为），此时我们需要把生成的main.exe文件放入刚才新建的文件夹中如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200218195106494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="打包最后"><br>然后关掉你的PyCharm，如果可以正常运行，这样就真的可以了。<br><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pyinstaller</tag>
      </tags>
  </entry>
  <entry>
    <title>Python获取时间间隔实现定时任务</title>
    <url>/2020/07/23/Python%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h1 id="1-datatime模块"><a href="#1-datatime模块" class="headerlink" title="1. datatime模块"></a>1. datatime模块</h1><p>datetime模块是Python自带对时间的操作，常用的四类分别是date、time、datetime、timedelta.<br>具体可参考: <a href="https://blog.csdn.net/cmzsteven/article/details/64906245" target="_blank" rel="noopener">Python datetime模块详解、示例</a>.</p>
<hr>
<h1 id="2-获取时间间隔"><a href="#2-获取时间间隔" class="headerlink" title="2. 获取时间间隔"></a>2. 获取时间间隔</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datatime</span><br><span class="line"></span><br><span class="line">dt1 = datetime.datetime.now()</span><br><span class="line">dt2 = datetime.datetime(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">5</span>,<span class="number">19</span>,<span class="number">30</span>,<span class="number">6</span>,<span class="number">00000</span>)  <span class="comment"># year, month, day,hour,minate,sec,us</span></span><br><span class="line">span = dt2 - dt1</span><br><span class="line">time_span = round(span.total_seconds(), <span class="number">1</span>) <span class="comment"># 保留一位小数</span></span><br><span class="line">print(<span class="string">'当前时间间隔：'</span>, time_span)</span><br></pre></td></tr></table></figure>
<p>通过判断时间间隔来控制相关函数实现每隔固定时间执行一次，比如可以以time_span%60==0来作为判断条件等等来控制定时任务的执行，当然也有其他的定时调度函数或者模块比如timer，threading、apscheduler等。<br>这里的定时任务是隔一分钟向数据库插入一条数据，实现效果如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200505201626953.png" alt="数据库插入"></p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>datetime</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Mybatis</title>
    <url>/2020/07/21/SpringBoot%E6%95%B4%E5%90%88Mybatis/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h2 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h2><ul>
<li>IDEA2018.3 </li>
<li>JDK1.8 </li>
<li>SpringBoot2.3.0</li>
<li>360浏览器<h2 id="整合过程"><a href="#整合过程" class="headerlink" title="整合过程"></a>整合过程</h2><ol>
<li>新建一个Spring Initializr项目<br><img src="https://img-blog.csdnimg.cn/20200718104936498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>创建项目的文件结构以及jdk的版本<br><img src="https://img-blog.csdnimg.cn/202007181050333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>选择项目所需要的依赖<br><img src="https://img-blog.csdnimg.cn/20200718105109480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>修改项目名，点击完成<br><img src="https://img-blog.csdnimg.cn/20200718105204109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>选择自动导入依赖<br><img src="https://img-blog.csdnimg.cn/20200718105410937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>pom,xml文件</li>
</ol>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.1.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.cjw&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;demo&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<!-- more -->
<p>6.修改配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#server.port=8080</span></span><br><span class="line"><span class="comment">#server.servlet.context-path=/index #访问路径设置</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.datasource.url</span> <span class="string">=</span> <span class="string">jdbc:mysql://localhost:3306/ems?characterEncoding=UTF-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="string">spring.datasource.username</span> <span class="string">=</span> <span class="string">root</span></span><br><span class="line"><span class="string">spring.datasource.password</span> <span class="string">=</span> <span class="number">123456</span></span><br><span class="line"><span class="string">spring.datasource.driverClassName</span> <span class="string">=</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.type</span> <span class="string">=</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"><span class="string">mybatis.mapper-locations</span> <span class="string">=</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="string">mybatis.type-aliases-package</span> <span class="string">=</span> <span class="string">com.dvms.entity</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.resources.static-locations</span> <span class="string">=</span> <span class="string">classpath:/templates/,classpath:/static/</span></span><br></pre></td></tr></table></figure>
<p>这里使用application.properties文件，也可以使用更加简洁的application.yml文件，须要将resource文件夹下原有的application.properties文件删除，染回创建application.yml配置文件（备注：其实SpringBoot底层会把application.yml文件解析为application.properties）<br>7.实现业务流程<br>创建包controller、entity、mapper、service。resources下创建mapper文件夹，用于写sql语句，也可以用注解的方式直接写在mapper文件里。<br>最终框架结构:<br><img src="https://img-blog.csdnimg.cn/20200718110739805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>完成以上，下面在启动类里加上注解用于给出需要扫描的dao文件路径<br>@MapperScan(“com.dvms.dao”) //扫描dao接口,mybatis扫描路径，针对的是接口Mapper类<br>最后启动，浏览器输入地址：<a href="http://localhost:8080/index(根据实际项目)显示出对应界面即可。" target="_blank" rel="noopener">http://localhost:8080/index(根据实际项目)显示出对应界面即可。</a><br><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架下各层的解释说明（Controller等）</title>
    <url>/2020/07/21/SSM%E6%A1%86%E6%9E%B6%E4%B8%8B%E5%90%84%E5%B1%82%E7%9A%84%E8%A7%A3%E9%87%8A%E8%AF%B4%E6%98%8E%EF%BC%88Controller%E7%AD%89%EF%BC%89/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="SSM框架"><a href="#SSM框架" class="headerlink" title="SSM框架"></a>SSM框架</h1><p>SSM框架是spring MVC ，Spring和Mybatis框架的整合，是标准的MVC模式，将整个系统划分为表现层（web），controller层，service层，dao层四层,使用spring MVC负责请求的转发和视图管理。Spring实现业务对象管理，Mybatis作为数据对象的持久化引擎。<br><img src="https://img-blog.csdnimg.cn/20200718155138172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>表现层（web）：通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。<br>业务逻辑层（service）：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。<br>数据访问层（dao）：该层所做事务直接操作数据库，针对数据的增添、删除、修改、更新、查找等。<br>DataBase ===&gt; Entity ===&gt; Mapper.xml ===&gt; Dao.Java ===&gt; Service.java ===&gt; Controller.java ===&gt; html css js（thymeleaf） </p>
<!-- more -->
<hr>
<h1 id="各层解释说明"><a href="#各层解释说明" class="headerlink" title="各层解释说明"></a>各层解释说明</h1><p>用IDEA创建一个maven项目结构如左图所示,在该项目中,有五个包,分别是controller、dao、entity、service和serviceimpl：<br><img src="https://img-blog.csdnimg.cn/20200718155620771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>|层| 描述 |<br>|–|–|<br>| 实体层 | 数据库在项目中的类，主要用于定义与数据库对象应的属性，提供get/set方法,tostring方法,有参无参构造函数。 |<br>|持久层  | 与数据库交互，dao层首先会创建dao接口，接着就可以在配置文件中定义该接口的实现类；接着就可以在模块中调用dao的接口进行数据业务的处理，而不用关注此接口的具体实现类是哪一个类，dao层的数据源和数据库连接的参数都是在配置文件中进行配置的。 |<br>|业务层  |控制业务,业务模块的逻辑应用设计，和dao层一样都是先设计接口，再创建要实现的类，然后在配置文件中进行配置其实现的关联。接下来就可以在service层调用接口进行业务逻辑应用的处理。  |<br>| 实现层 |实现service接口的所有方法，整合service和dao |<br>|控制层  | controller层主要调用Service层里面的接口控制具体的业务流程，控制的配置也要在配置文件中进行。Controller和Service的区别是：Controller负责具体的业务模块流程的控制；Service层负责业务模块的逻辑应用设计 |</p>
<hr>
<h2 id="entity层（model层）"><a href="#entity层（model层）" class="headerlink" title="entity层（model层）"></a>entity层（model层）</h2><p> 实体层用于存放我们的实体类，与数据库中的属性值基本保持一致，实现set和get的方法。<br> 1.导入lombok小辣椒驱动依赖,用来生成get/set方法依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dvms.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>) <span class="comment">//链式调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date bir;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.传统方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.umf.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdataSettingEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">private</span> Integer id = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> updataflag;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置：</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取：</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置：</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdataflag</span><span class="params">(<span class="keyword">int</span> updataflag)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.updataflag = updataflag;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取：</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUpdataflag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> updataflag;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="dao层（mapper层）"><a href="#dao层（mapper层）" class="headerlink" title="dao层（mapper层）"></a>dao层（mapper层）</h2><p>dao层（接口类）对数据库进行数据持久化操作，他的方法语句是直接针对数据库操作的，主要实现一些增删改查操作，在Mybatis中方法主要与与xxxDao（Mapper）.xml内相互一一映射。<br>Mybatis可以用.xml进行数据操作，也可以在dao层用注解的方式，也可以采取xml和dao层接口组合使用的方法（常用）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dvms.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dvms.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//登录</span></span><br><span class="line">    <span class="function">User <span class="title">login</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username, @<span class="title">Param</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;<span class="comment">// 在mybatis中传递多个参数要做参数的绑定</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户(注册)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAlluser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户信息（先查再改）</span></span><br><span class="line">    <span class="function">User <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>xxxDao（Mapper）.xm</strong>l：<br>关键： &lt; mapper namespace=”<strong>com.dvms.dao.UserDao</strong>“&gt;<br>前提：基本数据库语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span><br><span class="line">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><br><span class="line">&lt;mapper namespace="com.dvms.dao.UserDao"&gt;</span><br><span class="line">&lt;!--注册/新增用户--&gt;</span><br><span class="line">    &lt;insert id="save" parameterType="User"&gt;</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>,username,<span class="keyword">password</span>,sex,phone,email,<span class="keyword">role</span>) <span class="keyword">values</span> (<span class="comment">#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;sex&#125;,#&#123;phone&#125;,#&#123;email&#125;,#&#123;role&#125;)</span></span><br><span class="line">    &lt;/<span class="keyword">insert</span>&gt;</span><br><span class="line">&lt;!<span class="comment">--登录验证--&gt;</span></span><br><span class="line">    &lt;<span class="keyword">select</span> <span class="keyword">id</span>=<span class="string">"login"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">id</span>,username,<span class="keyword">password</span>,sex,phone,email,<span class="keyword">role</span> <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line">        <span class="keyword">where</span> username =<span class="comment">#&#123;username&#125; and password =#&#123;password&#125;</span></span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">&lt;!<span class="comment">--查询所有用户--&gt;</span></span><br><span class="line">    &lt;<span class="keyword">select</span> <span class="keyword">id</span>=<span class="string">"findAlluser"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">id</span>,username,<span class="keyword">password</span>,sex,phone,email,<span class="keyword">role</span> <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">&lt;!<span class="comment">--删除用户--&gt;</span></span><br><span class="line">    &lt;<span class="keyword">delete</span> <span class="keyword">id</span>=<span class="string">"delete"</span> parameterType=<span class="string">"String"</span>&gt;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="comment">#&#123;id&#125;</span></span><br><span class="line">    &lt;/<span class="keyword">delete</span>&gt;</span><br><span class="line">&lt;!<span class="comment">--修改用户信息--&gt;</span></span><br><span class="line">    &lt;!<span class="comment">--查到要修改的用户信息--&gt;</span></span><br><span class="line">    &lt;<span class="keyword">select</span> <span class="keyword">id</span>=<span class="string">"update"</span> parameterType=<span class="string">"String"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">id</span>,username,<span class="keyword">password</span>,sex,phone,email,<span class="keyword">role</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="comment">#&#123;id&#125;</span></span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">    &lt;!<span class="comment">--修改用户信息--&gt;</span></span><br><span class="line">    &lt;<span class="keyword">update</span> <span class="keyword">id</span>=<span class="string">"add"</span> parameterType=<span class="string">"User"</span>&gt;</span><br><span class="line">        <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> username=<span class="comment">#&#123;username&#125;,password=#&#123;password&#125;,sex=#&#123;sex&#125;,phone=#&#123;phone&#125;,email=#&#123;email&#125;,role=#&#123;role&#125; where id=#&#123;id&#125;</span></span><br><span class="line">    &lt;/<span class="keyword">update</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<p>在dao层用注解的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from student where stu_id=#&#123;stuId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryById</span><span class="params">(<span class="keyword">int</span> stuId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><p>service层（接口类）为controller层的类提供接口进行调用,一般就是自己写的方法封装起来，具体实现在serviceImpl中。<br>service层是建立在dao层之上的，建立了dao层后才可以建立service层，而service层又是在controller层之下的，因而service层应该既调用dao层的接口，又要提供接口给Controller层的类来进行调用，它刚好处于一个中间层的位置。每个模型都有一个service接口，每个接口分别封装各自的业务处理方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dvms.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dvms.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录</span></span><br><span class="line">    <span class="function">User <span class="title">login</span><span class="params">(String username, String password)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAlluser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户信息</span></span><br><span class="line">    <span class="function">User <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>servicedmpl</strong>（实现service层，整合service和dao）（导入dao层）（接口实现类）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dvms.service.Impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dvms.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.dvms.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.dvms.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        user.setId(UUID.randomUUID().toString());</span><br><span class="line">        userDao.save(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDao.login(username,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAlluser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAlluser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        userDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.update(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Controller层（web-层）"><a href="#Controller层（web-层）" class="headerlink" title="Controller层（web 层）"></a>Controller层（web 层）</h2><p>负责具体模块的业务流程控制（获取参数（前端传过来）返回响应（前端或数据库或一个指定路径）），需要调用service逻辑设计层的接口来控制业务流程（导入service层）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dvms.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dvms.entity.Emp;</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"emp/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(@RequestParam(defaultValue = <span class="string">"1"</span>)</span> <span class="keyword">int</span> pageNum,</span></span><br><span class="line"><span class="function">                          @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"5"</span>)</span> <span class="keyword">int</span> pageSize,</span></span><br><span class="line"><span class="function">                          Model model)</span>&#123;</span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);<span class="comment">//</span></span><br><span class="line">        PageInfo&lt;Emp&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(empService.findAll());</span><br><span class="line">        model.addAttribute(<span class="string">"pageInfo"</span>,pageInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        List&lt;Emp&gt; emps = empService.findAll();</span></span><br><span class="line"><span class="comment">//        model.addAttribute("emps",emps);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ems/tables"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/emp/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Emp emp)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        empService.save(emp);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/emp/findAll"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>Controller层调用了Service层的接口方法，Service层调用Dao层的方法，其中调用的参数是使用Entity层进行传递的。View层与Controller层协同工作,主要负责界面展示。</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>SSM框架</tag>
      </tags>
  </entry>
  <entry>
    <title>QTableWidget读取数据库数据实现界面可视化</title>
    <url>/2020/07/23/QTableWidget%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E5%AE%9E%E7%8E%B0%E7%95%8C%E9%9D%A2%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h1 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h1><ul>
<li>Python 3.x </li>
<li>Pyqt5</li>
<li>MySQL数据库 </li>
<li>Qt designer </li>
<li>PyUIC </li>
<li>各种轮子</li>
</ul>
<hr>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><p>利用pymysql查到数据后，将数据在界面的tableWidget中展示出来<br>最终效果：<br><img src="https://img-blog.csdnimg.cn/20200605185232658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><p>1.首先需要先在界面中设计好表格及样式（包含隔行变色等）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表格样式</span></span><br><span class="line">self.tableWidget.setStyleSheet(<span class="string">"QTableWidget::item:hover&#123;background-color:rgb(92,188,227,200)&#125;"</span></span><br><span class="line">                                           <span class="string">"QTableWidget::item:selected&#123;background-color:#1B89A1&#125;"</span></span><br><span class="line">                                           <span class="string">"QHeaderView::section,QTableCornerButton:section&#123; \</span></span><br><span class="line"><span class="string">                                            padding:3px; margin:0px; color:#DCDCDC;  border:1px solid #242424; \</span></span><br><span class="line"><span class="string">                                            border-left-width:0px; border-right-width:1px; border-top-width:0px; border-bottom-width:1px; \</span></span><br><span class="line"><span class="string">                                            background:qlineargradient(spread:pad,x1:0,y1:0,x2:0,y2:1,stop:0 #646464,stop:1 #525252); &#125;"</span></span><br><span class="line">                                           <span class="string">"QTableWidget&#123;alternate-background-color:#A9F5E1; background: white; color: #6b6d7b;</span></span><br></pre></td></tr></table></figure>
<p>样式效果：<br><img src="https://img-blog.csdnimg.cn/20200604220006209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改配色可参考： <a href="https://blog.csdn.net/cjw12581/article/details/106558377" target="_blank" rel="noopener">色彩表格工具</a>.<br>其他表格样式配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 设置行表头</span></span><br><span class="line">self.tableWidget.setHorizontalHeaderLabels([<span class="string">"XXXX"</span>, <span class="string">"XXXX"</span>, <span class="string">"XXXX"</span>])</span><br><span class="line"><span class="comment"># 表格禁止编辑</span></span><br><span class="line">self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line"><span class="comment"># 行间隔变色（boolen）</span></span><br><span class="line">self.tableWidget.setAlternatingRowColors(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>2.配置好数据库，确保能建立连接后开始查询操作(通过按钮绑定时间发起)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开数据库连接（IP地址/数据库用户名/登录密码/数据库模式名/编码方式/端口号）</span></span><br><span class="line">database = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'tree'</span>,</span><br><span class="line">                                   password=<span class="string">'5201314'</span>, db=<span class="string">"databasename"</span>, charset=<span class="string">'utf8'</span>, port=<span class="number">3306</span>)</span><br><span class="line">        cur = database.cursor()</span><br><span class="line">        <span class="comment"># 数据库查询操作</span></span><br><span class="line">        cur.execute(<span class="string">'select * from tablename'</span>)</span><br><span class="line">        rows = cur.fetchall()</span><br><span class="line">        <span class="comment"># 取得记录个数，用于设置表格的行数</span></span><br><span class="line">        row = cur.rowcount</span><br><span class="line">        <span class="comment"># 取得字段数，用于设置表格的列数</span></span><br><span class="line">        vol = len(rows[<span class="number">0</span>])</span><br><span class="line">        cur.close()</span><br><span class="line">        database.close()</span><br><span class="line"></span><br><span class="line">        self.tableWidget.setRowCount(row)</span><br><span class="line">        self.tableWidget.setColumnCount(vol)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(vol):</span><br><span class="line">                <span class="comment"># 临时记录，不能直接插入表格</span></span><br><span class="line">                temp_data = rows[i][j]</span><br><span class="line">                <span class="comment"># 转换后可插入表格</span></span><br><span class="line">                data = QTableWidgetItem(str(temp_data))</span><br><span class="line">                self.tableWidget.setItem(i, j, data)</span><br><span class="line"></span><br><span class="line">        self.button_sql.setText(<span class="string">'刷新记录'</span>)</span><br></pre></td></tr></table></figure>

<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>PyQt5</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的启动图案修改</title>
    <url>/2020/07/22/SpringBoot%E7%9A%84%E5%90%AF%E5%8A%A8%E5%9B%BE%E6%A1%88%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"><br>Springboot项目启动时，会出现大大的SpringBoot的图案：<br><img src="https://img-blog.csdnimg.cn/20200718141606137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改：<br>首先创建springboot项目，首先在resources/目录下创建名为banner.txt的文件：<br>点击链接：<a href="http://patorjk.com/software/taag/#p=display&f=Graffiti&t=CJW" target="_blank" rel="noopener">SpringBoot的启动图案修改</a><br><img src="https://img-blog.csdnimg.cn/20200718141955428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>启动项目：<br><img src="https://img-blog.csdnimg.cn/20200718142131464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>无聊…..<br><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>启动图案修改</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目打包为jar包</title>
    <url>/2020/07/22/SpringBoot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%B8%BAjar%E5%8C%85/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h1><ul>
<li>IDEA2018.3 </li>
<li>JDK1.8 </li>
<li>SpringBoot2.3.0 </li>
<li>360浏览器<br>项目部署一般是两种方式：<br>一种是打包成 jar 包直接执行，另一种是打包成 war 包放到 Tomcat 服务器下，SpringBoot一般情况下默认为jar包方式。<br>pom.xml：<br>&lt; packaging&gt;jar&lt; /packaging&gt;  （默认）<br>&lt; packaging&gt;war&lt; /packaging&gt;<!-- more -->
<h1 id="打jar包"><a href="#打jar包" class="headerlink" title="打jar包"></a>打jar包</h1>选择 File -&gt; Project Structure-&gt;Artifacts-&gt;Jar-&gt;Form modules with dependencies后点ok:<br>根据 下图内容创建 jar。如图所示，选择项目，入口类等。最后一项 META-INF，默认放到 src\main\java 目录里，如果使用默认值，没有进行其他配置，生成的 jar 有可能不会包含 META-INF 目录，导致运行 jar 出错。最好放在 src\main\resource目录中。点击ok保存。按下图所示配置：<br><img src="https://img-blog.csdnimg.cn/20200720101408336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击ok会出现如图所示信息:<br><img src="https://img-blog.csdnimg.cn/20200720101055777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h1 id="生成jar包"><a href="#生成jar包" class="headerlink" title="生成jar包"></a>生成jar包</h1>点击idea菜单栏中的build，依次选择：<br><img src="https://img-blog.csdnimg.cn/20200720103416304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点Build:<br><img src="https://img-blog.csdnimg.cn/20200720103454190.png" alt="在这里插入图片描述"><br>在保存路经中查找所打包的jar包如果存在则说明打包成功。<br><img src="https://img-blog.csdnimg.cn/20200720103554129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h1 id="运行jar包"><a href="#运行jar包" class="headerlink" title="运行jar包"></a>运行jar包</h1>开始运行jar包，打开cmd进入jar所在的路径，输入java -jar xxx.jar (jar名称) ，点击回车按键。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 <span class="number">10.0</span><span class="number">.18362</span><span class="number">.959</span>]</span><br><span class="line">(c) <span class="number">2019</span> Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\<span class="number">92895</span>&gt;D:</span><br><span class="line"></span><br><span class="line">D:\&gt;cd D:\data_view\out\artifacts\data_view_jar</span><br><span class="line"></span><br><span class="line">D:\data_view\out\artifacts\data_view_jar&gt;Java -jar data_view_jar</span><br><span class="line">Error: Unable to access jarfile data_view_jar</span><br><span class="line"></span><br><span class="line">D:\data_view\out\artifacts\data_view_jar&gt;java -jar data_view_jar</span><br><span class="line">Error: Unable to access jarfile data_view_jar</span><br><span class="line"></span><br><span class="line">D:\data_view\out\artifacts\data_view_jar&gt;java -jar data_view.jar</span><br><span class="line">_________       ____.__      __</span><br><span class="line">\_   ___ \     |    /  \    /  \</span><br><span class="line">/    \  \/     |    \   \/\/   /</span><br><span class="line">\     \____/\__|    |\        /</span><br><span class="line"> \______  /\________| \__/\  /</span><br><span class="line">        \/                 \/</span><br><span class="line"><span class="number">2020</span>-<span class="number">07</span>-<span class="number">20</span> <span class="number">09</span>:<span class="number">51</span>:<span class="number">27.016</span>  INFO <span class="number">12564</span> --- [  restartedMain] com.dvms.DataViewApplication             : Starting DataViewApplication on <span class="number">4</span>C501 with PID <span class="number">12564</span> (D:\data_view\out\artifacts\data_view_jar\data_view.jar started by <span class="number">92895</span> in D:\data_view\out\artifacts\data_view_jar)</span><br><span class="line"><span class="number">2020</span>-<span class="number">07</span>-<span class="number">20</span> <span class="number">09</span>:<span class="number">51</span>:<span class="number">27.020</span>  INFO <span class="number">12564</span> --- [  restartedMain] com.dvms.DataViewApplication             : No active profile set, falling back to <span class="keyword">default</span> profiles: <span class="keyword">default</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">07</span>-<span class="number">20</span> <span class="number">09</span>:<span class="number">51</span>:<span class="number">27.068</span>  INFO <span class="number">12564</span> --- [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set <span class="string">'spring.devtools.add-properties'</span> to <span class="string">'false'</span> to disable</span><br><span class="line"><span class="number">2020</span>-<span class="number">07</span>-<span class="number">20</span> <span class="number">09</span>:<span class="number">51</span>:<span class="number">27.068</span>  INFO <span class="number">12564</span> --- [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the <span class="string">'logging.level.web'</span> property to <span class="string">'DEBUG'</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">07</span>-<span class="number">20</span> <span class="number">09</span>:<span class="number">51</span>:<span class="number">28.817</span>  INFO <span class="number">12564</span> --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : <span class="function">Tomcat initialized with <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span></span></span><br><span class="line"><span class="function">2020-07-20 09:51:28.831  INFO 12564 --- [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span></span><br><span class="line"><span class="function">2020-07-20 09:51:28.832  INFO 12564 --- [  restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]</span></span><br><span class="line"><span class="function">2020-07-20 09:51:28.896  INFO 12564 --- [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span></span><br><span class="line"><span class="function">2020-07-20 09:51:28.896  INFO 12564 --- [  restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1827 ms</span></span><br><span class="line"><span class="function">2020-07-20 09:51:29.631  INFO 12564 --- [  restartedMain] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@56cf4f3a, org.springframework.security.web.context.SecurityContextPersistenceFilter@45e169c9, org.springframework.security.web.header.HeaderWriterFilter@26d4eefe, org.springframework.security.web.authentication.logout.LogoutFilter@f17fdd6, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5f33f6b3, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@70ffa278, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@109a14b8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@54857a49, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@423bad4c, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@7e8ca12a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3ee5e690, org.springframework.security.web.session.SessionManagementFilter@7139411a, org.springframework.security.web.access.ExceptionTranslationFilter@1ec9ee0a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@bf4c490]</span></span><br><span class="line"><span class="function">2020-07-20 09:51:29.711  INFO 12564 --- [  restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'</span></span><br><span class="line"><span class="function">2020-07-20 09:51:29.929  INFO 12564 --- [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729</span></span><br><span class="line"><span class="function">2020-07-20 09:51:29.967  INFO 12564 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span> with context path ''</span></span><br><span class="line"><span class="function">2020-07-20 09:51:29.976  INFO 12564 --- [  restartedMain] com.dvms.DataViewApplication             : Started DataViewApplication in 3.27 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">3.828</span>)</span></span></span><br><span class="line"><span class="function">2020-07-20 09:51:44.774  INFO 12564 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'</span></span><br><span class="line"><span class="function">2020-07-20 09:51:44.775  INFO 12564 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'</span></span><br><span class="line"><span class="function">2020-07-20 09:51:44.782  INFO 12564 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5 ms</span></span><br><span class="line"><span class="function">2020-07-20 09:51:56.052  INFO 12564 --- [nio-8080-exec-5] com.alibaba.druid.pool.DruidDataSource   : </span>&#123;dataSource-<span class="number">1</span>&#125; init</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200720103747636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>浏览器输入：localhost8080:/index（根据实际项目）显示网页说明打包成功！！！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>jar包</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目热部署生效方法</title>
    <url>/2020/07/22/SpringBoot%E9%A1%B9%E7%9B%AE%E7%83%AD%E9%83%A8%E7%BD%B2%E7%94%9F%E6%95%88%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h1><ul>
<li>IDEA2018.3  </li>
<li>JDK1.8  </li>
<li>SpringBoot2.3.0</li>
<li>360浏览器<!-- more -->
</li>
</ul>
<hr>
<ol>
<li><p>Springboot提供了热部署的方式，当发现有任何类发生了改变，马上通过JVM类加载的方式，加载最新的类到虚拟机中。 这样就不必重启也能看到改动后的效果了，只需在浏览器刷新页面即可更新显示内容，不需要再重启整个项目工程，提高了开发效率。</p>
</li>
<li><p>如果前端使用了thymeleaf，那么在properties或yml中配置关闭thymeleaf缓存：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.thymeleaf.cache=<span class="keyword">false</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果修改的只是页面会自动刷新，如果是java类文件需要手动点击工具栏的<br>build–&gt;Build-&gt;Modules ‘myProject’.</p>
</li>
<li><p>Springboot版本也有可能导致热部署配置失败</p>
<hr>
<h1 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1. pom.xml"></a>1. pom.xml</h1><p>在pom文件中，引入如下依赖：</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--热部署插件--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>后，在插件中配置按如下配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!--fork :  必须配置，否则热部署不会生效，应用不会重置 --&gt;</span><br><span class="line">                    &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">                    &lt;addResources&gt;true&lt;/addResources&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>
<p>或者直接在依赖中配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">   &lt;optional&gt;true&lt;/optional&gt; &lt;!--true时热部署生效 --&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>打开maven仓库查看配置和依赖是否引入完成。</p>
<hr>
<h1 id="2-IDEA中配置"><a href="#2-IDEA中配置" class="headerlink" title="2. IDEA中配置"></a>2. IDEA中配置</h1><h2 id="File中Settings"><a href="#File中Settings" class="headerlink" title="File中Settings"></a>File中Settings</h2><p>打开顶部工具栏 File -&gt; Settings -&gt; Default Settings -&gt; Build -&gt; Compiler 然后勾选 Build project automatically 如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200523214447787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>后点击Help中的Find Action —&gt;（Ctrl + Shift + A）<br><img src="https://img-blog.csdnimg.cn/20200523214648903.png" alt="在这里插入图片描述"><br>后在搜索栏中输入Registry查找：<br><img src="https://img-blog.csdnimg.cn/20200523214935290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击确定后，勾选 Compiler autoMake allow when app running后保存设置：<br><img src="https://img-blog.csdnimg.cn/20200523215236732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h1 id="3-浏览器中配置"><a href="#3-浏览器中配置" class="headerlink" title="3. 浏览器中配置"></a>3. 浏览器中配置</h1><p>打开浏览器按Fn + F12进入审查元素，选择Network后勾选【✅】Disable cache ：<br><img src="https://img-blog.csdnimg.cn/20200523215937999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<p>确保以上均已完成配置，那么===================================================<br>项目热部署配置完成，重新编译启动工程修改IDEA工程代码后刷新浏览器，不用再重新启动工程了!</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>热部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat入门学习</title>
    <url>/2020/07/23/Tomcat%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><p>Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全域管理和Tomcat阀等。<br>由于 Tomcat 本身也内含了一个 HTTP 服务器，它也可以被视作一个单独的 Web 服务器。但是，不能将 Tomcat 和 Apache HTTP 服务器混淆，Apache HTTP 服务器是一个用 C 语言实现的 HTTP Web 服务器；这两个 HTTP web server 不是捆绑在一起的。Tomcat 包含了一个配置管理工具，也可以通过编辑XML格式的配置文件来进行配置。</p>
<h2 id="Tomcat-重要目录"><a href="#Tomcat-重要目录" class="headerlink" title="Tomcat 重要目录"></a>Tomcat 重要目录</h2><p>/bin - Tomcat 脚本存放目录（如启动、关闭脚本）。 *.sh 文件用于 Unix 系统； *.bat 文件用于 Windows 系统;<br>/conf - Tomcat 配置文件目录;<br>/logs - Tomcat 默认日志目录;<br>/webapps - webapp 运行的目录;<br>web 工程发布目录结构</p>
<h3 id="一般-web-项目路径结构"><a href="#一般-web-项目路径结构" class="headerlink" title="一般 web 项目路径结构"></a>一般 web 项目路径结构</h3><p>|– webapp                         # 站点根目录<br>    |– META-INF                   # META-INF 目录<br>    |   `– MANIFEST.MF            # 配置清单文件</p>
<pre><code>|-- WEB-INF                    # WEB-INF 目录
|   |-- classes                # class文件目录
|   |   |-- *.class            # 程序需要的 class 文件
|   |   `-- *.xml              # 程序需要的 xml 文件
|   |-- lib                    # 库文件夹
|   |   `-- *.jar              # 程序需要的 jar 包
|   `-- web.xml                # Web应用程序的部署描述文件
|-- &lt;userdir&gt;                  # 自定义的目录
|-- &lt;userfiles&gt;                # 自定义的资源文件</code></pre><p>webapp：工程发布文件夹。其实每个 war 包都可以视为 webapp 的压缩包。</p>
<p>META-INF：META-INF 目录用于存放工程自身相关的一些信息，元文件信息，通常由开发工具，环境自动生成。</p>
<p>WEB-INF：Java web应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。</p>
<p>/WEB-INF/classes：存放程序所需要的所有 Java class 文件。</p>
<p>/WEB-INF/lib：存放程序所需要的所有 jar 文件。</p>
<p>/WEB-INF/web.xml：web 应用的部署配置文件。它是工程中最重要的配置文件，它描述了 servlet 和组成应用的其它组件，以及应用初始化参数、安全管理约束等。</p>
<hr>
<p>具体可参考：<a href="https://www.cnblogs.com/jingmoxukong/p/8258837.html" target="_blank" rel="noopener">Tomcat 快速入门</a></p>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架常用注解</title>
    <url>/2020/07/21/Spring%E6%A1%86%E6%9E%B6%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="Spring常用注解"><a href="#Spring常用注解" class="headerlink" title="Spring常用注解"></a>Spring常用注解</h1><p><img src="https://img-blog.csdnimg.cn/20200719133116417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>@Controller 用来响应页面，表示当前的类为控制器。<br>在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。<br>@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢?这个时候就需要我们把这个控制器类交给Spring 来管理。</p>
<!-- more -->
<hr>
<h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>Spring4之后新加入的注解，原来返回json需要@ResponseBody和@Controller配合，表明当前类是控制器且返回的是一组数据，不是页面。@RestController是@ResponseBody和@Controller的组合注解，推荐直接使用@RestController注解来处理http请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>,method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>,method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>@Autowired的作用是将其他的<strong>类</strong>，<strong>接口</strong>引入，类似于之前的类的初始化等，用这个注解，类中或接口的方法就可以直接调用了。<br>@Autowired顾名思义，就是自动装配，其作用是为了消除代码Java代码里面的getter/setter与bean属性中的property。当然，getter看个人需求，如果私有属性需要对外提供的话，应当予以保留。<br>@Resource的作用相当于@Autowired</p>
<hr>
<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>作用: 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。当返回的数据不是html标签的页面，而是其他某种格式的数据时(如json、xml等)时使用。</p>
<hr>
<h2 id="RequestMapping-（配置url映射）"><a href="#RequestMapping-（配置url映射）" class="headerlink" title="@RequestMapping （配置url映射）"></a>@RequestMapping （配置url映射）</h2><p>@RequestMapping如果没有指定请求方式，将接收Get,Post,Head,Options等所有的请求方式。<br>@RequestMapping此注解即可以作用在控制器的某个方法上，也可以作用在此控制器类上。当前台界面调用Controller处理数据时候告诉控制器怎么操作有3种情形：<br>1.当控制器在<strong>类级别</strong>上添加@RequestMapping注解时，这个注解会应用到控制器的所有处理器方法上。处理器方法上的@RequestMapping注解会对类级别上的@RequestMapping的声明进行补充。<br>2.@RequestMapping作用在<strong>处理器方法</strong>上。<br>3.@RequestMapping同时作用在<strong>类级别</strong>和<strong>处理器方法</strong>上。<br><img src="https://img-blog.csdnimg.cn/2020071913490357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所响应的url=<strong>localhost:8080/updata_setting/updata</strong></p>
<hr>
<h3 id="RequestMapping注解属性"><a href="#RequestMapping注解属性" class="headerlink" title="@RequestMapping注解属性"></a>@RequestMapping注解属性</h3><p>作用：简化常用的HTTP方法的映射，并更好地表达被注解方法的语义。<br>RequestMapping注解有六个属性：<br>1、 value， method;</p>
<p>value: 指定请求的实际地址，指定的地址可以是URI Template 模式(后面将会说明);</p>
<p>method: 指定请求的method类型， GET、POST、PUT、DELETE等;常用： GET、POST<br>组合注解：</p>
<ul>
<li>@GetMapping @RequestMapping(method = RequestMethod.GET)的简写<br>作用：对应查询，表明是一个查询URL映射<ul>
<li>@PostMapping @RequestMapping(method =RequestMethod.POST)的简写<br>作用：对应增加，表明是一个增加URL映射</li>
<li>@PutMapping@RequestMapping(method = RequestMethod.PUT)的简写<br>作用：对应更新，表明是一个更新URL映射</li>
<li>@DeleteMapping @RequestMapping(method = RequestMethod.DELETE)的简写<br>作用：对应删除，表明是一个删除URL映射</li>
</ul>
</li>
</ul>
<p>2、consumes，produces</p>
<p>consumes: 指定处理请求的提交内容类型(Content-Type)，例如application/json, text/html;</p>
<p>produces: 指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回;</p>
<p>3、params，headers</p>
<p>params: 指定request中必须包含某些参数值是，才让该方法处理。</p>
<p>headers: 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p>
<hr>
<h4 id="PathVaribale"><a href="#PathVaribale" class="headerlink" title="@PathVaribale"></a>@PathVaribale</h4><p>通过@PathVariable注解来获取URL中的参数时的前提条件是我们知道url的格式时怎么样的。只有知道url的格式，我们才能在指定的方法上通过相同的格式获取相应位置的参数值。<br>1.获取url中的单个参数（如id）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello/&#123;id&#125;"</span>,method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id:"</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.获取url有多个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello/&#123;id&#125;/&#123;name&#125;"</span>,method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id:"</span>+id+<span class="string">" name:"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><p>作用：获取请求参数的值<br>@RequestParam注解给允许用户不输入参数时，使用默认值；<br><img src="https://img-blog.csdnimg.cn/20200719155619507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><p>如果传输的是单层json对象，我们后台可以直接用 @RequestParam接收。如果传输的是多层嵌套json对象，这个时候会就会出现数据丢失问题，@ResponseBody很好的解决了这个问题，它会把前台传输过来的json转化为后台对应的对象；<br>@RequestBody接收的是一个Json对象的字符串，而不是一个Json对象。（易出错）然而在ajax请求往往传的都是Json对象，用JSON.stringify(data)的方式就能将对象变成字符串。同时ajax请求的时候也要指定dataType: “json”,contentType:”application/json” 这样就可以轻易的将一个对象或者List传到Java端，使用@RequestBody即可绑定对象或者List。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#updata'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        updata_setting: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        Save:function(ev)&#123;</span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">"../updata_setting/updata"</span>;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: <span class="string">"POST"</span>,</span><br><span class="line">                url: url,</span><br><span class="line">                data: JSON.stringify(vm.updata_setting),</span><br><span class="line">                success: function(r)&#123;</span><br><span class="line">                        alert(<span class="string">'操作成功！'</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>用于标注业务层组件，位于service实现层：<br>形如：@Service(“xxxService”)<br><img src="https://img-blog.csdnimg.cn/20200719161449596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h2><p>@Override是伪代码,表示重写(当然不写也可以),不过写上有如下好处:<br>1、可以当注释用,方便阅读。<br>2、编译器可以给你验证@Override下面的方法名是否是你父类中所有的,如果没有则报错。比如你如果没写@Override而你下面的方法名又写错了,这时你的编译器是可以编译通过的(它以为这个方法是你的子类中自己增加的方法)。</p>
<hr>
<h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>@Repository用于标注数据访问组件，即dao层<br><img src="https://img-blog.csdnimg.cn/2020071916203432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果 Web 应用程序采用了经典的三层分层结构的话，最好在持久层、业务层和控制层分别采用上述注解对分层中的类进行注释。@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Spring框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat安装教程</title>
    <url>/2020/07/23/Tomcat%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h2 id="1-下载Tomcat"><a href="#1-下载Tomcat" class="headerlink" title="1. 下载Tomcat"></a>1. 下载Tomcat</h2><p>首先确定你Windows系统是64位，还是32位(现在大部分是64位)及JDK版本（Tomcat在 JDK1.8 环境下能够正常运行）<br>下载地址：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat官网</a>.<br><img src="https://img-blog.csdnimg.cn/20200717160125510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h1 id="2-安装Tomcat"><a href="#2-安装Tomcat" class="headerlink" title="2. 安装Tomcat"></a>2. 安装Tomcat</h1><p>解压压缩包，放在想要放在的盘符(最好不要是C盘，可能会出现拒绝访问)<br>如安装在D盘，那就解压出来放在D盘下就行，里面的文件名不要改动，或者放在D盘某一文件夹下，路径不要包含中文和特殊字符！<br><img src="https://img-blog.csdnimg.cn/20200717160411236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h2><p>在变量名中填写：CATALINA_HOME(不要留空格)<br>变量值就是你解压后的路径，你可以直接进入解压后的文件夹，复制这个路径到变量值<br><img src="https://img-blog.csdnimg.cn/20200717160624884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后再找到系统变量中的Path，在最后面追加    <strong>%CATALINA_HOME%\bin;</strong><br><img src="https://img-blog.csdnimg.cn/20200717160940172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="4-Tomcat启动和验证配置环境变量"><a href="#4-Tomcat启动和验证配置环境变量" class="headerlink" title="4.Tomcat启动和验证配置环境变量"></a>4.Tomcat启动和验证配置环境变量</h2><p>到你解压的tomcat文件夹下的bin目录中点击startup.bat<br><img src="https://img-blog.csdnimg.cn/2020071716100076.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后出现了Tomcat的启动窗口<br><img src="https://img-blog.csdnimg.cn/20200717161012545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后验证环境变量是否配置成功，浏览器输入一下 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 弹出页面：<br>链接: <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080 </a><br><img src="https://img-blog.csdnimg.cn/2020071716141342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置成功！！！<br><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>jar包和war包区别及理解</title>
    <url>/2020/07/22/jar%E5%8C%85%E5%92%8Cwar%E5%8C%85%E5%8C%BA%E5%88%AB%E5%8F%8A%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"><br>在开发阶段不适合使用war包，因为在开发阶段，经常需要添加或删除Web应用程序的内容，更新 Servlet类文件，而每一次改动后，重新建立war包将是一件浪费时间的事情。在产品发布阶段，使用war文件比较合适的，因为在这个时候，几乎不需要再做什么改动了。</p>
<h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><p><strong><em>jar是类的归档文件</em></strong><br>JAR（Java Archive，Java 归档文件）是与平台无关的文件格式，它允许将许多文件组合成一个压缩文件，为 J2EE 应用程序创建的jar文件是 EAR 文件（企业 jar文件），jar文件格式以流行的 ZIP 文件格式为基础。与 ZIP 文件不同的是，jar文件不仅用于压缩和发布，而且还用于部署和封装库、组件和插件程序，并可被像编译器和 JVM 这样的工具直接使用。在 jar中包含特殊的文件，如 manifests 和部署描述符，用来指示工具如何处理特定的 jar。<br>通常是开发时要引用通用类，打成jar包便于存放管理，当你使用某些功能时就需要这些jar包的支持，需要导入jar包。<br>jar包就是java的类进行编译生成的class文件打包的压缩包，包里面就是一些class文件。当我们自己使用Maven写一些java程序，进行打包生成jar包。同时在可以在其他的工程下使用，但是我们在这个工程依赖的jar包，在其他工程使用该JAR包也要导入。<br><img src="https://img-blog.csdnimg.cn/20200720151546286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<!-- more -->
<hr>
<h2 id="war包"><a href="#war包" class="headerlink" title="war包"></a>war包</h2><p><strong><em>war包是一个Web应用程序</em></strong><br>一个web程序进行打包便于部署的压缩包，里面包含我们web程序需要的一些东西，其中包括web.xml的配置文件，前端的页面文件，以及依赖的jar。便于我们部署工程，直接放到tomcat的webapps目录下，直接启动tomcat即可。同时，可以使用WinRAR查看war包，直接将后缀.war改成.rar。<br><img src="https://img-blog.csdnimg.cn/20200720160609375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>Web存档(war)文件包含Web应用程序的所有内容。它减少了传输文件所需要的时间。</p>
<hr>
<h2 id="jar包和war包区别"><a href="#jar包和war包区别" class="headerlink" title="jar包和war包区别"></a>jar包和war包区别</h2><p><strong>jar</strong>是java普通项目打包，通常是开发时要引用通用类，打成jar包便于存放管理。当你使用某些功能时就需要这些jar包的支持，需要导入jar包。<strong>war</strong>是java web项目打包，web网站完成后，打成war包部署到服务器，目的是为了节省资源，提供效率。</p>
<p>jar文件（扩展名为. Jar，Java Application Archive）包含Java类的普通库、资源（resources）、辅助文件（auxiliary files）等。通常是开发时要引用的通用类，打成包便于存放管理。简单来说，jar包就是别人已经写好的一些类，然后对这些类进行打包。可以将这些jar包引入到你的项目中，可以直接使用这些jar包中的类和属性，这些jar包一般放在lib目录下。</p>
<p>war文件（扩展名为.War,Web Application Archive）包含全部Web应用程序。在这种情形下，一个Web应用程序被定义为单独的一组文件、类和资源，用户可以对jar文件进行封装，并把它作为小型服务程序（servlet）来访问。 war包是一个可以直接运行的web模块，通常用于网站，打成包部署到容器中。以Tomcat来说，将war包放置在其\webapps\目录下,然后启动Tomcat，这个包就会自动解压，就相当于发布了。war包是Sun提出的一种web应用程序格式，与jar类似，是很多文件的压缩包。war包中的文件按照一定目录结构来组织。根据其根目录下包含有html和jsp文件，或者包含有这两种文件的目录，另外还有WEB-INF目录。通常在WEB-INF目录下含有一个web.xml文件和一个classes目录，web.xml是这个应用的配置文件，而classes目录下则包含编译好的servlet类和jsp，或者servlet所依赖的其他类（如JavaBean）。通常这些所依赖的类也可以打包成jar包放在WEB-INF下的lib目录下。</p>
<p>Ear文件（扩展名为.Ear,Enterprise Application Archive）包含全部企业应用程序。在这种情形下，一个企业应用程序被定义为多个jar文件、资源、类和Web应用程序的集合。</p>
<p>SpringBoot项目既可以打成war包发布，也可以找成jar包发布。<br>jar包：直接通过内置Tomcat运行，不需要额外安装Tomcat。如需修改内置Tomcat的配置，只需要在SpringBoot的配置文件中配置。内置Tomcat没有自己的日志输出，全靠jar包应用输出日志。但是比较方便，快速，比较简单。<br>war包：传统的应用交付方式，需要安装Tomcat，然后放到wabapps目录下运行war包，可以==灵活选择Tomcat版本==，可以直接修改Tomcat的配置，有自己的Tomcat日志输出，可以灵活配置安全策略,相对打成jar包来说没那么快速方便。</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>jar包</tag>
      </tags>
  </entry>
  <entry>
    <title>js中confirm弹框的确定按钮失效或无法传值解决办法</title>
    <url>/2020/07/23/js%E4%B8%ADconfirm%E5%BC%B9%E6%A1%86%E7%9A%84%E7%A1%AE%E5%AE%9A%E6%8C%89%E9%92%AE%E5%A4%B1%E6%95%88%E6%88%96%E6%97%A0%E6%B3%95%E4%BC%A0%E5%80%BC%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"><br>1.在项目中出现confirm弹框按钮失效，无法传布尔值，如果正常的话，使用以下代码即可完成传值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">window</span>.confirm(<span class="string">'是否XXXX?'</span>);</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="literal">true</span>)&#123;</span><br><span class="line">                alert(<span class="string">'终止操作！'</span>);</span><br><span class="line">                result = <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                alert(<span class="string">'终止操作取消！'</span>);</span><br><span class="line">                result = <span class="literal">false</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>2.但是这个弹框中的按钮失效了，只能基于bootstrap重新创建一下，可以参考以下这种，直接在js中插入这段代码(亲测有效）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">window</span>.Ewin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> html = <span class="string">'&lt;div id="[Id]" class="modal fade" role="dialog" aria-labelledby="modalLabel"&gt;'</span> +</span><br><span class="line">  <span class="string">'&lt;div class="modal-dialog modal-sm"&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;div class="modal-content"&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;div class="modal-header"&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;button type="button" class="close" data-dismiss="modal"&gt;&lt;span aria-hidden="true"&gt;×&lt;/span&gt;&lt;span class="sr-only"&gt;Close&lt;/span&gt;&lt;/button&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;h4 class="modal-title" id="modalLabel"&gt;[Title]&lt;/h4&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;div class="modal-body"&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;p&gt;[Message]&lt;/p&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;div class="modal-footer"&gt;'</span> +</span><br><span class="line"> <span class="string">'&lt;button type="button" class="btn btn-default cancel" data-dismiss="modal"&gt;[BtnCancel]&lt;/button&gt;'</span> +</span><br><span class="line"> <span class="string">'&lt;button type="button" class="btn btn-primary ok" data-dismiss="modal"&gt;[BtnOk]&lt;/button&gt;'</span> +</span><br><span class="line"> <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">  <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">  <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line"> <span class="keyword">var</span> dialogdHtml = <span class="string">'&lt;div id="[Id]" class="modal fade" role="dialog" aria-labelledby="modalLabel"&gt;'</span> +</span><br><span class="line">  <span class="string">'&lt;div class="modal-dialog"&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;div class="modal-content"&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;div class="modal-header"&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;button type="button" class="close" data-dismiss="modal"&gt;&lt;span aria-hidden="true"&gt;×&lt;/span&gt;&lt;span class="sr-only"&gt;Close&lt;/span&gt;&lt;/button&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;h4 class="modal-title" id="modalLabel"&gt;[Title]&lt;/h4&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;div class="modal-body"&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">   <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">  <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">  <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line"> <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\[([^\\[\\]]*?)\\]"</span>, <span class="string">'igm'</span>);</span><br><span class="line"> <span class="keyword">var</span> generateId = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"> <span class="keyword">return</span> <span class="string">'mdl'</span> + date.valueOf();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line"> options = $.extend(&#123;&#125;, &#123;</span><br><span class="line"> title: <span class="string">"操作提示"</span>,</span><br><span class="line"> message: <span class="string">"提示内容"</span>,</span><br><span class="line"> btnok: <span class="string">"确定"</span>,</span><br><span class="line"> btncl: <span class="string">"取消"</span>,</span><br><span class="line"> width: <span class="number">200</span>,</span><br><span class="line"> auto: <span class="literal">false</span></span><br><span class="line"> &#125;, options || &#123;&#125;);</span><br><span class="line"> <span class="keyword">var</span> modalId = generateId();</span><br><span class="line"> <span class="keyword">var</span> content = html.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">node, key</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">  Id: modalId,</span><br><span class="line">  Title: options.title,</span><br><span class="line">  Message: options.message,</span><br><span class="line">  BtnOk: options.btnok,</span><br><span class="line">  BtnCancel: options.btncl</span><br><span class="line"> &#125;[key];</span><br><span class="line"> &#125;);</span><br><span class="line"> $(<span class="string">'body'</span>).append(content);</span><br><span class="line"> $(<span class="string">'#'</span> + modalId).modal(&#123;</span><br><span class="line"> width: options.width,</span><br><span class="line"> backdrop: <span class="string">'static'</span></span><br><span class="line"> &#125;);</span><br><span class="line"> $(<span class="string">'#'</span> + modalId).on(<span class="string">'hide.bs.modal'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"> $(<span class="string">'body'</span>).find(<span class="string">'#'</span> + modalId).remove();</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">return</span> modalId;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line"> alert: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> options == <span class="string">'string'</span>) &#123;</span><br><span class="line">  options = &#123;</span><br><span class="line">  message: options</span><br><span class="line">  &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> id = init(options);</span><br><span class="line"> <span class="keyword">var</span> modal = $(<span class="string">'#'</span> + id);</span><br><span class="line"> modal.find(<span class="string">'.ok'</span>).removeClass(<span class="string">'btn-success'</span>).addClass(<span class="string">'btn-primary'</span>);</span><br><span class="line"> modal.find(<span class="string">'.cancel'</span>).hide();</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">  id: id,</span><br><span class="line">  on: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (callback &amp;&amp; callback <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">  modal.find(<span class="string">'.ok'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; callback(<span class="literal">true</span>); &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  hide: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (callback &amp;&amp; callback <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">  modal.on(<span class="string">'hide.bs.modal'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  callback(e);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> confirm: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> id = init(options);</span><br><span class="line"> <span class="keyword">var</span> modal = $(<span class="string">'#'</span> + id);</span><br><span class="line"> modal.find(<span class="string">'.ok'</span>).removeClass(<span class="string">'btn-primary'</span>).addClass(<span class="string">'btn-success'</span>);</span><br><span class="line"> modal.find(<span class="string">'.cancel'</span>).show();</span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">  id: id,</span><br><span class="line">  on: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (callback &amp;&amp; callback <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">  modal.find(<span class="string">'.ok'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; callback(<span class="literal">true</span>); &#125;);</span><br><span class="line">  modal.find(<span class="string">'.cancel'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; callback(<span class="literal">false</span>); &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  hide: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (callback &amp;&amp; callback <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">  modal.on(<span class="string">'hide.bs.modal'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  callback(e);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> dialog: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line"> options = $.extend(&#123;&#125;, &#123;</span><br><span class="line">  title: <span class="string">'title'</span>,</span><br><span class="line">  url: <span class="string">''</span>,</span><br><span class="line">  width: <span class="number">800</span>,</span><br><span class="line">  height: <span class="number">550</span>,</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;,</span><br><span class="line">  onShown: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; &#125;</span><br><span class="line"> &#125;, options || &#123;&#125;);</span><br><span class="line"> <span class="keyword">var</span> modalId = generateId();</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> content = dialogdHtml.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">node, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">  Id: modalId,</span><br><span class="line">  Title: options.title</span><br><span class="line">  &#125;[key];</span><br><span class="line"> &#125;);</span><br><span class="line"> $(<span class="string">'body'</span>).append(content);</span><br><span class="line"> <span class="keyword">var</span> target = $(<span class="string">'#'</span> + modalId);</span><br><span class="line"> target.find(<span class="string">'.modal-body'</span>).load(options.url);</span><br><span class="line"> <span class="keyword">if</span> (options.onReady())</span><br><span class="line">  options.onReady.call(target);</span><br><span class="line"> target.modal();</span><br><span class="line"> target.on(<span class="string">'shown.bs.modal'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (options.onReady(e))</span><br><span class="line">  options.onReady.call(target, e);</span><br><span class="line"> &#125;);</span><br><span class="line"> target.on(<span class="string">'hide.bs.modal'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'body'</span>).find(target).remove();</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用的话，在当前js中需要应用的按钮绑定的功能函数中进行调用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//e为布尔值</span></span><br><span class="line">Ewin.confirm(&#123; <span class="attr">message</span>: <span class="string">"是否确认XXX？"</span> &#125;).on(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (e) &#123;</span><br><span class="line">alert(<span class="string">'终止操作！'</span>);  <span class="comment">//e=true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">'终止操作取消！'</span>);&#125; <span class="comment">//e!=true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<p>效果图（且对页面内容有遮罩层）：<br><img src="https://img-blog.csdnimg.cn/20200402213226518.png" alt="在这里插入图片描述"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Ewin.alert(<span class="string">"操作成功！"</span>);</span><br></pre></td></tr></table></figure>
<p>balabala…</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>pom.xml解析</title>
    <url>/2020/07/23/pom-xml%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><p>pom.xml文件是Maven进行工作的主要配置文件。在这个文件中我们可以配置Maven项目的groupId、artifactId和version等Maven项目必须的元素；可以配置Maven项目需要使用的远程仓库；可以定义Maven项目打包的形式；可以定义Maven项目的资源依赖关系等等。</p>
<h2 id="pom-xml标签"><a href="#pom-xml标签" class="headerlink" title="pom.xml标签"></a>pom.xml标签</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"> &lt;!--project是pom.xml的根元素，包含了一些约束的信息，比如xlms,xsi--&gt;</span><br><span class="line">&lt;project&gt;</span><br><span class="line">        &lt;!--指定了当前pom的版本--&gt;</span><br><span class="line">         &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">        &lt;!--maven2<span class="number">.0</span>必须是这样写，现在是maven2唯一支持的版本--&gt;</span><br><span class="line">        &lt;!-- 基础设置 --&gt;</span><br><span class="line">        &lt;groupId&gt;反写公司的网址+项目名称&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;项目名称+模块名&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;当前项目版本号&lt;/version&gt;</span><br><span class="line">         &lt;!-- 默认是jar，还可以打包成war/zip/pom--&gt;</span><br><span class="line">        &lt;packaging&gt;...&lt;/packaging&gt;</span><br><span class="line">        &lt;!-- 项目描述名，一般是写项目文档的时候才使用 --&gt;</span><br><span class="line">        &lt;name&gt;...&lt;/name&gt;</span><br><span class="line">        &lt;!-- 项目的地址--&gt;</span><br><span class="line">        &lt;url&gt;...&lt;/url&gt;</span><br><span class="line">        &lt;!-- 项目的描述 --&gt;</span><br><span class="line">        &lt;description&gt;...&lt;/description&gt;</span><br><span class="line">        &lt;!-- 开发人员的列表 --&gt;</span><br><span class="line">        &lt;developers&gt;...&lt;/developers&gt;</span><br><span class="line">        &lt;!-- 许可证的信息 --&gt;</span><br><span class="line">        &lt;licenses&gt;...&lt;/licenses&gt;</span><br><span class="line">        &lt;!-- 组织信息 --&gt;</span><br><span class="line">        &lt;organization&gt;...&lt;/organization&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 依赖列表，下面可以包含多个依赖项dependency--&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">           &lt;dependency&gt;</span><br><span class="line">               &lt;!-- 指定坐标确定依赖项的位置 --&gt;</span><br><span class="line">               &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">               &lt;version&gt;&lt;/version&gt;</span><br><span class="line">               &lt;type&gt;&lt;/type&gt;</span><br><span class="line">               &lt;!-- 依赖包的依赖范围--&gt;</span><br><span class="line">               &lt;scope&gt;&lt;/scope&gt;</span><br><span class="line">               &lt;!-- 这个标签只有<span class="keyword">true</span>和<span class="keyword">false</span>两个值，是用来设置依赖是否可选 --&gt;</span><br><span class="line">               &lt;optional&gt;&lt;/optional&gt;</span><br><span class="line">               &lt;!-- 排除依赖传递列表 --&gt;</span><br><span class="line">               &lt;exclusions&gt; </span><br><span class="line">                 &lt;exclusion&gt;</span><br><span class="line">                 &lt;/exclusion&gt;  </span><br><span class="line">               &lt;/exclusions&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">         &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- 依赖管理，里面包含多个依赖，但是它并不会被运行，即不会被引用到实际的依赖中--&gt;</span><br><span class="line">         &lt;!--这个标签主要是用来定义在父模块中，供子模块继承用 --&gt;</span><br><span class="line">         &lt;dependencyManagement&gt;                              </span><br><span class="line">             &lt;dependencies&gt;</span><br><span class="line">                &lt;dependency&gt;</span><br><span class="line">                &lt;/dependency&gt;</span><br><span class="line">             &lt;/dependencies&gt;</span><br><span class="line">        &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- 常用于给构件的行为提供相应的支持 --&gt;</span><br><span class="line">          &lt;build&gt;</span><br><span class="line">            &lt;!-- 插件列表 --&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                   &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">                   &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">                   &lt;version&gt;&lt;/version&gt;</span><br><span class="line">                 &lt;/plugin&gt;</span><br><span class="line">             &lt;/plugins&gt;</span><br><span class="line">          &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 用于在子模块中对父模块的pom的继承 --&gt;</span><br><span class="line">        &lt;parent&gt;...&lt;/parent&gt;</span><br><span class="line">         &lt;!-- 用来聚合多个模块，让多个模块进行编译，不用一个一个来 --&gt;</span><br><span class="line">        &lt;modules&gt;</span><br><span class="line">          &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">          &lt;/module&gt;</span><br><span class="line">        &lt;/modules&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.dvms&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;data_view&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;data_view&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--导入Thymeleaf依赖，基于<span class="number">3</span>.x开发--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;thymeleaf-spring5&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--导入springboot和mybatis依赖 包含mybatis的核心--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--导入druid依赖，基于<span class="number">3</span>.x开发--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.22&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--导入lombok小辣椒驱动依赖,用来生成get/set方法依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;!--&lt;optional&gt;true&lt;/optional&gt;--&gt;</span><br><span class="line">            &lt;version&gt;1.18.12&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;&lt;!--自动生成有参无参构造--&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--热部署插件--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--引入pagehelper分页插件--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--kaptcha 框架--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.penggle&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;kaptcha&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--安全框架--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--Thymeleaf整合security--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;thymeleaf-extras-springsecurity5&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.0.4.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!--fork :  如果没有该项配置，devtools不会起作用，即应用不会restart --&gt;</span><br><span class="line">                    &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">                    &lt;addResources&gt;true&lt;/addResources&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>pom.xml</tag>
      </tags>
  </entry>
  <entry>
    <title>setTimeout()方法实现延时执行其他功能</title>
    <url>/2020/07/23/setTimeout-%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E6%89%A7%E8%A1%8C%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="setTimeout-方法"><a href="#setTimeout-方法" class="headerlink" title="setTimeout() 方法"></a>setTimeout() 方法</h1><p>setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。</p>
<p>提示： 1000 毫秒= 1 秒。<br>提示： 如果想重复执行可以使用 setInterval() 方法。<br>提示： 使用 clearTimeout() 方法来阻止函数的执行。</p>
<!-- more -->
<hr>
<p><strong><em>语法</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(code, milliseconds, param1, param2, ...)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>, <span class="title">milliseconds</span>, <span class="title">param1</span>, <span class="title">param2</span>, ...)</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>setTimeout()方法参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>code/function</td>
<td>必要部分，要调用一个代码串，也可以是一个函数</td>
</tr>
<tr>
<td>milliseconds</td>
<td>必要部分，执行或调用 code/function 需要等待的时间，以毫秒计，默认为 0</td>
</tr>
<tr>
<td>param1, param2, …</td>
<td>非必要部分，传给执行函数的其他参数（IE9 及其更早版本不支持该参数）</td>
</tr>
<tr>
<td><strong><em>return：</em></strong> 返回一个 ID（数字），可以将这个ID传递给 clearTimeout() 来取消执行。</td>
<td></td>
</tr>
</tbody></table>
<hr>
<h1 id="clearTimeout-方法"><a href="#clearTimeout-方法" class="headerlink" title="clearTimeout() 方法"></a>clearTimeout() 方法</h1><p>clearTimeout() 方法可取消由 setTimeout() 方法设置的定时操作。</p>
<p>clearTimeout() 方法的参数必须是由 setTimeout() 返回的 ID 值。<br>注意: 要使用 clearTimeout() 方法, 在创建执行定时操作时要使用全局变量</p>
<hr>
<p><strong><em>语法</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">clearTimeout(id_of_settimeout);</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>clearTimeout() 方法参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>d_of_setinterval</td>
<td>调用 setTimeout() 函数时所获得的返回值，使用该返回标识符作为参数，可以取消该 setTimeout() 所设定的定时执行操作</td>
</tr>
<tr>
<td><strong><em>return：</em></strong> return 0</td>
<td></td>
</tr>
</tbody></table>
<hr>
<p><strong><em>应用实例</em></strong><br>1.5秒（3000 毫秒）后弹出 “Hello JavaScript !” </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myVar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myVar = setTimeout(alertFunc, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello JavaScript!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.打开一个新窗口，5秒后将该窗口关闭</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openWin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myWindow = <span class="built_in">window</span>.open(<span class="string">"color=red"</span>, <span class="string">""</span>, <span class="string">"width=1920, height=1080"</span>);</span><br><span class="line">    myWindow.document.write(<span class="string">"&lt;p&gt;打开一个新窗口&lt;/p&gt;"</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; myWindow.close() &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.计数器功能</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;button onclick="startCount()"&gt;开始计数&lt;/button&gt;</span><br><span class="line">&lt;input type="text" id="test"&gt;</span><br><span class="line">&lt;button onclick="stopCount()"&gt;停止计数&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>点击 “开始计数” 按钮开始执行计数程序。输入框从 0 开始计算。 点击 “停止计数” 按钮停止后，可以再次点击 “开始计数” 按钮会重新开始计数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> t;</span><br><span class="line"><span class="keyword">var</span> timer_is_on = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timedCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).value = c;</span><br><span class="line">    c = c + <span class="number">1</span>;</span><br><span class="line">    t = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; timedCount() &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer_is_on) &#123;</span><br><span class="line">        timer_is_on = <span class="number">1</span>;</span><br><span class="line">        timedCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(t);</span><br><span class="line">    timer_is_on = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020050718532364.png" alt="在这里插入图片描述"></p>
<p>4.显示当前时间</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span>在页面加载时执行<span class="selector-tag">startTime</span>()<span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;body onload="startTime()"&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> h = today.getHours();</span><br><span class="line">    <span class="keyword">var</span> m = today.getMinutes();</span><br><span class="line">    <span class="keyword">var</span> s = today.getSeconds();</span><br><span class="line">    <span class="comment">// 在 numbers&lt;10 的数字前加上 0</span></span><br><span class="line">    m = checkTime(m);</span><br><span class="line">    s = checkTime(s);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"txt"</span>).innerHTML = h + <span class="string">":"</span> + m + <span class="string">":"</span> + s;</span><br><span class="line">    <span class="keyword">var</span> t = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; startTime() &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkTime</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        i = <span class="string">"0"</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5.传递参数给 Animal函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myVar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myStartFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// IE9 及其更早版本不支持</span></span><br><span class="line">    myVar = setTimeout(Animal, <span class="number">5000</span>, <span class="string">"Cat"</span>, <span class="string">"Dog"</span>);</span><br><span class="line">    <span class="comment">//使用匿名函数，则所有浏览器都支持</span></span><br><span class="line">    myVar = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; Animal(<span class="string">"Cat"</span>, <span class="string">"Dog"</span>); &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo1"</span>).innerHTML += <span class="string">"Hello "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo2"</span>).innerHTML = <span class="string">"传递给 Animal() 的参数: &lt;br&gt;"</span> </span><br><span class="line">    + param1 + <span class="string">"&lt;br&gt;"</span> + param2 + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>setTimeout()</tag>
      </tags>
  </entry>
  <entry>
    <title>利用pymysql操纵MySQl数据库</title>
    <url>/2020/07/23/%E5%88%A9%E7%94%A8pymysql%E6%93%8D%E7%BA%B5MySQl%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h1 id="MyEnvironment"><a href="#MyEnvironment" class="headerlink" title="MyEnvironment"></a>MyEnvironment</h1><ul>
<li>pymysql</li>
<li>MySQL</li>
<li>PyCharm</li>
<li>Python3.x</li>
</ul>
<hr>
<h1 id="pymysql"><a href="#pymysql" class="headerlink" title="pymysql"></a>pymysql</h1><p>pymysql是一个使Python连接到数据库的模块，它是一个纯Python库，利用pymysql可以直接通过编写数据库的语句来操纵MySQL数据库完成一系列操作。</p>
<hr>
<p>安装pysql:(安装方式有多种)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>
<p>通过输入以下代码至电脑命令控制台可查看是否安装成功：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 show PyMySQL</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="实现数据库的相关操作"><a href="#实现数据库的相关操作" class="headerlink" title="实现数据库的相关操作"></a>实现数据库的相关操作</h1><p>首先要与数据库建立连接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开数据库连接（IP地址/数据库用户名/登录密码/编码方式/端口号）</span></span><br><span class="line">database = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>,</span><br><span class="line">                              passwd=<span class="string">'123456'</span>, charset=<span class="string">'utf8'</span>, port=<span class="number">3306</span>)</span><br></pre></td></tr></table></figure>
<p>获取游标：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cur = database.cursor()</span><br></pre></td></tr></table></figure>

<p>之后需要建立数据库和数据表：（存在就不创建，防止异常）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">"CREATE DATABASE IF NOT EXISTS project"</span></span><br><span class="line"><span class="comment"># 执行创建数据库的sql</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line"><span class="comment"># 使用数据库project</span></span><br><span class="line">cur.execute(<span class="string">"use project;"</span>)</span><br><span class="line"><span class="comment"># 创建数据库表data</span></span><br><span class="line">cur.execute(<span class="string">"CREATE TABLE IF NOT EXISTS data(time timestamp primary key NOT NULL,money float NOT NULL,name varchar(30))character set utf8;"</span>)</span><br></pre></td></tr></table></figure>
<p>数据库插入数据操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql_insert = <span class="string">"""INSERT INTO  OperationRecord VALUES( %s, %s, %s)"""</span></span><br><span class="line">data = (datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>), <span class="number">100000</span>, <span class="string">'老王'</span>)</span><br><span class="line">cur.execute(sql_insert, data)</span><br></pre></td></tr></table></figure>
<p>提交插入的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">database.commit()</span><br></pre></td></tr></table></figure>
<p>这里我们也可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'--开始插入--'</span>)</span><br><span class="line">    cur.execute(sql_insert, data)</span><br><span class="line">    database.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    database.rollback()</span><br><span class="line">    print(<span class="string">'---成功插入---'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    database.close()</span><br></pre></td></tr></table></figure>
<hr>
<p>数据库更新数据列操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql_update = <span class="string">"update project.data set name = '%s' where money = '%s'"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'开始更新'</span>)</span><br><span class="line">    cur_update.execute(sql_update % (<span class="string">"update_time"</span>, <span class="string">"update_money"</span>, <span class="string">"update_name"</span>))</span><br><span class="line">    database.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    database.rollback()</span><br><span class="line">    print(<span class="string">'更新操作错误'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    database.close()</span><br></pre></td></tr></table></figure>
<hr>
<p>数据库删除数据列操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql_delete = <span class="string">"delete from project.data where name = '%s'"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'开始删除操作'</span>)</span><br><span class="line">    cur_delete.execute(sql_delete % (<span class="string">"update_name"</span>))  <span class="comment"># 像sql语句传递参数</span></span><br><span class="line">    database.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    database.rollback()</span><br><span class="line">    print(<span class="string">'数据库删除操作错误'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    database.close()</span><br></pre></td></tr></table></figure>
<hr>
<p>数据库查询数据操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sql查询语句 表名data</span></span><br><span class="line">sql = <span class="string">"select * from data"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(sql)  <span class="comment"># 执行sql语句</span></span><br><span class="line"></span><br><span class="line">    results = cur.fetchall()  <span class="comment"># 获取查询的所有记录</span></span><br><span class="line">    print(<span class="string">"time"</span>, <span class="string">"money"</span>, <span class="string">"name"</span>)</span><br><span class="line">    <span class="comment"># 遍历结果</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">        time = row[<span class="number">0</span>]</span><br><span class="line">        money = row[<span class="number">1</span>]</span><br><span class="line">        name = row[<span class="number">2</span>]</span><br><span class="line">        print(time, money, name)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    db.close()  <span class="comment"># 关闭连接</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title>setInterval()方法实现周期调用函数来完成进度条等功能设计</title>
    <url>/2020/07/23/setInterval-%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%91%A8%E6%9C%9F%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E6%9D%A5%E5%AE%8C%E6%88%90%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%AD%89%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="setInterval-方法"><a href="#setInterval-方法" class="headerlink" title="setInterval() 方法"></a>setInterval() 方法</h1><p>setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。一般与clearInterval()配合使用。</p>
<p>setInterval() 方法会不停地调用函数，直到==clearInterval() 被调用或窗口被关闭==。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。<br>提示： 1000 毫秒= 1 秒；如果你只想执行一次可以使用 setTimeout() 方法。</p>
<hr>
<p><strong><em>语法描述：</em></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setInterval(code, milliseconds);</span><br><span class="line">setInterval(function, milliseconds, param1, param2, ...)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>setInterval() 方法参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>code/function</td>
<td>必要部分，要调用一个代码串，也可以是一个函数</td>
</tr>
<tr>
<td>milliseconds</td>
<td>必要部分，周期性执行或调用 code/function 之间的时间间隔，以毫秒计</td>
</tr>
<tr>
<td>param1, param2, …</td>
<td>非必要部分，传给执行函数的其他参数（IE9 及其更早版本不支持该参数）</td>
</tr>
</tbody></table>
<p><strong><em>return</em></strong>:返回一个 ID（数字），可以将这个ID传递给clearInterval()，clearTimeout() 来取消执行setInterval() 。</p>
<hr>
<h1 id="clearInterval-方法"><a href="#clearInterval-方法" class="headerlink" title="clearInterval() 方法"></a>clearInterval() 方法</h1><p>clearInterval() 方法可取消由 setInterval() 函数设定的定时执行操作。</p>
<p>clearInterval() 方法的参数必须是由 setInterval() 返回的 ID 值。<br>注意: 要使用 clearInterval() 方法, 在创建执行定时操作时要使用==全局变量==</p>
<p><strong><em>语法描述：</em></strong><br>|clearInterval() 方法| 描述 |<br>|–|–|<br>|id_of_setinterval  |必要部分，调用 setInterval() 函数时所获得的返回值，使用该返回标识符作为参数，可以取消该 setInterval() 所设定的定时执行操作  |<br><strong><em>return</em></strong>: return 0</p>
<hr>
<p><strong><em>方法应用实例</em></strong><br>1.显示当前时间( setInterval() 方法会每秒执行一次函数，类似手表功能)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 显示当前时间( setInterval() 方法会每秒执行一次函数，类似手表功能):</span><br><span class="line"><span class="keyword">var</span> myVar = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; myTimer() &#125;, <span class="number">1000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> t = d.toLocaleTimeString();</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.使用 clearInterval() 来停止 setInterval 的执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myVar = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; myTimer() &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> t = d.toLocaleTimeString();</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myStopFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearInterval(myVar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.使用 setInterval() 和 clearInterval()来创建动态进度条<br>在javaweb中通过AJAX的get()方法和windows对象的setInterval()方法不断读取当前进度值来实现页面进度值的实时显示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"myBar"</span>);   </span><br><span class="line">  <span class="keyword">var</span> width = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> myvar = setInterval(frame, <span class="number">10</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">frame</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (width == <span class="number">100</span>) &#123;</span><br><span class="line">      clearInterval(myvar);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      width++; </span><br><span class="line">      elem.style.width = width + <span class="string">'%'</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.每 5000 毫秒切换背景颜色</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myVar = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; setColor() &#125;, <span class="number">5000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">document</span>.body;</span><br><span class="line">  x.style.backgroundColor = x.style.backgroundColor == <span class="string">"red"</span> ? <span class="string">"green"</span> : <span class="string">"red"</span>; <span class="comment">//x.style.backgroundColor = white</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  clearInterval(myVar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>? : 是一个条件运算符,是一个整体,作用类似于if else 语句<br>5.传递参数给 Animal 函数 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myVar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myStartFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// IE9 及其更早版本不支持</span></span><br><span class="line">    myVar = setInterval(Animal, <span class="number">2000</span>, <span class="string">"Cat"</span>, <span class="string">"Dog"</span>);</span><br><span class="line">    <span class="comment">//使用匿名函数，则所有浏览器都支持</span></span><br><span class="line">    myVar = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; Animal(<span class="string">"Cat"</span>, <span class="string">"Dog"</span>); &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML += <span class="string">"Animal "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo2"</span>).innerHTML = <span class="string">"传递给 Animal() 的参数: &lt;br&gt;"</span> </span><br><span class="line">    + param1 + <span class="string">"&lt;br&gt;"</span> + param2 + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myStopFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearInterval(myVar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200507175942741.png" alt="jieguo"></p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>打包可运行文件时图标无法显示的解决方法</title>
    <url>/2020/07/23/%E6%89%93%E5%8C%85%E5%8F%AF%E8%BF%90%E8%A1%8C%E6%96%87%E4%BB%B6%E6%97%B6%E5%9B%BE%E6%A0%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Hello World!<br><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<a id="more"></a>
<h1 id="Power"><a href="#Power" class="headerlink" title="Power:"></a>Power:</h1><p>PyCharm、PyQt5（pyrcc5）</p>
<hr>
<p>1.把用到的图片文件放到工程所处的文件夹下<br>2.在工程中新建TEXT格式文件，命名为resource.txt<br>3.Notepad++编辑resource.txt，插入一下代码（注意相对路径和绝对路径）后保存后更改文件后缀名为resource.qrc</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;RCC&gt;</span><br><span class="line">    &lt;qresource prefix=<span class="string">"/"</span>&gt;</span><br><span class="line">        &lt;file&gt;资源名&lt;/file&gt;</span><br><span class="line">        &lt;file&gt;资源名&lt;/file&gt;</span><br><span class="line">        &lt;file&gt;资源名&lt;/file&gt;</span><br><span class="line">        &lt;file&gt;资源名&lt;/file&gt;</span><br><span class="line">    &lt;/qresource&gt;</span><br><span class="line">&lt;/RCC&gt;</span><br></pre></td></tr></table></figure>
<p>4.使用pyrcc5进行转换得到.py文件（pyrcc5是PyQt5的附带工具）,打开PyCharm控制台输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyrcc5 -o resource.py resource.qrc</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200506180255286.png" alt="在这里插入图片描述"><br>转换成功：<br><img src="https://img-blog.csdnimg.cn/20200506180443336.png" alt="在这里插入图片描述"><br>5.将装换后的resource.py引入主程序中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> resource</span><br></pre></td></tr></table></figure>
<p>6.在程序中的写法：<br><strong>注意</strong>：==资源名称还是原来的名称，前面的“：”冒号不能少==</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.setWindowIcon(QIcon(<span class="string">':/icon1.png'</span>))  <span class="comment"># 设置窗体标题图标</span></span><br><span class="line">self.button.setIcon(QIcon(<span class="string">":/520.png"</span>))</span><br></pre></td></tr></table></figure>
<p>7.最后使用pyinstaller打包可运行文件: <a href="https://blog.csdn.net/cjw12581/article/details/104373524" target="_blank" rel="noopener">Python项目之多文件打包为可运行文件</a></p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>可运行文件</tag>
        <tag>pyinstaller</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库学习与应用之SQL语法及常用操作</title>
    <url>/2020/07/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%BA%94%E7%94%A8%E4%B9%8BSQL%E8%AF%AD%E6%B3%95%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h1><p>SQL：Structed Query Language 结构化查询语句</p>
<p><strong><em>注意：</em></strong></p>
<ol>
<li>在数据库操作中，所有的命令和关键字以及自定义名称都==不区分大小写==，但是一般我们：<strong>关键字部分使用全部大写，自定义名称（数据库名、数据库表名、字段名）用小写字母开头</strong>；</li>
<li>字符串使用单引号或者双引号，<strong>一般使用单引号</strong>，方便在java/PHP/HTML程序和代码字符串类型的参数进行嵌套；</li>
<li>所有的符号都<strong>必须是英文状态的符号</strong>，数据库高版本可以直接使用双引号；</li>
<li>部分参数含义：</li>
</ol>
<table>
<thead>
<tr>
<th>参数名</th>
<th>缩写</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>host</td>
<td>-h</td>
<td>服务器IP地址</td>
</tr>
<tr>
<td>port</td>
<td>-P</td>
<td>服务器端口号</td>
</tr>
<tr>
<td>user</td>
<td>-u</td>
<td>数据库用户名</td>
</tr>
<tr>
<td>pasword</td>
<td>-p</td>
<td>数据库的密码</td>
</tr>
<tr>
<td>—</td>
<td></td>
<td></td>
</tr>
<tr>
<td># SQL语句</td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据库创建 :</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Create database db_name;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>创建时可先判断是否存在 :</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Create database if not exits db_name</td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据库删除 :</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Drop database db_name;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>删除时可先判断是否存在 :</td>
<td></td>
<td></td>
</tr>
<tr>
<td>drop database if exits db_name</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据库表创建 :</td>
<td></td>
<td></td>
</tr>
<tr>
<td>create table table_name (字段1 数据类型 , 字段2 数据类型);</td>
<td></td>
<td></td>
</tr>
<tr>
<td>eg : create table demo (id int , name varchar(20));</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据库表删除 :</td>
<td></td>
<td></td>
</tr>
<tr>
<td>drop table table_name;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>eg: drop table demo;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据库表插入数据 :</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Insert into 表名 [(字段1 , 字段2 , ….)] values (值1 , 值2 , …..);</td>
<td></td>
<td></td>
</tr>
<tr>
<td>如果向表中的每个字段都插入一个值,那么前面 [ ] 括号内字段名可写也可不写</td>
<td></td>
<td></td>
</tr>
<tr>
<td>eg : insert into demo (id,username) values (0,’cjw’);</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>查询数据库表中所有数据 :</td>
<td></td>
<td></td>
</tr>
<tr>
<td>select * from table_name;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>查询数据库表中指定字段的数据 :</td>
<td></td>
<td></td>
</tr>
<tr>
<td>select 字段1 , 字段2 from table_name;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>eg : select id,username from demo where id=1 order by desc;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>更新数据库表中指定字段的数据：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Update table_name set 字段名=’新值’ [, 字段2 =’新值’ , …..][where id=id_num] [order by 字段 顺序]</td>
<td></td>
<td></td>
</tr>
<tr>
<td>eg : update demo set username=’cjw’ where id=1;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Where和order语句也可用于查询select 与删除delete</td>
<td></td>
<td></td>
</tr>
<tr>
<td>删除整个数据库表中的信息 :</td>
<td></td>
<td></td>
</tr>
<tr>
<td>delete from table_name;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>删除数据库表中指定条件的语句 :</td>
<td></td>
<td></td>
</tr>
<tr>
<td>delete from table_name where 条件语句 ; 条件语句如 : id=1;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>创建一个数据库用户:</td>
<td></td>
<td></td>
</tr>
<tr>
<td>CREATE USER username1 identified BY ‘password’</td>
<td></td>
<td></td>
</tr>
<tr>
<td>创建多个数据库用户:</td>
<td></td>
<td></td>
</tr>
<tr>
<td>CREATE USER root identified BY ‘password’ , user1 IDENTIFIED BY ‘password’….</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>用户的权限控制：grant 库，表级的权限控制 : 将某个库中的某个表的控制权赋予某个用户</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Grant all ON db_name.table_name TO user_name [ indentified by ‘password’ ];</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据库表中增加一个字段：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>alter table table_name add column (字段名 字段类型);</td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据库表中指定字段插入的位置：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>alter table table_name add column 字段名 字段类型 after 某字段；</td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据库表中删除一个字段：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>alter table table_name drop字段名;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据库表中修改字段名称/类型</td>
<td></td>
<td></td>
</tr>
<tr>
<td>alter table table_name change 旧字段名 新字段名 新字段的类型;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>修改数据库表名：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>alter table table_name rename to new_table_name;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>清空数据库表中的所有数据 ：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>truncate table table_name;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>增加主键，外键，约束，索引：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>约束（主键Primary key、唯一性Unique、非空Not Null）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>自动增张 auto_increment</td>
<td></td>
<td></td>
</tr>
<tr>
<td>外键Foreign key—–与reference table_name(col_name列名)配合使用，建表时单独使用</td>
<td></td>
<td></td>
</tr>
<tr>
<td>删除多个表中有关联的数据—-设置foreign key 为set null</td>
<td></td>
<td></td>
</tr>
<tr>
<td>———————————————————————–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>查看数据库当前引擎：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>SHOW CREATE TABLE table_name;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>修改数据库引擎 ：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ALTER TABLE table_name ENGINE=MyISAM</td>
<td>InnoDB;</td>
<td></td>
</tr>
</tbody></table>
<hr>
<h1 id="SQL常用操作"><a href="#SQL常用操作" class="headerlink" title="SQL常用操作"></a>SQL常用操作</h1><ul>
<li>create database name; 创建数据库  </li>
<li>use databasename; 选择数据库  </li>
<li>drop databasename 直接删除数据库，不提示  </li>
<li>mysqladmin drop databasename 删除数据库前，有提示  </li>
<li>show tables; 显示数据库表  </li>
<li>describe（DESC） tablename; 数据库表的详细描述  </li>
<li>select * from tablename; 查询数据库表 </li>
<li>查询数据库表的记录总数(三种方法) select count(<em>) from tablename;<br>或者 select count(</em>) as num from tablename;<br>或者 select count(*) as total from tablename; select 中加上distinct去除重复字段  </li>
<li>select version(),current_date; 显示当前mysql版本和当前日期mysql的启动与停止 </li>
<li>启动MySQL服务 net start mysqlversion<br>停止MySQL服务 net stop mysqlversion </li>
<li>show status;数据库状态信息参数解析(数据库连接后输入）</li>
<li>alter table users character set GBK;解决中文乱码（utf-8）</li>
</ul>
<hr>
<h1 id="SQL语句运用举例"><a href="#SQL语句运用举例" class="headerlink" title="SQL语句运用举例:"></a>SQL语句运用举例:</h1><p>　   　<strong><em>——————————————————建表 —————————————————————-</em></strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">users</span> (<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,nikename <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,<span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span>,address <span class="built_in">varchar</span>(<span class="number">200</span>), reg_date <span class="built_in">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">CURRENT_TIMESTAMP</span>);</span><br></pre></td></tr></table></figure>
<p><strong><em>———————————————–建表时设置外键———————————————————-</em></strong> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> demo (<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="keyword">content</span> longtext <span class="keyword">not</span> <span class="literal">null</span>,userid <span class="built_in">int</span>,<span class="keyword">constraint</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (userid) <span class="keyword">references</span> <span class="keyword">users</span>(<span class="keyword">id</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p><strong><em>———————————————–建表时不设置外键———————————————————-</em></strong> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> demo (<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="keyword">content</span> longtext <span class="keyword">not</span> <span class="literal">null</span>,userid <span class="built_in">int</span>);</span><br></pre></td></tr></table></figure>
<p><strong><em>———————————————–给demo表设置外键 ——————————————————-</em></strong> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> demo <span class="keyword">add</span> <span class="keyword">constraint</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (userid) <span class="keyword">references</span> <span class="keyword">users</span>(<span class="keyword">id</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p><strong><em>———————————————向表中同时插入多条数据 —————————————————</em></strong></p>
<p>insert into users (id,name,password,address) values (1,’tom’,’123456’,null),(4,’li’,’654321’,’天津’),(null,’韩梅梅’,’456789’, ‘山西’);<br><strong><em>———————————————多表查询指定字段所有信息 ————————————————</em></strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> demo.id,demo.content,users.* <span class="keyword">from</span> <span class="keyword">users</span>,demo <span class="keyword">where</span> users.id=<span class="number">1</span> <span class="keyword">and</span> demo.userid=users.id <span class="keyword">order</span> <span class="keyword">by</span> demo.id <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>sql语法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库学习与应用之什么是数据库</title>
    <url>/2020/07/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%BA%94%E7%94%A8%E4%B9%8B%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>数据库，是一个长期存储在计算机内的、有组织的、有共享的、统一管理的数据集合。</p>
<p>常用的数据库有Access、Oracle、Mysql、SQL Server、SQLite等；</p>
<p>数据库中的数据都有一定规律结构，相同类型的数据放在一起，不同类型的数据之间相互隔离；<br>数据库由统一的规则来读写，有SQL语言专门用来读写数据库，一般都是用程序来读写数据库的内容。</p>
<p>数据库支持的软件模式：<br>B/S：Browser/Server （浏览器/服务器）（淘宝）<br>C/S：Client/Server （客户端/服务器）（QQ、微信）</p>
<hr>
<h1 id="常用的数据库"><a href="#常用的数据库" class="headerlink" title="常用的数据库"></a>常用的数据库</h1><table>
<thead>
<tr>
<th>数据库应用</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>MySQL数据库</td>
<td>小型数据库管理系统的数据库，由瑞典MySQLAB公司开发。MySQL被广泛地应用在Internet上的中小型网站当中</td>
</tr>
<tr>
<td>SqlServer数据库</td>
<td>中型数据库软件，真正的客户/服务器体系结构，图形化的用户界面，数据库管理方式更加直观和简单</td>
</tr>
<tr>
<td>Oracle数据库</td>
<td>大型企业级数据库，这是一款比较典型的客户/服务器(CLIENT/SERVER)或B/S体系结构的数据库之一，目前世界上使用最为广泛的数据库管理系统</td>
</tr>
<tr>
<td>Access数据库</td>
<td>小型的数据库，关联式数据序管理型系统的数据库，通常是被用来开发Web应用程序</td>
</tr>
</tbody></table>
<hr>
<h1 id="数据库可视化管理工具"><a href="#数据库可视化管理工具" class="headerlink" title="数据库可视化管理工具"></a>数据库可视化管理工具</h1><p><strong><em>1. MySQL Workbench</em></strong><br>MySQL Workbench为数据库管理员、程序开发者和系统规划师提供可视化设计、模型建立、以及数据库管理功能。它包含了用于创建复杂的数据建模ER模型，正向和逆向数据库工程，也可以用于执行通常需要花费大量时间和需要的难以变更和管理的文档任务。MySQL工作台可在Windows，Linux和Mac上使用；<br><img src="https://img-blog.csdnimg.cn/20200512171804371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong><em>2. Navicat</em></strong><br>Navicat是一个桌面版MySQL数据库管理和开发工具。Navicat使用图形化的用户界面，可以让用户使用和管理更为轻松。支持中文，有免费版本提供；<br><img src="https://img-blog.csdnimg.cn/20200512171817481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>3. MySQLDumper</strong><br>MySQLDumper使用PHP开发的MySQL数据库备份恢复程序，解决了使用PHP进行大数据库备份和恢复的问题，数百兆的数据库都可以方便的备份恢复，不用担心网速太慢导致中间中断的问题，非常方便易用；</p>
<hr>
<h1 id="数据库访问方式"><a href="#数据库访问方式" class="headerlink" title="数据库访问方式"></a>数据库访问方式</h1><p>利用数据库管理工具或者编写程序来访问数据库。当然，数据库和访问数据库可以跨空间进行（本地和远程）<br>连接：数据库管理工具、编程语言（Java、PyThon等）</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库学习与应用之利用cmd命令操纵数据库(上）</title>
    <url>/2020/07/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%A9%E7%94%A8cmd%E5%91%BD%E4%BB%A4%E6%93%8D%E7%BA%B5%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"><br><em>1.在DOS下进入目录mysql\bin</em><br>C: \Users\Adninistrator&gt;D:<br>D:&gt;cd D:\mysql-5.7.22-win32\bin</p>
<hr>
<p><em>2.然后输入以下命令来操纵数据库：</em></p>
<p><em>2.1 连接数据库</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">D:\mysql-5.7.22-win32\bin&gt;mysql -h localhost -u root -p123456</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200511203407459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="连接数据库"></p>
<hr>
<p>2.2 显示本地所有数据库（==所有的命令都以;结束==）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020051120381460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.3创建和删除数据库：<br>创建和删除时可先判断是否存在，可写成 :create/drop database if exits db_name ，数据库中表的创建同理；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200511204707883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<p>2.4 操作数据库中的数据表：<br>2.4.1 选择当前要操作的主数据库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> 数据库名;</span><br></pre></td></tr></table></figure>
<p>2.4.2 显示当前主数据库的所有数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br></pre></td></tr></table></figure>
<p>2.4.3 查询表 显示表中的所有记录，* (表示所有字段)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure>
<p>2.4.4 查询指定字段的数据 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> , 字段<span class="number">2</span> <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure>

<p>2.4.5 查看表的结构：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DESC table_name;</span><br><span class="line"><span class="keyword">Describe</span> table_name;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure>
<p>2.4.6 删除整个表中的所以信息 : </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020051120565533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.4.7 显示数据表创建时的全部信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> table_name;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200512164910386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<p>2.5 创建和删除表：<br>2.5.1 创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(字段名<span class="number">1</span> 字段类型 字段的约束（可省略）, 字段名<span class="number">1</span> 字段类型 字段的约束（可省略）,……);</span><br></pre></td></tr></table></figure>
<p>例：create table cjw (id int , username char(20));<br>2.5.2 删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200511210938836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<p>2.6 插入数据操作：<br>如果向表中的每个字段都插入一个值,那么前面 [ ] 括号内字段名可写也可以不写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> table_name [(字段<span class="number">1</span> , 字段<span class="number">2</span> , ….)] <span class="keyword">values</span> (值<span class="number">1</span> , 值<span class="number">2</span> , …..);</span><br></pre></td></tr></table></figure>
<p>例如：insert into cjw (id,username) values (0,’tree’);<br><img src="https://img-blog.csdnimg.cn/2020051121161757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.7 更新（修改）和删除数据操作：<br>2.7.1 更新指定数据 , 更新某一个字段的数据（不是更新字段名）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Update</span> table_name <span class="keyword">set</span> 字段名=’修改值’ [, 字段<span class="number">2</span> =’修改值’ , …..][<span class="keyword">where</span> <span class="keyword">id</span>=id_num] [<span class="keyword">order</span> <span class="keyword">by</span> 字段 顺序]</span><br></pre></td></tr></table></figure>
<p>例如 : update cjw set username=’marry’ where id=0;<br>2.7.2 删除表中指定条件的语句 :<br>在删除全部记录的同时将自增id的增长量也一并清零<br>条件删除：DELETE FROM 表名 WHERE  条件<br>where中的条件:  [ 字段名 运算符 字段值  ]构成<br>运算符:= != &lt;&gt; &gt; &lt; &gt;= &lt;=  is null / is  not null<br>多个条件:   and表示且  条件1 and 条件2，or 表示或，not 表示非</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> 条件语句 ;</span><br></pre></td></tr></table></figure>
<p>例如：delete from cjw where id=0;<br><img src="https://img-blog.csdnimg.cn/20200511212828125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<p> 2.8 创建数据库用户<br> 一次创建一个或多个数据库用户 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> username1 <span class="keyword">identified</span> <span class="keyword">BY</span> ‘<span class="keyword">password</span>’ , username2 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> ‘<span class="keyword">password</span>’….</span><br></pre></td></tr></table></figure>

<p>例如：CREATE USER root identified BY ‘123456’ , cjw IDENTIFIED BY ‘5201314’…. </p>
<hr>
<p><strong><em>Contiue……</em></strong></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库学习与应用之利用cmd命令操纵数据库(下）</title>
    <url>/2020/07/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%A9%E7%94%A8cmd%E5%91%BD%E4%BB%A4%E6%93%8D%E7%BA%B5%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"><br><strong><em>1. 数据库用户的权限控制：</em></strong><br>（数据表级的权限控制 : 将某个库中的某个表的控制权赋予某个用户）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Grant</span> <span class="keyword">all</span> <span class="keyword">ON</span> db_name.table_name <span class="keyword">TO</span> user_name [ indentified <span class="keyword">by</span> ‘<span class="keyword">password</span>’ ];</span><br></pre></td></tr></table></figure>
<p><strong><em>2. 修改数据库表中结构操作：</em></strong><br>2.1 增加一个表中的字段格式： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> <span class="keyword">column</span> (字段名 字段类型);</span><br></pre></td></tr></table></figure>
<p>2.2 指定表中的字段插入的位置： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> <span class="keyword">column</span> 字段名 字段类型 <span class="keyword">after</span> 某字段；</span><br></pre></td></tr></table></figure>
<p>2.3 删除一个表中的字段： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span>字段名;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200512121230302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200512121244496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.4 修改表中字段名称/类型 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">change</span> 旧字段名 新字段名 新字段的类型;</span><br></pre></td></tr></table></figure>
<p>2.5 改表的名字 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">rename</span> <span class="keyword">to</span> table_new;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200512121838873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.6 一次性清空表中的所有数据 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> table_name;</span><br></pre></td></tr></table></figure>
<p>2.7 数据库表字段更新: </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span>  table_name</span><br><span class="line">-&gt; <span class="keyword">set</span> sex=<span class="string">'不详'</span> </span><br><span class="line">-&gt; <span class="keyword">where</span> name_id=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200512124521229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong><em>3. 显示当前数据库版本和日期 ：</em></strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>(),<span class="keyword">current_date</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200512164247799.png" alt="在这里插入图片描述"></p>
<hr>
<ol start="4">
<li>退出操作</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200512165342897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库日常之修改MySQL数据库密码的方法</title>
    <url>/2020/07/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A5%E5%B8%B8%E4%B9%8B%E4%BF%AE%E6%94%B9MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="1-windows下利用CMD命令修改"><a href="#1-windows下利用CMD命令修改" class="headerlink" title="1.windows下利用CMD命令修改"></a>1.windows下利用CMD命令修改</h1><p>开始时如果用户user没有密码，则 -p 旧密码 一项就可以省略；<br>修改格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -hlocalhost -u root -p 旧密码 password 新密码</span><br></pre></td></tr></table></figure>
<p>修改步骤：(按回车键Enter执行命令行）<br>1.首先在DOS下进入目录mysql\bin<br>C: \Users\Adninistrator&gt;D:<br>D:&gt;cd D:\mysql-5.7.22-win32\bin<br>2.然后输入以下命令：<br>D:\mysql-5.7.22-win32\bin&gt;mysql -hlocalhost -u root -p 111111 password 123456</p>
<hr>
<h1 id="2-在MySQL环境中修改"><a href="#2-在MySQL环境中修改" class="headerlink" title="2.在MySQL环境中修改"></a>2.在MySQL环境中修改</h1><p>MySQL命令结束后都带一个分号作为命令结束符<br>修改格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mysql.user <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>) <span class="keyword">WHERE</span> <span class="keyword">User</span>=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure>
<p>(按回车键Ctrl+Shift+Enter执行命令行）<br>mysql&gt; UPDATE mysql.user SET password=PASSWORD(‘123456’) WHERE User=’root’;<br>运行完这行之后会提示下面的信息：<br>Query OK, 0 rows affected (0.00 sec)<br>Rows matched: 2  Changed: 0  Warnings: 0<br>这时候还需要运行下面一句，否则密码不会被修改：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure>
<p>下面运行结果代表修改成功：<br>Query OK, 0 rows affected (0.16 sec)<br>然后显示当前的user：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="3-在MySQL和Navicat中直接修改"><a href="#3-在MySQL和Navicat中直接修改" class="headerlink" title="3.在MySQL和Navicat中直接修改"></a>3.在MySQL和Navicat中直接修改</h1><p>3.1 MySQL Workbench<br><img src="https://img-blog.csdnimg.cn/20200511115031892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.2 Navicat<br>1.连接初始进入<br>2.点击用户<br>3.右键编辑root用户<br>4.修改密码，授权数据库操作权限<br>5.将链接密码修改为以上设置的密码即可（右键连接属性）<br><img src="https://img-blog.csdnimg.cn/20200511115707279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>密码修改</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot application.properties 配置及参数配置详情介绍</title>
    <url>/2020/07/22/springboot-application-properties-%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E8%AF%A6%E6%83%85%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"><br>application.properties：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#server.port=8080</span></span><br><span class="line"><span class="comment">#server.servlet.context-path=/index #访问路径设置</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.datasource.url</span> <span class="string">=</span> <span class="string">jdbc:mysql://localhost:3306/ems?characterEncoding=UTF-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="string">spring.datasource.username</span> <span class="string">=</span> <span class="string">root</span></span><br><span class="line"><span class="string">spring.datasource.password</span> <span class="string">=</span> <span class="number">123456</span></span><br><span class="line"><span class="string">spring.datasource.driverClassName</span> <span class="string">=</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.type</span> <span class="string">=</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"><span class="string">mybatis.mapper-locations</span> <span class="string">=</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="string">mybatis.type-aliases-package</span> <span class="string">=</span> <span class="string">com.dvms.entity</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.resources.static-locations</span> <span class="string">=</span> <span class="string">classpath:/templates/,classpath:/static/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pagehelper分页插件配置</span></span><br><span class="line"><span class="string">pagehelper.helperDialect=mysql</span></span><br><span class="line"><span class="string">pagehelper.reasonable=true</span></span><br><span class="line"><span class="string">pagehelper.supportMethodsArguments=true</span></span><br><span class="line"><span class="string">pagehelper.params=count=countSql</span></span><br></pre></td></tr></table></figure>

<hr>
<p>查看参数配置：<br><a href="https://blog.csdn.net/true_hsf/article/details/77893481" target="_blank" rel="noopener">spring boot application.properties 配置参数详情</a>：</p>
<h3 id="multipart"><a href="#multipart" class="headerlink" title="multipart"></a>multipart</h3><p>multipart.enabled 开启上传支持（默认：true）</p>
<p>multipart.file-size-threshold: 大于该值的文件会被写到磁盘上</p>
<p>multipart.location 上传文件存放位置</p>
<p>multipart.max-file-size最大文件大小</p>
<p>multipart.max-request-size 最大请求大小</p>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>server.address 服务器地址</p>
<p>server.port 服务器端口</p>
<p>server.context-parameters.[param name] 设置 servlet 上下文参数</p>
<p>server.context-path 应用上下文路径</p>
<h3 id="Jsp-servelt"><a href="#Jsp-servelt" class="headerlink" title="Jsp-servelt"></a>Jsp-servelt</h3><p>server.jsp-servelt.class-name 针对jsp 使用的 Servlet 类名（默认：org.apache.jasper.servlet.JspServlet）</p>
<p>server.jsp-servlet.registered JspServelt 是否要注册到内嵌的 Servlet 容器里（默认 true）</p>
<p>server.jsp-servlet.init-parameters[param name] 设置 Jsp Servlet 初始化参数</p>
<p>server.servlet-path主分发器 Servlet 的路径（默认：/）</p>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>server.session.cookie.domain 回话 Cookie 的域</p>
<p>server.session.cookie.comment Cookie 注释</p>
<p>server.session.cookie.max-age Cookie 最大保存时间（单位 s）</p>
<p>server.session.cookie.name Cookie 名称</p>
<p>server.session.cookie.timeout 超时时间</p>
<h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><p>server.tomcat.accesslog.directory 创建日志文件的目录</p>
<p>server.tomcat.accesslog.enabled 是否开启访问日志（默认：false）</p>
<p>server.tomcat.accesslog.pattern 访问日志的格式（默认：common）</p>
<p>server.tomcat.accesslog.prefix日志名前缀（默认：access_log）</p>
<p>server.tomcat.accesslog.suffix 日志名后缀（默认：.log）</p>
<p>server.tomcat.max-http-header-sizeHttp 消息头最大字节数（默认：0）</p>
<p>server.tomcat.uri-encoding 用来解码 URI 的字符编码</p>
<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><p>spring.cache.cache-names 如果底层缓存管理器支持缓存名的话，可以在这里指定要创建的缓存名列表，用逗号分 隔。通常这会禁用运行时创建其他额外缓存的能力。</p>
<p>spring.cache.config 用来初始化 EhCache 的配置文件位置</p>
<p>spring.cache.guava.spec 用来创建缓存 Spec</p>
<p>spring.cache.hazelcast.config 用来初始化 Hazeleast 的配置文件位置</p>
<p>spring.cache.infinispan.config 用来初始化 Infinispan 配置文件位置</p>
<p>spring.cache.jcache.config用来初始化缓存管理器的配置文件的位置，配置文件依赖于底层的缓存实现</p>
<p>spring.cache.jcache.provider CachingProvider 实现的全限定类名，用来获取 JSR-107 兼容的缓存管理器，仅在 Classpath 里有不只一个 JSR-107 实现时才需要这个属性。</p>
<p>spring.cache.type 缓存类型，默认根据环境自动检测</p>
<h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>spring.data.jpa.repositories.enabled 开启 JPA 仓库（默认：true）</p>
<p>spring.data.mongodb.authentication-database 身份认证数据库名</p>
<p>spring.data.mongodb.database 数据库名</p>
<p>spring.data.mongodb.field-naming-strategy 要使用的 FieldNamingStrategy 的全限定名。</p>
<p>spring.data.mongodb.grid.fs.database GridFS 数据库名称</p>
<p>spring.data.mongodb.host MongoDB 服务器地址</p>
<p>spring.data.mongodb.username MongoDB 账号</p>
<p>spring.data.mongodb.passwordMongoDB 密码</p>
<p>spring.data.mongodb.port 端口号</p>
<p>spring.data.mongodb.repositories.enabled 开启 Mongo 仓库（默认值：true）</p>
<p>spring.data.mongodb.uri Mongo 数据库 URI。设置了该属性后就主机和端口号会被忽略。（默认值： mongodb:// localhost/test）</p>
<p>spring.data.rest.base-path 用于发布仓库资源的基本路径</p>
<p>spring.data.rest.default-page-size 分页数据的默认页大小（默认：20）</p>
<p>spring.data.rest.limit-param-name用于标识一次返回多少记录的 URL 查询字符串参数名。（默认值： size ）</p>
<p>spring.data.rest.max-page-sieze: 最大分页大小（默认：1000）</p>
<p>spring.data.rest.page-param-name URL 查询字符串参数的名称，用来标识返回哪一页。（默认值： page ）</p>
<p>spring.data.rest.return-body-on-create 在创建实体后是否返回一个响应体（默认：false）</p>
<p>spring.data.rest.return-body-on-update 在更新实体后是否返回一个响应体（默认：false）</p>
<p>spring.data.rest.sort-param-name URL 查询字符串参数的名称，用来表示结果排序的方向（默认：name）</p>
<p>spring.data.solr.host Solr 的主机地址。如果设置了 zk-host 则忽略该属性。（默认值： <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a>: 8983/solr ）</p>
<p>spring.data.solr.repositories.enabled 开启 solr 仓库（默认：true）</p>
<p>spring.data.solr.zk-host zk 主机地址，格式为 “主机 - 端口”</p>
<p>spring.datasource.allow-pool-suspension 是否允许池暂停（pool suspension）。在开启池暂停后会有性能会受到一定影响，除非你 真的需要这个功能（例如在冗余的系统下），否则不要开启它。该属性只在使用 Hikari 数 据库连接池时有用。（默认值： false 。）</p>
<h3 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h3><p>spring.datasource.name 数据源的名称。</p>
<p>spring.datasource.username 数据库的登录用户名。</p>
<p>spring.datasource.password 数据库的登录密码。</p>
<p>spring.datasource.url 数据库的 JDBC URL。</p>
<p>spring.datasource.jdbc-url 用来创建连接的 JDBC URL。</p>
<p>spring.datasource.driver-class-name JDBC 驱动的全限定类名。默认根据 URL 自动检测。</p>
<p>spring.datasource.pool-name 连接池名称。</p>
<p>spring.datasource.max-active 连接池中的最大活跃连接数。</p>
<p>spring.datasource.connection-timeout连接超时（单位毫秒）</p>
<p>spring.datasource.max-age 连接池中连接的最长寿命。</p>
<p>spring.datasource.max-idle 连接池中的最大空闲连接数。</p>
<p>spring.datasource.max-lifetime 连接池中连接的最长寿命（单位为毫秒）。</p>
<p>spring.datasource.max-open-prepared-statements 开启状态的 PreparedStatement 的数量上限。</p>
<p>spring.datasource.max-wait 连接池在等待返回连接时，最长等待多少毫秒再抛出异常。</p>
<p>spring.datasource.maximum-pool-size 连接池能达到的最大规模，包含空闲连接的数量和使用中的连接数量。</p>
<p>spring.datasource.min-evictable-idle-time-millis 一个空闲连接被空闲连接释放器（如果存在的话）优雅地释放前，最短会在连接池里停 留多少时间。</p>
<p>spring.datasource.min-idle 连接池里始终应该保持的最小连接数。（用于 DBCP 和 Tomcat 连接池。）</p>
<p>spring.datasource.minimum-idle: HikariCP 试图在连接池里维持的最小空闲连接数。</p>
<p>spring.datasource.alternate-username-allowed 是否允许其它用户名</p>
<p>spring.datasource.auto-commit 更新操作是否自动提交</p>
<p>spring.datasource.abandon-when-percentage-full 一个百分比形势的阈值，超过该阈值则关闭并报告被弃用的连接</p>
<p>spring.datasource.catalog 默认的 Catalog 名称</p>
<p>spring.datasource.commit-on-return 在连接归还时，连接池是否要提交挂起的事务</p>
<p>spring.datasource.connection-init-sql 在所有新连接创建时都会执行的 SQL 语句，该语句会在连接加入连接池前执行。</p>
<p>spring.datasource.connection-init-sqls 在物理连接第一次创建时执行的 SQL 语句列表。（用于 DBCP 连接池。）</p>
<p>spring.datasource.connection-properties.[key] 设置创建连接时使用的属性。（用于 DBCP 连接池。）</p>
<p>spring.datasource.continue-on-error 初始化数据库时发生错误不要终止。（默认值： false）</p>
<p>spring.datasource.data 指向数据（数据库操纵语言，Data Manipulation Language，DML）脚本资源的引用。</p>
<p>spring.datasource.data-source-class-name 用于获取连接的数据源的全限定类名。</p>
<p>spring.datasource.data-source-jndi 用于获取连接的数据源的 JNDI 位置。</p>
<p>spring.datasource.data-source-properties.[key] 设置创建数据源时使用的属性。（用于 Hikari 连接池。）</p>
<p>spring.datasource.db-properties 设置创建数据源时使用的属性。（用于 Tomcat 连接池。）</p>
<p>spring.datasource.default-auto-commit 连接上的操作是否自动提交。</p>
<p>spring.datasource.default-catalog 连接的默认 Catalog。</p>
<p>spring.datasource.default-read-only 连接的默认只读状态。</p>
<p>spring.datasource.default-transaction-isolation 连接的默认事务隔离级别。</p>
<p>spring.datasource.fair-queue 是否以 FIFO 方式返回连接。</p>
<p>spring.datasource.health-check-properties.[key] 设置要纳入健康检查的属性。（用于 Hikari 连接池。）</p>
<p>spring.datasource.idle-timeout 连接池中的连接能保持闲置状态的最长时间，单位为毫秒。（默认值： 10 。）</p>
<p>spring.datasource.ignore-exception-on-pre-load 初始化数据库连接池时是否要忽略连接。</p>
<p>spring.datasource.init-sql在连接第一次创建时运行的自定义查询。</p>
<p>spring.datasource.initial-size 在连接池启动时要建立的连接数。</p>
<p>spring.datasource.initialization-fail-fast 在连接池创建时，如果达不到最小连接数是否要抛出异常。（默认值： true 。）</p>
<p>spring.datasource.initialize 使用 data.sql 初始化数据库。（默认值： true 。）</p>
<p>spring.datasource.isolate-internal-queries 是否要隔离内部请求。（默认值： false 。）</p>
<p>spring.datasource.jdbc-interceptors 一个分号分隔的类名列表，这些类都扩展了 JdbcInterceptor 类。这些拦截器会插入 java.sql.Connection 对象的操作链里。（用于 Tomcat 连接池。）</p>
<p>spring.datasource.jmx-enabled 开启 JMX 支持（如果底层连接池提供该功能的话）。（默认值： false 。）</p>
<p>spring.datasource.jndi-name 数据源的 JNDI 位置。设置了该属性则忽略类、URL、用户名和密码属性。</p>
<p>spring.datasource.leak-detection-threshold 用来检测 Hikari 连接池连接泄露的阈值，单位为毫秒。</p>
<p>spring.datasource.log-abandoned 是否针对弃用语句或连接的应用程序代码记录下跟踪栈。用于 DBCP 连接池。（默认值： false 。）</p>
<p>spring.datasource.log-validation-errors 在使用 Tomcat 连接池时是否要记录验证错误。</p>
<p>spring.datasource.login-timeout 连接数据库的超时时间（单位为秒）。</p>
<p>spring.datasource.num-tests-per-eviction-run 空闲对象释放器线程（如果存在的话）每次运行时要检查的对象数。</p>
<p>spring.datasource.platform 在 Schema 资源（schema-${platform}.sql）里要使用的平台。（默认值： all 。）</p>
<p>spring.datasource.pool-prepared-statements 是否要将 Statement 放在池里。</p>
<p>spring.datasource.propagate-interrupt-state 对于等待连接的中断线程，是否要传播中断状态。</p>
<p>spring.datasource.read-only 在使用 Hikari 连接池时将数据源设置为只读。</p>
<p>spring.datasource.register-mbeans Hikari 连接池是否要注册 JMX MBean。</p>
<p>spring.datasource.remove-abandoned 被弃用的连接在到达弃用超时后是否应该被移除。</p>
<p>spring.datasource.remove-abandoned-timeout 连接在多少秒后应该考虑弃用。</p>
<p>spring.datasource.rollback-on-return 在连接归还连接池时，是否要回滚挂起的事务。</p>
<p>spring.datasource.schema Schema（数据定义语言，Data Definition Language，DDL）脚本资源的引用。</p>
<p>spring.datasource.separator SQL 初始化脚本里的语句分割符。（默认值： ; 。）</p>
<p>spring.datasource.sql-script-encoding SQL 脚本的编码。</p>
<p>spring.datasource.suspect-timeout 在记录一个疑似弃用连接前要等待多少秒。</p>
<p>spring.datasource.test-on-borrow 从连接池中借用连接时是否要进行测试。</p>
<p>spring.datasource.test-on-connect 在建立连接时是否要进行测试。</p>
<p>spring.datasource.test-on-return 在将连接归还到连接池时是否要进行测试。</p>
<p>spring.datasource.test-while-idle 在连接空闲时是否要进行测试。</p>
<p>spring.datasource.time-between-eviction-runs-millis 在两次空闲连接验证、弃用连接清理和空闲池大小调整之间睡眠的毫秒数。</p>
<p>spring.datasource.transaction-isolation 在使用 Hikari 连接池时设置默认事务隔离级别。</p>
<p>spring.datasource.use-disposable-connection-facade 连接是否要用一个门面（facade）封装起来，在调用了 Connection.close() 后就不能 再使用这个连接了。</p>
<p>spring.datasource.use-equals 在比较方法名时是否使用 String.equals() 来代替 == 。</p>
<p>spring.datasource.use-lock 在操作连接对象时是否要加锁。</p>
<p>spring.datasource.validation-interval 执行连接验证的间隔时间，单位为毫秒。</p>
<p>spring.datasource.validation-query 在连接池里的连接返回给调用者或连接池时，要执行的验证 SQL 查询。</p>
<p>spring.datasource.validation-query-timeout 在连接验证查询执行失败前等待的超时时间，单位为秒。</p>
<p>spring.datasource.validation-timeout 在连接验证失败前等待的超时时间，单位为秒。（用于 Hikari 连接池。）</p>
<p>spring.datasource.validator-class-name 可选验证器类的全限定类名，用于执行测试查询。</p>
<p>spring.datasource.xa.data-source-class-name XA 数据源的全限定类名。</p>
<p>spring.datasource.xa.properties 要传递给 XA 数据源的属性。</p>
<h3 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h3><p>spring.freemarker.allow-request-override HttpServletRequest 的属性是否允许覆盖（隐藏）控制器生成的同名模型属性。</p>
<p>spring.freemarker.allow-session-override HttpSession 的属性是否允许覆盖（隐藏）控制器生成的同名模型属性。</p>
<p>spring.freemarker.cache 开启模板缓存。</p>
<p>spring.freemarker.charset 模板编码。</p>
<p>spring.freemarker.check-template-location 检查模板位置是否存在。</p>
<p>spring.freemarker.content-type Content-Type 的值。</p>
<p>spring.freemarker.enabled 开启 FreeMarker 的 MVC 视图解析。</p>
<p>spring.freemarker.expose-request-attributes 在模型合并到模板前，是否要把所有的请求属性添加到模型里。</p>
<p>spring.freemarker.expose-session-attributes 在模型合并到模板前，是否要把所有的 HttpSession 属性添加到模型里。</p>
<p>spring.freemarker.expose-spring-macro-helpers 是否发布供 Spring 宏程序库使用的 RequestContext ，并将命其名为 springMacro- RequestContext</p>
<p>spring.freemarker.prefer-file-system-access 加载模板时优先通过文件系统访问。文件系统访问能够实时检测到模板变更。（默认值： true 。）</p>
<p>spring.freemarker.prefix 在构建 URL 时添加到视图名称前的前缀。</p>
<p>spring.freemarker.request-context-attribute 在所有视图里使用的 RequestContext 属性的名称。</p>
<p>spring.freemarker.settings 要传递给 FreeMarker 配置的各种键。</p>
<p>spring.freemarker.suffix 在构建 URL 时添加到视图名称后的后缀。</p>
<p>spring.freemarker.template-loader-path 模板路径列表，用逗号分隔。（默认值： [“classpath:/templates/”] 。）</p>
<p>spring.freemarker.view-names 可解析的视图名称的白名单。</p>
<h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><p>spring.groovy.template.allow-request-override HttpServletRequest 的属性是否允许覆盖（隐藏）控制器生成的同名模型属性。</p>
<p>spring.groovy.template.allow-session-override HttpSession 的属性是否允许覆盖（隐藏）控制器生成的同名模型属性。</p>
<p>spring.groovy.template.cache 开启模板缓存。</p>
<p>spring.groovy.template.charset 模板编码。</p>
<p>spring.groovy.template.check-template-location 检查模板位置是否存在。</p>
<p>spring.groovy.template.configuration.auto-escape 模型变量在模板里呈现时是否要做转义。（默认值： false 。）</p>
<p>spring.groovy.template.configuration.auto-indent 模板是否要自动呈现缩进。（默认值： false 。）</p>
<p>spring.groovy.template.configuration.auto-indent-string 开启自动缩进时用于缩进的字符串，可以是 SPACES ，也可以是 TAB 。（默认值： SPACES 。）</p>
<p>spring.groovy.template.configuration.auto-new-line 模板里是否要呈现新的空行。（默认值： false 。）</p>
<p>spring.groovy.template.configuration.base-template-class 模板基类。</p>
<p>spring.groovy.template.configuration.cache-templates 模板是否应该缓存。（默认值： true 。）</p>
<p>spring.groovy.template.configuration.declaration-encoding 用来写声明头的编码。</p>
<p>spring.groovy.template.configuration.expand-empty-elements 没有正文的元素该用短形式（例如， ）还是扩展形式（例如， ）来书 写。（默认值： false）</p>
<p>spring.groovy.template.configuration.locale 设置模板地域。</p>
<p>spring.groovy.template.configuration.new-line-string 在自动空行开启后用来呈现空行的字符串。（默认为系统的 line.separator 属性值。）</p>
<p>spring.groovy.template.configuration.resource-loader-path Groovy 模板的路径。（默认值： classpath:/templates/ 。）</p>
<p>spring.groovy.template.configuration.use-double-quotes 属性是该用双引号还是单引号。（默认值： false 。）</p>
<p>spring.groovy.template.content-type Content-Type 的值。</p>
<p>spring.groovy.template.enabled 开启 Groovy 模板的 MVC 视图解析。</p>
<p>spring.groovy.template.expose-request-attributes 在模型合并到模板前，是否要把所有的请求属性添加到模型里。</p>
<p>spring.groovy.template.expose-session-attributes 在模型合并到模板前，是否要把所有的 HttpSession 属性添加到模型里。</p>
<p>spring.groovy.template.expose-spring-macro-helpers 是否发布供 Spring 宏程序库使用的 RequestContext ，并将其命名为 springMacro- RequestContext</p>
<p>spring.groovy.template.prefix 在构建 URL 时，添加到视图名称前的前缀。</p>
<p>spring.groovy.template.request-context-attribute 所有视图里使用的 RequestContext 属性的名称。</p>
<p>spring.groovy.template.resource-loader-path 模板路径（默认值： classpath:/ templates/ 。）</p>
<p>spring.groovy.template.suffix 在构建 URL 时，添加到视图名称后的后缀。</p>
<p>spring.groovy.template.view-names 可解析的视图名称白名单。</p>
<h3 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h3><p>spring.h2.console.enabled 开启控制台。（默认值： false 。）</p>
<p>spring.h2.console.path 可以找到控制台的路径。（默认值： /h2-console 。）</p>
<p>Hornetq</p>
<p>spring.hornetq.embedded.cluster-password 集群密码。默认在启动时随机生成。</p>
<p>spring.hornetq.embedded.data-directory 日志文件目录。如果关闭了持久化功能则不需要该属性。</p>
<p>spring.hornetq.embedded.enabled 如果有 HornetQ 服务器 API，则开启嵌入模式。（默认值： true 。）</p>
<p>spring.hornetq.embedded.persistent 开启持久化存储。（默认值： false 。）</p>
<p>spring.hornetq.embedded.queues 启动时要创建的队列列表，用逗号分隔。（默认值： [] 。）</p>
<p>spring.hornetq.embedded.server-id 服务器 ID。默认使用自增长计数器。（默认值： 0 。）</p>
<p>spring.hornetq.embedded.topics 启动时要创建的主题列表，用逗号分隔。（默认值： [] 。）</p>
<p>spring.hornetq.host HornetQ 的主机。（默认值： localhost 。）</p>
<p>spring.hornetq.mode HornetQ 的部署模式，默认为自动检测。可以显式地设置为 native 或 embedded 。</p>
<p>spring.hornetq.port HornetQ 的端口。（默认值： 5445 。）</p>
<h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><p>spring.http.converters.preferred-json-mapper HTTP 消息转换时优先使用 JSON 映射器。</p>
<p>spring.http.encoding.charset HTTP 请求和响应的字符集。如果没有显式地指定 Content-Type 头，则将该属性值作为 这个头的值。（默认值： UTF-8 。）</p>
<p>spring.http.encoding.enabled 开启 HTTP 编码支持。（默认值： true 。）</p>
<p>spring.http.encoding.force 强制将 HTTP 请求和响应编码为所配置的字符集。（默认值： true 。）</p>
<h3 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h3><p>spring.jackson.date-format 日期格式字符串（yyyy-MM-dd HH:mm:ss）或日期格式类的全限定类名。</p>
<p>spring.jackson.deserialization 影响 Java 对象反序列化的 Jackson on/off 特性。</p>
<p>spring.jackson.generator 用于生成器的 Jackson on/off 特性。</p>
<p>spring.jackson.joda-date-time-format Joda 日期时间格式字符串（yyyy-MM-dd HH:mm:ss）。如果没有配置，而 date-format 又配置了一个格式字符串的话，会将它作为降级配置。</p>
<p>spring.jackson.locale 用于格式化的地域值。</p>
<p>spring.jackson.mapper Jackson 的通用 on/off 特性。</p>
<p>spring.jackson.parser 用于解析器的 Jackson on/off 特性。</p>
<p>spring.jackson.property-naming-strategy Jackson 的 PropertyNamingStrategy 中的一个常量（ CAMEL_CASE_TO_LOWERCASE WITH_UNDERSCORES ）。也可以设置 PropertyNamingStrategy 的子类的全限定类名。</p>
<p>spring.jackson.serialization 影响 Java 对象序列化的 Jackson on/off 特性。</p>
<p>spring.jackson.serialization-inclusion 控制序列化时要包含哪些属性。可选择 Jackson 的 JsonInclude.Include 枚举里的某个值。</p>
<p>spring.jackson.time-zone 格式化日期时使用的时区。可以配置各种可识别的时区标识符，比如 America/Los_ Angeles 或者 GMT+10 。</p>
<h3 id="Jersey"><a href="#Jersey" class="headerlink" title="Jersey"></a>Jersey</h3><p>spring.jersey.filter.order Jersey 过滤器链的顺序。（默认值： 0 。）</p>
<p>spring.jersey.init 通过 Servlet 或过滤器传递给 Jersey 的初始化参数。</p>
<p>spring.jersey.type Jersey 集成类型。可以是 servlet 或者 filter 。</p>
<h3 id="Jms"><a href="#Jms" class="headerlink" title="Jms"></a>Jms</h3><p>spring.jms.jndi-name 连接工厂的 JNDI 名字。设置了该属性，则优先于其他自动配置的连接工厂。</p>
<p>spring.jms.listener.acknowledge-mode 容器的应答模式（acknowledgment mode）。默认情况下，监听器使用自动应答。</p>
<p>spring.jms.listener.auto-startup 启动时自动启动容器。（默认值： true 。）</p>
<p>spring.jms.listener.concurrency 并发消费者的数量下限。</p>
<p>spring.jms.listener.max-concurrency 并发消费者的数量上限。</p>
<p>spring.jms.pub-sub-domain 如果是主题而非队列，指明默认的目的地类型是否支持 Pub/Sub。（默认值： false 。）</p>
<h3 id="Jmx"><a href="#Jmx" class="headerlink" title="Jmx"></a>Jmx</h3><p>spring.jmx.default-domain JMX 域名。</p>
<p>spring.jmx.enabled 将管理 Bean 发布到 JMX 域里。（默认值： true 。）</p>
<p>spring.jmx.server MBeanServer 的 Bean 名称。（默认值： mbeanServer 。）</p>
<h3 id="Jpa"><a href="#Jpa" class="headerlink" title="Jpa"></a>Jpa</h3><p>spring.jpa.database 要操作的目标数据库，默认自动检测。也可以通过 databasePlatform 属性进行设置。</p>
<p>spring.jpa.database-platform 要操作的目标数据库，默认自动检测。也可以通过 Database 枚举来设置。</p>
<p>spring.jpa.generate-ddl 启动时要初始化 Schema。（默认值： false 。）</p>
<p>spring.jpa.hibernate.ddl-auto DDL 模式（ none 、 validate 、 update 、 create 和 create-drop ）。这是 hibernate. hbm2ddl.auto 属性的一个快捷方式。在使用嵌入式数据库时，默认为 create-drop , 其他情况下默认为 none 。</p>
<p>spring.jpa.hibernate.naming-strategy Hibernate 命名策略的全限定类名。</p>
<p>spring.jpa.open-in-view 注册 OpenEntityManagerInViewInterceptor ，在请求的整个处理过程中，将一个 JPA EntityManager 绑定到线程上。（默认值： true）</p>
<p>spring.jpa.propertiesJPA 提供方要设置的额外原生属性。</p>
<p>spring.jpa.show-sql 在使用 Bitronix Transaction Manager 时打开 SQL 语句日志。（默认值： false 。）</p>
<h3 id="Jta"><a href="#Jta" class="headerlink" title="Jta"></a>Jta</h3><p>spring.jta.allow-multiple-lrc 在使用 Bitronix Transaction Manager 时，事务管理器是否应该允许一个事务涉及多个 LRC 资源。（默认值： false）</p>
<p>spring.jta.asynchronous2-pc 在使用 Bitronix Transaction Manager 时，是否异步执行两阶段提交。（默认值： false 。）</p>
<p>spring.jta.background-recovery-interval在使用 Bitronix Transaction Manager 时，多久运行一次恢复过程，单位为分钟。（默认值： 1 ）</p>
<p>spring.jta.background-recovery-interval-seconds 在使用 Bitronix Transaction Manager 时，多久运行一次恢复过程，单位为秒。（默认值： 60 ）</p>
<p>spring.jta.current-node-only-recovery 在使用 Bitronix Transaction Manager 时，恢复是否要滤除不包含本 JVM 唯一 ID 的 XID。（默认值： true ）</p>
<p>spring.jta.debug-zero-resource-transaction 在使用 Bitronix Transaction Manager 时，对于没有涉及任何资源的事务，是否要跟踪并记 录它们的创建和提交调用栈。（默认值： false）</p>
<p>spring.jta.default-transaction-timeout 在使用 Bitronix Transaction Manager 时，默认的事务超时时间，单位为秒。（默认值： 60 。）</p>
<p>spring.jta.disable-jmx 在使用 Bitronix Transaction Manager 时，是否要禁止注册 JMX MBean。（默认值： false 。）</p>
<p>spring.jta.enabled 开启 JTA 支持。（默认值： true 。）</p>
<p>spring.jta.exception-analyzer 在使用 Bitronix Transaction Manager 时用到的异常分析器。设置为 null 时使用默认异常分析器，也可以设置自定义异常分析器的全限定类名。</p>
<p>spring.jta.filter-log-status 在使用 Bitronix Transaction Manager 时，是否只记录必要的日志。开启该参数时能减少分 段（fragment）空间用量，但调试更复杂了。（默认值： false）</p>
<p>spring.jta.force-batching-enabled 在使用 Bitronix Transaction Manager 时，是否批量输出至磁盘。禁用批处理会严重降低事 务管理器的吞吐量。（默认值： true 。）</p>
<p>spring.jta.forced-write-enabled 在使用 Bitronix Transaction Manager 时，日志是否强制写到磁盘上。在生产环境里不要设 置为 false ，因为不强制写到磁盘上无法保证完整性。（默认值： true）</p>
<p>spring.jta.graceful-shutdown-interval 在使用 Bitronix Transaction Manager 时，要关闭的话，事务管理器在放弃事务前最多等它 多少秒。（默认值： 60）</p>
<p>spring.jta.jndi-transaction-synchronization-registry-name 在使用 Bitronix Transaction Manager 时，事务同步注册表应该绑定到哪个 JNDI 下。（默认 值： java:comp/TransactionSynchronizationRegistry）</p>
<p>spring.jta.jndi-user-transaction-name 在使用 Bitronix Transaction Manager 时，用户事务应该绑定到哪个 JNDI 下。（默认值： java:comp/UserTransaction 。）</p>
<p>spring.jta.journal 在使用 Bitronix Transaction Manager 时，要用的日志名。可以是 disk 、 null 或者全限定类 名。（默认值： disk 。）</p>
<p>spring.jta.log-dir 事务日志目录。</p>
<p>spring.jta.log-part1-filename 日志分段文件 1 的名称。（默认值： btm1.tlog 。）</p>
<p>spring.jta.log-part2-filename 日志分段文件 2 的名称。（默认值： btm2.tlog 。）</p>
<p>spring.jta.max-log-size-in-mb 在使用 Bitronix Transaction Manager 时，日志分段文件的最大兆数。日志越大，事务就被 允许在未终结状态停留越长时间。但是，如果文件大小限制得太小，事务管理器在分段 满了的时候就会暂停更长时间。（默认值： 2 。）</p>
<p>spring.jta.resource-configuration-filename Bitronix Transaction Manager 的配置文件名。</p>
<p>spring.jta.server-id 唯一标识 Bitronix Transaction Manager 实例的 ID。</p>
<p>spring.jta.skip-corrupted-logs 是否跳过损坏的日志文件。（默认值： false 。）</p>
<p>spring.jta.transaction-manager-id 事务管理器的唯一标识符。</p>
<p>spring.jta.warn-about-zero-resource-transaction 在使用 Bitronix Transaction Manager 时，是否要对执行时没有涉及任何资源的事务作出告 警。（默认值： true 。）</p>
<h3 id="Mail"><a href="#Mail" class="headerlink" title="Mail"></a>Mail</h3><p>spring.mail.default-encoding 默认的 MimeMessage 编码。（默认值： UTF-8 。）</p>
<p>spring.mail.host SMTP 服务器主机地址。</p>
<p>spring.mail.jndi-name会话的 JNDI 名称。设置之后，该属性的优先级要高于其他邮件设置。</p>
<p>spring.mail.password SMTP 服务器的登录密码。</p>
<p>spring.mail.port SMTP 服务器的端口号。</p>
<p>spring.mail.properties 附加的 JavaMail 会话属性。</p>
<p>spring.mail.protocol SMTP 服务器用到的协议。（默认值： smtp 。）</p>
<p>spring.mail.test-connection 在启动时测试邮件服务器是否可用。（默认值： false 。）</p>
<p>spring.mail.username SMTP 服务器的登录用户名。</p>
<h3 id="Messages"><a href="#Messages" class="headerlink" title="Messages"></a>Messages</h3><p>spring.messages.basename 逗号分隔的基本名称列表，都遵循 ResourceBundle 的惯例。本质上这就是一个全限定 的 Classpath 位置，如果不包含包限定符（比如 org.mypackage ），就会从 Classpath 的根部开始解析。（默认值： messages 。）</p>
<p>spring.messages.cache-seconds 加载的资源包文件的缓存失效时间，单位为秒。在设置为 -1 时，包会永远缓存。（默认值： -1 。）</p>
<p>spring.messages.encoding消息包的编码。（默认值： UTF-8 。）</p>
<h3 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h3><p>spring.mobile.devicedelegatingviewresolver.enable-fallback 开启降级解析支持。（默认值： false 。）</p>
<p>spring.mobile.devicedelegatingviewresolver.enabled 开启设备视图解析器。（默认值： false 。）</p>
<p>spring.mobile.devicedelegatingviewresolver.mobile-prefix 添加到移动设备视图名前的前缀。（默认值： mobile/ 。）</p>
<p>spring.mobile.devicedelegatingviewresolver.mobile-suffix 添加到移动设备视图名后的后缀。</p>
<p>spring.mobile.devicedelegatingviewresolver.normal-prefix 添加到普通设备视图名前的前缀。</p>
<p>spring.mobile.devicedelegatingviewresolver.normal-suffix 添加到普通设备视图名后的后缀。</p>
<p>spring.mobile.devicedelegatingviewresolver.tablet-prefix添加到平板设备视图名前的前缀。（默认值： tablet/ 。）</p>
<p>spring.mobile.devicedelegatingviewresolver.tablet-suffix 添加到平板设备视图名后的后缀。</p>
<p>spring.mobile.sitepreference.enabled 开启 SitePreferenceHandler 。（默认值： true 。）</p>
<h3 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h3><p>spring.mongodb.embedded.features要开启的特性列表，用逗号分隔。</p>
<p>spring.mongodb.embedded.version 要使用的 Mongo 版本。（默认值： 2.6.10 。）</p>
<h3 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a>Mustache</h3><p>spring.mustache.cache 开启模板缓存。</p>
<p>spring.mustache.charset 模板编码。</p>
<p>spring.mustache.check-template-location 检查模板位置是否存在。</p>
<p>spring.mustache.content-type Content-Type 的值。</p>
<p>spring.mustache.enabled 开启 Mustache 的 MVC 视图解析。</p>
<p>spring.mustache.prefix添加到模板名前的前缀。（默认值： classpath:/ templates/ 。）</p>
<p>spring.mustache.suffix 添加到模板名后的后缀。（默认值： .html 。）</p>
<p>spring.mustache.view-names 可解析的视图名称的白名单。</p>
<h3 id="Mvc"><a href="#Mvc" class="headerlink" title="Mvc"></a>Mvc</h3><p>spring.mvc.async.request-timeout 异步请求处理超时前的等待时间（单位为毫秒）。如果没有设置该属性，则使用底层实现 的默认超时时间，比如，Tomcat 上使用 Servlet 3 时超时时间为 10 秒。</p>
<p>spring.mvc.date-format 要使用的日期格式（比如 dd/MM/yyyy ）。</p>
<p>spring.mvc.favicon.enabled 开启 favicon.ico 的解析。（默认值： true 。）</p>
<p>spring.mvc.ignore-default-model-on-redirect 在重定向的场景下，是否要忽略“默认”模型对象的内容。（默认值： true 。）</p>
<p>spring.mvc.locale 要使用的地域配置。</p>
<p>spring.mvc.message-codes-resolver-format 消息代码格式（ PREFIX_ERROR_CODE 、 POSTFIX_ERROR_CODE ）。</p>
<p>spring.mvc.view.prefix Spring MVC 视图前缀。</p>
<p>spring.mvc.view.suffix Spring MVC 视图后缀。</p>
<h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><p>mybatis.mapper-locations mybatis 映射文件位置。<br>mybatis.type-aliases-package 别名包位置。</p>
<h3 id="Rabbitmq"><a href="#Rabbitmq" class="headerlink" title="Rabbitmq"></a>Rabbitmq</h3><p>spring.rabbitmq.addresses 客户端应该连接的地址列表，用逗号分隔。</p>
<p>spring.rabbitmq.dynamic 创建一个 AmqpAdmin Bean。（默认值： true 。）</p>
<p>spring.rabbitmq.host RabbitMQ 主机地址。（默认值： localhost 。）</p>
<p>spring.rabbitmq.listener.acknowledge-mode 容器的应答模式。</p>
<p>spring.rabbitmq.listener.auto-startup 启动时自动开启容器。（默认值： true 。）</p>
<p>spring.rabbitmq.listener.concurrency 消费者的数量下限。</p>
<p>spring.rabbitmq.listener.max-concurrency 消费者的数量上限。</p>
<p>spring.rabbitmq.listener.prefetch 单个请求里要处理的消息数。该数值不应小于事务数（如果用到的话）。</p>
<p>spring.rabbitmq.listener.transaction-size 一个事务里要处理的消息数。为了保证效果，应该不大于预先获取的数量。</p>
<p>spring.rabbitmq.password进行身份验证的密码。</p>
<p>spring.rabbitmq.port RabbitMQ 端口。（默认值： 5672 。）</p>
<p>spring.rabbitmq.requested-heartbeat 请求心跳超时，单位为秒； 0 表示不启用心跳。</p>
<p>spring.rabbitmq.ssl.enabled 开启 SSL 支持。（默认值： false 。）</p>
<p>spring.rabbitmq.ssl.key-store 持有 SSL 证书的 KeyStore 路径。</p>
<p>spring.rabbitmq.ssl.key-store-password 访问 KeyStore 的密码。</p>
<p>spring.rabbitmq.ssl.trust-store 持有 SSL 证书的 TrustStore。</p>
<p>spring.rabbitmq.ssl.trust-store-password 访问 TrustStore 的密码。</p>
<p>spring.rabbitmq.username 进行身份验证的用户名。</p>
<p>spring.rabbitmq.virtual-host 在连接 RabbitMQ 时的虚拟主机。</p>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>spring.redis.database 连接工厂使用的数据库索引。（默认值： 0 。）</p>
<p>spring.redis.host Redis 服务器主机地址。（默认值： localhost 。）</p>
<p>spring.redis.passwordRedis 服务器的登录密码。</p>
<p>spring.redis.pool.max-active连接池在指定时间里能分配的最大连接数。负数表示无限制。（默认值： 8 。）</p>
<p>spring.redis.pool.max-idle 连接池里的最大空闲连接数。负数表示空闲连接数可以是无限大。（默认值： 8 。）</p>
<p>spring.redis.pool.max-wait当连接池被耗尽时，分配连接的请求应该在抛出异常前被阻塞多长时间（单位为秒）。负 数表示一直阻塞。（默认值： -1 。）</p>
<p>spring.redis.pool.min-idle 连接池里要维持的最小空闲连接数。该属性只有在设置为正数时才有效。（默认值： 0 。）</p>
<p>spring.redis.port Redis 服务器端口。（默认值： 6379 。）</p>
<p>spring.redis.sentinel.master Redis 服务器的名字。</p>
<p>spring.redis.sentinel.nodes形如“主机: 端口”配对的列表，用逗号分隔。</p>
<p>spring.redis.timeout 连接超时时间，单位为秒。（默认值： 0 。）</p>
<h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p>spring.resources.add-mappings 开启默认资源处理。（默认值： true 。）</p>
<p>spring.resources.cache-period 资源处理器对资源的缓存周期，单位为秒。</p>
<p>spring.resources.chain.cache 对资源链开启缓存。（默认值： true 。）</p>
<p>spring.resources.chain.enabled 开启 Spring 资源处理链。（默认关闭的，除非至少开启了一个策略。）</p>
<p>spring.resources.chain.html-application-cache 开启 HTML5 应用程序缓存证明重写。（默认值： false 。）</p>
<p>spring.resources.chain.strategy.content.enabled 开启内容版本策略。（默认值： false 。）</p>
<p>spring.resources.chain.strategy.content.paths 要运用于版本策略的模式列表，用逗号分隔。（默认值： [/**] 。）</p>
<p>spring.resources.chain.strategy.fixed.enabled开启固定版本策略。（默认值： false 。）</p>
<p>spring.resources.chain.strategy.fixed.paths要运用于固定版本策略的模式列表，用逗号分隔。</p>
<p>spring.resources.chain.strategy.fixed.version 用于固定版本策略的版本字符串。</p>
<p>spring.resources.static-locations 静态资源位置。默认为 classpath: [/META-INF/resources/, /resources/, /static/, /public/] 加上 context:/（Servlet 上下文的根目录）。</p>
<h3 id="SendGrid"><a href="#SendGrid" class="headerlink" title="SendGrid"></a>SendGrid</h3><p>spring.sendgrid.password SendGrid 密码。</p>
<p>spring.sendgrid.proxy.host SendGrid 代理主机地址。</p>
<p>spring.sendgrid.proxy.port SendGrid 代理端口。</p>
<p>spring.sendgrid.username SendGrid 用户名。</p>
<h3 id="Social"><a href="#Social" class="headerlink" title="Social"></a>Social</h3><p>spring.social.auto-connection-views 针对所支持的提供方开启连接状态视图。（默认值： false 。）</p>
<p>spring.social.facebook.app-id 应用程序 ID。</p>
<p>spring.social.facebook.app-secret 应用程序的密钥。</p>
<p>spring.social.linkedin.app-id 应用程序 ID。</p>
<p>spring.social.linkedin.app-secret 应用程序的密钥。</p>
<p>spring.social.twitter.app-id 应用程序 ID。</p>
<p>spring.social.twitter.app-secret 应用程序的密钥。</p>
<h3 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h3><p>spring.thymeleaf.cache开启模板缓存。（默认值： true 。）</p>
<p>spring.thymeleaf.check-template-location 检查模板位置是否存在。（默认值： true 。）</p>
<p>spring.thymeleaf.content-type Content-Type 的值。（默认值： text/html 。）</p>
<p>spring.thymeleaf.enabled 开启 MVC Thymeleaf 视图解析。（默认值： true 。）</p>
<p>spring.thymeleaf.encoding模板编码。（默认值： UTF-8 。）</p>
<p>spring.thymeleaf.excluded-view-names 要被排除在解析之外的视图名称列表，用逗号分隔。</p>
<p>spring.thymeleaf.mode 要运用于模板之上的模板模式。另见 StandardTemplate- ModeHandlers 。（默认值： HTML5 。）</p>
<p>spring.thymeleaf.prefix 在构建 URL 时添加到视图名称前的前缀。（默认值： classpath:/templates/ 。）</p>
<p>spring.thymeleaf.suffix 在构建 URL 时添加到视图名称后的后缀。（默认值： .html 。）</p>
<p>spring.thymeleaf.template-resolver-order Thymeleaf 模板解析器在解析器链中的顺序。默认情况下，它排在第一位。顺序从 1 开始只有在定义了额外的 TemplateResolver Bean 时才需要设置这个属性。</p>
<p>spring.thymeleaf.view-names 可解析的视图名称列表，用逗号分隔。</p>
<h3 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h3><p>spring.velocity.allow-request-override HttpServletRequest 的属性是否允许覆盖（隐藏）控制器生成的同名模型属性。</p>
<p>spring.velocity.allow-session-override HttpSession` 的属性是否允许覆盖（隐藏）控制器生成的同名模型属性。</p>
<p>spring.velocity.cache 开启模板缓存。</p>
<p>spring.velocity.charset 模板编码。</p>
<p>spring.velocity.check-template-location 检查模板位置是否存在。</p>
<p>spring.velocity.content-type Content-Type 的值。</p>
<p>spring.velocity.date-tool-attribute DateTool 辅助对象在视图的 Velocity 上下文里呈现的名字。</p>
<p>spring.velocity.enabled 开启 Velocity 的 MVC 视图解析。</p>
<p>spring.velocity.expose-request-attributes 在模型合并到模板前，是否要把所有的请求属性添加到模型里。</p>
<p>spring.velocity.expose-session-attributes 在模型合并到模板前，是否要把所有的 HttpSession 属性添加到模型里。</p>
<p>spring.velocity.expose-spring-macro-helpers 是否发布供 Spring 宏程序库使用的 RequestContext ，并将其名命为 springMacro- RequestContext 。</p>
<p>spring.velocity.number-tool-attribute NumberTool 辅助对象在视图的 Velocity 上下文里呈现的名字。</p>
<p>spring.velocity.prefer-file-system-access 加载模板时优先通过文件系统访问。文件系统访问能够实时检测到模板变更。（默认值： true 。）</p>
<p>spring.velocity.prefix在构建 URL 时添加到视图名称前的前缀。</p>
<p>spring.velocity.properties 额外的 Velocity 属性。</p>
<p>spring.velocity.request-context-attribute所有视图里使用的 Request- Context 属性的名称。</p>
<p>spring.velocity.resource-loader-path 模板路径。（默认值： classpath:/ templates/ 。）</p>
<p>spring.velocity.suffix 在构建 URL 时添加到视图名称后的后缀。</p>
<p>spring.velocity.toolbox-config-location Velocity Toolbox 的配置位置，比如 /WEB-INF/toolbox.xml。自动加载 Velocity Tools 工具定 义文件，将所定义的全部工具发布到指定的作用域内。</p>
<p>spring.velocity.view-names可解析的视图名称白名单。</p>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>spring.view.prefix Spring MVC 视图前缀。</p>
<p>spring.view.suffixSpring MVC 视图后缀。</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>spring.aop.auto 添加 @EnableAspectJAutoProxy(默认：true)</p>
<p>spring.application.admin.enabled开启应用程序的管理功能 (默认：false)</p>
<p>spring.artemis.embedded.cluster-password 集群密码。默认在启东市随机生成</p>
<p>spring.artemis.embedded.persistent开启持久化存储 (默认：false)</p>
<p>spring.autoconfigure.exclude 要排除的自动配置类</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Springboot</tag>
        <tag>application</tag>
      </tags>
  </entry>
  <entry>
    <title>界面开发工具之HTML色彩表格工具</title>
    <url>/2020/07/23/%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%B9%8BHTML%E8%89%B2%E5%BD%A9%E8%A1%A8%E6%A0%BC%E5%B7%A5%E5%85%B7-1/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"><br><img src="https://img-blog.csdnimg.cn/20200604211717578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>网址链接： <a href="https://html-color-codes.info/chinese/" target="_blank" rel="noopener">HTML色彩表格工具</a></p>
<hr>
<h1 id="HTML色彩代码理论"><a href="#HTML色彩代码理论" class="headerlink" title="HTML色彩代码理论"></a>HTML色彩代码理论</h1><p>HTML代码格式：<br>每一个HTML代码包含有“#”符号以及6个字幕和数字。这些数字都是十六进制的。比如“FF”在十六进制中代表十进制的数字255。</p>
<!-- more -->
<p>符号意义：<br>HTML色彩代码中前两个符号表示红色的浓度。00指的是颜色最淡而FF则指的是颜色最浓。第三个和第四个符号表示绿色的浓度，第五个和第六个符号表示蓝色的浓度。由此，将各种浓度的红、绿、蓝三种颜色进行组合，我们可以调配出任何所需色彩</p>
<p>示例：<br>#FF0000 - 利用这个HTML代码，我们让浏览器显示不掺杂任何绿色和蓝色成分的最鲜艳的红色。其结果当然就是纯红:     </p>
<p>#00FF00 - 这个HTML代码表示只有绿色且不掺杂任何红色和蓝色。其结果是:     </p>
<p>#0000FF - 这个HTML代码表示只有蓝色且不掺杂任何红色和绿色。其结果是:     </p>
<p>#FFFF00 - 红绿组合生成黄色:     </p>
<p>#CCEEFF - 一些红色、一点绿色以及最高浓度的蓝色，组合成天蓝色:     </p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>工具</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>界面开发工具之HTML色彩表格工具</title>
    <url>/2020/07/23/%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%B9%8BHTML%E8%89%B2%E5%BD%A9%E8%A1%A8%E6%A0%BC%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"><br><img src="https://img-blog.csdnimg.cn/20200604211717578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>网址链接： <a href="https://html-color-codes.info/chinese/" target="_blank" rel="noopener">HTML色彩表格工具</a></p>
<hr>
<h1 id="HTML色彩代码理论"><a href="#HTML色彩代码理论" class="headerlink" title="HTML色彩代码理论"></a>HTML色彩代码理论</h1><p>HTML代码格式：<br>每一个HTML代码包含有“#”符号以及6个字幕和数字。这些数字都是十六进制的。比如“FF”在十六进制中代表十进制的数字255。</p>
<p>符号意义：<br>HTML色彩代码中前两个符号表示红色的浓度。00指的是颜色最淡而FF则指的是颜色最浓。第三个和第四个符号表示绿色的浓度，第五个和第六个符号表示蓝色的浓度。由此，将各种浓度的红、绿、蓝三种颜色进行组合，我们可以调配出任何所需色彩</p>
<p>示例：<br>#FF0000 - 利用这个HTML代码，我们让浏览器显示不掺杂任何绿色和蓝色成分的最鲜艳的红色。其结果当然就是纯红:     </p>
<p>#00FF00 - 这个HTML代码表示只有绿色且不掺杂任何红色和蓝色。其结果是:     </p>
<p>#0000FF - 这个HTML代码表示只有蓝色且不掺杂任何红色和绿色。其结果是:     </p>
<p>#FFFF00 - 红绿组合生成黄色:     </p>
<p>#CCEEFF - 一些红色、一点绿色以及最高浓度的蓝色，组合成天蓝色:     </p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
  </entry>
  <entry>
    <title>自动生成注释作者名字和日期等信息（IDEA Java类）</title>
    <url>/2020/07/23/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E4%BD%9C%E8%80%85%E5%90%8D%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F%E7%AD%89%E4%BF%A1%E6%81%AF%EF%BC%88IDEA-Java%E7%B1%BB%EF%BC%89/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"></p>
<h1 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h1><ul>
<li>IDEA2018.3 </li>
<li>JDK1.8</li>
</ul>
<hr>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>在创建java类后，自动生成定制的注释：<br><img src="https://img-blog.csdnimg.cn/20200606163520907.png" alt="在这里插入图片描述"></p>
<hr>
<h1 id="设置过程"><a href="#设置过程" class="headerlink" title="设置过程"></a>设置过程</h1><p>点击File-&gt;Settings-&gt;Editor-&gt;File and Code Templates<br><img src="https://img-blog.csdnimg.cn/20200606162305878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在File Header中输入想要设置的信息<br>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*文件名: $&#123;NAME&#125;</span></span><br><span class="line"><span class="comment">*创建者: your name</span></span><br><span class="line"><span class="comment">*创建时间:$&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">*描述: 这是一个示例</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>当然也可以参考下方的Description选择自己想要设置的完成创建时自动注释。<br>|注释设置| 描述 |<br>|–|–|<br>| ${PACKAGE_NAME} | name of the package in which the new file is created |<br>| ${USER} | 创建者名称 |<br>| ${DATE} |当前日期  |<br>|${TIME}  | 当前时间 |<br>| ${YEAR} | 年 |<br>|${MONTH}  月|  |<br>| ${MONTH_NAME_SHORT} | 月缩写 |<br>| ${MONTH_NAME_FULL} |月全称  |<br>| ${DAY} | 天 |<br>| ${HOUR}  | 时 |<br>| ${MINUTE} |分  |<br>| ${PROJECT_NAME} | 工程名 |</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>聚光灯效果（css+html）</title>
    <url>/2020/07/23/%E8%81%9A%E5%85%89%E7%81%AF%E6%95%88%E6%9E%9C%EF%BC%88css-html%EF%BC%89/</url>
    <content><![CDATA[<p>Hello World!</p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200723150354693.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="背景"><br>最终效果：<br><img src="https://img-blog.csdnimg.cn/20200516111122629.gif" alt="在这里插入图片描述"></p>
<!-- more -->
<p>实现code:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">		&lt;title&gt;聚光灯效果&lt;/title&gt;</span><br><span class="line">		&lt;style&gt;</span><br><span class="line">			*&#123;</span><br><span class="line">				margin:<span class="number">0</span>;</span><br><span class="line">				padding:<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			body&#123;</span><br><span class="line">				background: #222;</span><br><span class="line">				display: flex;</span><br><span class="line">				justify-content: center;</span><br><span class="line">				align-items: center;</span><br><span class="line">				min-height: <span class="number">100</span>vh;</span><br><span class="line">			&#125;</span><br><span class="line">			h1&#123;</span><br><span class="line">				color: #333;</span><br><span class="line">				font-size: <span class="number">8</span>rem;</span><br><span class="line">				position: relative;</span><br><span class="line">			&#125;</span><br><span class="line">			h1:after&#123;</span><br><span class="line">				content: <span class="string">"Hello JavaScript"</span>;</span><br><span class="line">				color: transparent;</span><br><span class="line">				position: absolute;</span><br><span class="line">				left: <span class="number">0</span>;</span><br><span class="line">				top: <span class="number">0</span>;</span><br><span class="line">				background: -webkit-linear-gradient(left,#c23616,#192a56,#00d2d3,yellow,#6D214F,#2e86de,#4cd137,#e84118);</span><br><span class="line">				background-clip: text;</span><br><span class="line">				-webkit-background-clip:text;</span><br><span class="line">				clip-path: circle(<span class="number">100</span>px at <span class="number">0</span>% <span class="number">50</span>%);</span><br><span class="line">				-webkit-clip-path: circle(<span class="number">100</span>px at <span class="number">0</span>% <span class="number">50</span>%);</span><br><span class="line">				animation: light <span class="number">5</span>s infinite;</span><br><span class="line">			&#125;</span><br><span class="line">				</span><br><span class="line">			<span class="meta">@keyframes</span> light&#123;</span><br><span class="line">				<span class="number">0</span>%&#123;</span><br><span class="line">					clip-path: circle(<span class="number">100</span>px at <span class="number">0</span>% <span class="number">50</span>%);</span><br><span class="line">					-webkit-clip-path: circle(<span class="number">100</span>px at <span class="number">0</span>% <span class="number">50</span>%);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="number">50</span>%&#123;</span><br><span class="line">					clip-path: circle(<span class="number">100</span>px at <span class="number">100</span>% <span class="number">50</span>%);</span><br><span class="line">					-webkit-clip-path: circle(<span class="number">100</span>px at <span class="number">100</span>% <span class="number">50</span>%);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="number">100</span>%&#123;</span><br><span class="line">					clip-path: circle(<span class="number">100</span>px at <span class="number">0</span>% <span class="number">50</span>%);</span><br><span class="line">					-webkit-clip-path: circle(<span class="number">100</span>px at <span class="number">0</span>% <span class="number">50</span>%);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&lt;/style&gt;</span><br><span class="line">		</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;div&gt;&lt;h1&gt;Hello JavaScript&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong><em>END</em></strong></p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
