<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SSM框架下各层的解释说明（Controller等）</title>
    <url>/2020/07/21/SSM%E6%A1%86%E6%9E%B6%E4%B8%8B%E5%90%84%E5%B1%82%E7%9A%84%E8%A7%A3%E9%87%8A%E8%AF%B4%E6%98%8E%EF%BC%88Controller%E7%AD%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="SSM框架"><a href="#SSM框架" class="headerlink" title="SSM框架"></a>SSM框架</h1><p>SSM框架是spring MVC ，Spring和Mybatis框架的整合，是标准的MVC模式，将整个系统划分为表现层（web），controller层，service层，dao层四层,使用spring MVC负责请求的转发和视图管理。Spring实现业务对象管理，Mybatis作为数据对象的持久化引擎。<br><img src="https://img-blog.csdnimg.cn/20200718155138172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>表现层（web）：通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。<br>业务逻辑层（service）：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。<br>数据访问层（dao）：该层所做事务直接操作数据库，针对数据的增添、删除、修改、更新、查找等。<br>DataBase ===&gt; Entity ===&gt; Mapper.xml ===&gt; Dao.Java ===&gt; Service.java ===&gt; Controller.java ===&gt; html css js（thymeleaf） </p>
<hr>
<h1 id="各层解释说明"><a href="#各层解释说明" class="headerlink" title="各层解释说明"></a>各层解释说明</h1><p>用IDEA创建一个maven项目结构如左图所示,在该项目中,有五个包,分别是controller、dao、entity、service和serviceimpl：<br><img src="https://img-blog.csdnimg.cn/20200718155620771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>|层| 描述 |<br>|–|–|<br>| 实体层 | 数据库在项目中的类，主要用于定义与数据库对象应的属性，提供get/set方法,tostring方法,有参无参构造函数。 |<br>|持久层  | 与数据库交互，dao层首先会创建dao接口，接着就可以在配置文件中定义该接口的实现类；接着就可以在模块中调用dao的接口进行数据业务的处理，而不用关注此接口的具体实现类是哪一个类，dao层的数据源和数据库连接的参数都是在配置文件中进行配置的。 |<br>|业务层  |控制业务,业务模块的逻辑应用设计，和dao层一样都是先设计接口，再创建要实现的类，然后在配置文件中进行配置其实现的关联。接下来就可以在service层调用接口进行业务逻辑应用的处理。  |<br>| 实现层 |实现service接口的所有方法，整合service和dao |<br>|控制层  | controller层主要调用Service层里面的接口控制具体的业务流程，控制的配置也要在配置文件中进行。Controller和Service的区别是：Controller负责具体的业务模块流程的控制；Service层负责业务模块的逻辑应用设计 |</p>
<hr>
<a id="more"></a>
<h2 id="entity层（model层）"><a href="#entity层（model层）" class="headerlink" title="entity层（model层）"></a>entity层（model层）</h2><p> 实体层用于存放我们的实体类，与数据库中的属性值基本保持一致，实现set和get的方法。<br> 1.导入lombok小辣椒驱动依赖,用来生成get/set方法依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dvms.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>) <span class="comment">//链式调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date bir;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.传统方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.umf.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdataSettingEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">private</span> Integer id = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> updataflag;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置：</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取：</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置：</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdataflag</span><span class="params">(<span class="keyword">int</span> updataflag)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.updataflag = updataflag;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取：</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUpdataflag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> updataflag;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="dao层（mapper层）"><a href="#dao层（mapper层）" class="headerlink" title="dao层（mapper层）"></a>dao层（mapper层）</h2><p>dao层（接口类）对数据库进行数据持久化操作，他的方法语句是直接针对数据库操作的，主要实现一些增删改查操作，在Mybatis中方法主要与与xxxDao（Mapper）.xml内相互一一映射。<br>Mybatis可以用.xml进行数据操作，也可以在dao层用注解的方式，也可以采取xml和dao层接口组合使用的方法（常用）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dvms.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dvms.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//登录</span></span><br><span class="line">    <span class="function">User <span class="title">login</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username, @<span class="title">Param</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;<span class="comment">// 在mybatis中传递多个参数要做参数的绑定</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户(注册)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAlluser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户信息（先查再改）</span></span><br><span class="line">    <span class="function">User <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>xxxDao（Mapper）.xm</strong>l：<br>关键： &lt; mapper namespace=”<strong>com.dvms.dao.UserDao</strong>“&gt;<br>前提：基本数据库语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span><br><span class="line">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><br><span class="line">&lt;mapper namespace="com.dvms.dao.UserDao"&gt;</span><br><span class="line">&lt;!--注册/新增用户--&gt;</span><br><span class="line">    &lt;insert id="save" parameterType="User"&gt;</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>,username,<span class="keyword">password</span>,sex,phone,email,<span class="keyword">role</span>) <span class="keyword">values</span> (<span class="comment">#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;sex&#125;,#&#123;phone&#125;,#&#123;email&#125;,#&#123;role&#125;)</span></span><br><span class="line">    &lt;/<span class="keyword">insert</span>&gt;</span><br><span class="line">&lt;!<span class="comment">--登录验证--&gt;</span></span><br><span class="line">    &lt;<span class="keyword">select</span> <span class="keyword">id</span>=<span class="string">"login"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">id</span>,username,<span class="keyword">password</span>,sex,phone,email,<span class="keyword">role</span> <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line">        <span class="keyword">where</span> username =<span class="comment">#&#123;username&#125; and password =#&#123;password&#125;</span></span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">&lt;!<span class="comment">--查询所有用户--&gt;</span></span><br><span class="line">    &lt;<span class="keyword">select</span> <span class="keyword">id</span>=<span class="string">"findAlluser"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">id</span>,username,<span class="keyword">password</span>,sex,phone,email,<span class="keyword">role</span> <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">&lt;!<span class="comment">--删除用户--&gt;</span></span><br><span class="line">    &lt;<span class="keyword">delete</span> <span class="keyword">id</span>=<span class="string">"delete"</span> parameterType=<span class="string">"String"</span>&gt;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="comment">#&#123;id&#125;</span></span><br><span class="line">    &lt;/<span class="keyword">delete</span>&gt;</span><br><span class="line">&lt;!<span class="comment">--修改用户信息--&gt;</span></span><br><span class="line">    &lt;!<span class="comment">--查到要修改的用户信息--&gt;</span></span><br><span class="line">    &lt;<span class="keyword">select</span> <span class="keyword">id</span>=<span class="string">"update"</span> parameterType=<span class="string">"String"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">id</span>,username,<span class="keyword">password</span>,sex,phone,email,<span class="keyword">role</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="comment">#&#123;id&#125;</span></span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">    &lt;!<span class="comment">--修改用户信息--&gt;</span></span><br><span class="line">    &lt;<span class="keyword">update</span> <span class="keyword">id</span>=<span class="string">"add"</span> parameterType=<span class="string">"User"</span>&gt;</span><br><span class="line">        <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> username=<span class="comment">#&#123;username&#125;,password=#&#123;password&#125;,sex=#&#123;sex&#125;,phone=#&#123;phone&#125;,email=#&#123;email&#125;,role=#&#123;role&#125; where id=#&#123;id&#125;</span></span><br><span class="line">    &lt;/<span class="keyword">update</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<p>在dao层用注解的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from student where stu_id=#&#123;stuId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryById</span><span class="params">(<span class="keyword">int</span> stuId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><p>service层（接口类）为controller层的类提供接口进行调用,一般就是自己写的方法封装起来，具体实现在serviceImpl中。<br>service层是建立在dao层之上的，建立了dao层后才可以建立service层，而service层又是在controller层之下的，因而service层应该既调用dao层的接口，又要提供接口给Controller层的类来进行调用，它刚好处于一个中间层的位置。每个模型都有一个service接口，每个接口分别封装各自的业务处理方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dvms.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dvms.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录</span></span><br><span class="line">    <span class="function">User <span class="title">login</span><span class="params">(String username, String password)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAlluser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户信息</span></span><br><span class="line">    <span class="function">User <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>servicedmpl</strong>（实现service层，整合service和dao）（导入dao层）（接口实现类）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dvms.service.Impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dvms.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.dvms.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.dvms.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        user.setId(UUID.randomUUID().toString());</span><br><span class="line">        userDao.save(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDao.login(username,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAlluser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAlluser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        userDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.update(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Controller层（web-层）"><a href="#Controller层（web-层）" class="headerlink" title="Controller层（web 层）"></a>Controller层（web 层）</h2><p>负责具体模块的业务流程控制（获取参数（前端传过来）返回响应（前端或数据库或一个指定路径）），需要调用service逻辑设计层的接口来控制业务流程（导入service层）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dvms.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dvms.entity.Emp;</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"emp/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(@RequestParam(defaultValue = <span class="string">"1"</span>)</span> <span class="keyword">int</span> pageNum,</span></span><br><span class="line"><span class="function">                          @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"5"</span>)</span> <span class="keyword">int</span> pageSize,</span></span><br><span class="line"><span class="function">                          Model model)</span>&#123;</span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);<span class="comment">//</span></span><br><span class="line">        PageInfo&lt;Emp&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(empService.findAll());</span><br><span class="line">        model.addAttribute(<span class="string">"pageInfo"</span>,pageInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        List&lt;Emp&gt; emps = empService.findAll();</span></span><br><span class="line"><span class="comment">//        model.addAttribute("emps",emps);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ems/tables"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/emp/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Emp emp)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        empService.save(emp);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/emp/findAll"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>Controller层调用了Service层的接口方法，Service层调用Dao层的方法，其中调用的参数是使用Entity层进行传递的。View层与Controller层协同工作,主要负责界面展示。</p>
]]></content>
      <tags>
        <tag>小工具</tag>
        <tag>hexo</tag>
        <tag>yilia</tag>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis映射标签resultMap与resultType、parameterMap与 parameterType</title>
    <url>/2020/07/21/MyBatis%E6%98%A0%E5%B0%84%E6%A0%87%E7%AD%BEresultMap%E4%B8%8EresultType%E3%80%81parameterMap%E4%B8%8E-parameterType/</url>
    <content><![CDATA[<h1 id="MyBatis映射标签"><a href="#MyBatis映射标签" class="headerlink" title="MyBatis映射标签"></a>MyBatis映射标签</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.dvms.dao.UserDao"</span>&gt;</span><br><span class="line">....</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200718195511189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.dvms.dao.UserDao"</span>&gt;</span><br><span class="line">&lt;!--注册/新增用户--&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"save"</span> parameterType=<span class="string">"User"</span>&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">user</span> <span class="params">(id,username,password,sex,phone,email,role)</span> <span class="title">values</span> <span class="params">(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;sex&#125;,#&#123;phone&#125;,#&#123;email&#125;,#&#123;role&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">&lt;!--登录验证--&gt;</span></span><br><span class="line"><span class="function">    &lt;select id</span>=<span class="string">"login"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        select id,username,password,sex,phone,email,role from user</span><br><span class="line">        where username =#&#123;username&#125; and password =#&#123;password&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;!--查询所有用户--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAlluser"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        select id,username,password,sex,phone,email,role from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;!--删除用户--&gt;</span><br><span class="line">    &lt;delete id=<span class="string">"delete"</span> parameterType=<span class="string">"String"</span>&gt;</span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">&lt;!--修改用户信息--&gt;</span><br><span class="line">    &lt;!--查到要修改的用户信息--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"update"</span> parameterType=<span class="string">"String"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">        select id,username,password,sex,phone,email,role from user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--修改用户信息--&gt;</span><br><span class="line">    &lt;update id=<span class="string">"add"</span> parameterType=<span class="string">"User"</span>&gt;</span><br><span class="line">        update user set username=#&#123;username&#125;,password=#&#123;password&#125;,sex=#&#123;sex&#125;,phone=#&#123;phone&#125;,email=#&#123;email&#125;,role=#&#123;role&#125; where id=#&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<p>在MyBatis中，输入与输出都是相对于<strong>数据库</strong>而言，我们通过<strong>parameterType</strong>完成输入映射(指将值映射到sql语句的占位符中，值的类型与dao层响应方法的参数类型一致)，通过<strong>resultType</strong>完成输出映射(从数据库中输出，通过dao层的方法查询到的数据输出到pojo对象（实体类entity）中)。 </p>
<h1 id="1-输入映射（往数据库输入）"><a href="#1-输入映射（往数据库输入）" class="headerlink" title="1. 输入映射（往数据库输入）"></a>1. 输入映射（往数据库输入）</h1><h2 id="parameterMap（不常用）与-parameterType（常用）"><a href="#parameterMap（不常用）与-parameterType（常用）" class="headerlink" title="parameterMap（不常用）与 parameterType（常用）"></a>parameterMap（不常用）与 parameterType（常用）</h2><p> ParameterMap和resultMap类似，表示将查询结果集中列值的类型一一映射到java对象属性的类型上，在开发过程中不推荐这种方式。<br> 一般使用<strong>parameterType</strong>直接将查询结果列值类型自动对应到java对象属性类型上，不再配置映射关系一一对应。</p>
<hr>
<h1 id="2-输出映射（从数据库输出）"><a href="#2-输出映射（从数据库输出）" class="headerlink" title="2. 输出映射（从数据库输出）"></a>2. 输出映射（从数据库输出）</h1><h2 id="resultMap与resultType（常用）"><a href="#resultMap与resultType（常用）" class="headerlink" title="resultMap与resultType（常用）"></a>resultMap与resultType（常用）</h2><p> 两者都是表示查询结果集与java对象之间的一种关系，处理查询结果集，映射到java对象。<br> resultMap表示将查询结果集中的列一一映射到bean对象的各个属性。映射的查询结果集中的列标签可以根据需要灵活变化，并且，在映射关系中，还可以通过typeHandler设置实现查询结果值的类型转换，比如布尔型与0/1的类型转换。</p>
<hr>
<h2 id="和-的使用"><a href="#和-的使用" class="headerlink" title="#{}和${}的使用"></a>#{}和${}的使用</h2><p>resultMap和ParameterMap书写拼写要使用#{}，resultType 和parameterType类型使用${}，（一般是用<strong>#{}</strong>）使用例子如下：</p>
<p>Select ID，COMMAND from Message where COMMAND=#{command}</p>
<p>Select ID，COMMAND from Message where COMMAND=‘${command}’</p>
<p>前者解析为：</p>
<pre><code>Select ID，COMMAND from Message where COMMAND=？具有预编译效果</code></pre><p>后者解析为：</p>
<pre><code>Select ID，COMMAND from Message where COMMAND=段子   不具有预编译效果</code></pre><hr>
<a id="more"></a>
<p>在Mybatis中传递多个参数要做参数的绑定（@Param）<br><img src="https://img-blog.csdnimg.cn/20200719121212891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不写parameterType也可以运行,因为Mybatis能自动识别，但返回值类型不能不写!!<br>Mybatis自动识别入参对象, 传入单个map或单个对象,无需写@Param注解   如@Param(“map”)  Map&lt;String, Object&gt; map<br>那么什么时候必须在mapper接口上写@Param注解呢,   mapper接口中有<strong>多个参数</strong>(每个对象或参数都要加@Param注解), 或<strong>一个 String</strong>, 必须使用@Param注解,<br><strong><em>END</em></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Spring框架常用注解</title>
    <url>/2020/07/21/Spring%E6%A1%86%E6%9E%B6%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Spring常用注解"><a href="#Spring常用注解" class="headerlink" title="Spring常用注解"></a>Spring常用注解</h1><p><img src="https://img-blog.csdnimg.cn/20200719133116417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>@Controller 用来响应页面，表示当前的类为控制器。<br>在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。<br>@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢?这个时候就需要我们把这个控制器类交给Spring 来管理。</p>
<hr>
<h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>Spring4之后新加入的注解，原来返回json需要@ResponseBody和@Controller配合，表明当前类是控制器且返回的是一组数据，不是页面。@RestController是@ResponseBody和@Controller的组合注解，推荐直接使用@RestController注解来处理http请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>,method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>,method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>@Autowired的作用是将其他的<strong>类</strong>，<strong>接口</strong>引入，类似于之前的类的初始化等，用这个注解，类中或接口的方法就可以直接调用了。<br>@Autowired顾名思义，就是自动装配，其作用是为了消除代码Java代码里面的getter/setter与bean属性中的property。当然，getter看个人需求，如果私有属性需要对外提供的话，应当予以保留。<br>@Resource的作用相当于@Autowired</p>
<hr>
<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>作用: 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。当返回的数据不是html标签的页面，而是其他某种格式的数据时(如json、xml等)时使用。</p>
<hr>
<h2 id="RequestMapping-（配置url映射）"><a href="#RequestMapping-（配置url映射）" class="headerlink" title="@RequestMapping （配置url映射）"></a>@RequestMapping （配置url映射）</h2><p>@RequestMapping如果没有指定请求方式，将接收Get,Post,Head,Options等所有的请求方式。<br>@RequestMapping此注解即可以作用在控制器的某个方法上，也可以作用在此控制器类上。当前台界面调用Controller处理数据时候告诉控制器怎么操作有3种情形：<br>1.当控制器在<strong>类级别</strong>上添加@RequestMapping注解时，这个注解会应用到控制器的所有处理器方法上。处理器方法上的@RequestMapping注解会对类级别上的@RequestMapping的声明进行补充。<br>2.@RequestMapping作用在<strong>处理器方法</strong>上。<br>3.@RequestMapping同时作用在<strong>类级别</strong>和<strong>处理器方法</strong>上。<br><img src="https://img-blog.csdnimg.cn/2020071913490357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所响应的url=<strong>localhost:8080/updata_setting/updata</strong></p>
<hr>
<a id="more"></a>
<h3 id="RequestMapping注解属性"><a href="#RequestMapping注解属性" class="headerlink" title="@RequestMapping注解属性"></a>@RequestMapping注解属性</h3><p>作用：简化常用的HTTP方法的映射，并更好地表达被注解方法的语义。<br>RequestMapping注解有六个属性：<br>1、 value， method;</p>
<p>value: 指定请求的实际地址，指定的地址可以是URI Template 模式(后面将会说明);</p>
<p>method: 指定请求的method类型， GET、POST、PUT、DELETE等;常用： GET、POST<br>组合注解：</p>
<ul>
<li>@GetMapping @RequestMapping(method = RequestMethod.GET)的简写<br>作用：对应查询，表明是一个查询URL映射<ul>
<li>@PostMapping @RequestMapping(method =RequestMethod.POST)的简写<br>作用：对应增加，表明是一个增加URL映射</li>
<li>@PutMapping@RequestMapping(method = RequestMethod.PUT)的简写<br>作用：对应更新，表明是一个更新URL映射</li>
<li>@DeleteMapping @RequestMapping(method = RequestMethod.DELETE)的简写<br>作用：对应删除，表明是一个删除URL映射</li>
</ul>
</li>
</ul>
<p>2、consumes，produces</p>
<p>consumes: 指定处理请求的提交内容类型(Content-Type)，例如application/json, text/html;</p>
<p>produces: 指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回;</p>
<p>3、params，headers</p>
<p>params: 指定request中必须包含某些参数值是，才让该方法处理。</p>
<p>headers: 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p>
<hr>
<h4 id="PathVaribale"><a href="#PathVaribale" class="headerlink" title="@PathVaribale"></a>@PathVaribale</h4><p>通过@PathVariable注解来获取URL中的参数时的前提条件是我们知道url的格式时怎么样的。只有知道url的格式，我们才能在指定的方法上通过相同的格式获取相应位置的参数值。<br>1.获取url中的单个参数（如id）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello/&#123;id&#125;"</span>,method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id:"</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.获取url有多个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello/&#123;id&#125;/&#123;name&#125;"</span>,method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id:"</span>+id+<span class="string">" name:"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><p>作用：获取请求参数的值<br>@RequestParam注解给允许用户不输入参数时，使用默认值；<br><img src="https://img-blog.csdnimg.cn/20200719155619507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><p>如果传输的是单层json对象，我们后台可以直接用 @RequestParam接收。如果传输的是多层嵌套json对象，这个时候会就会出现数据丢失问题，@ResponseBody很好的解决了这个问题，它会把前台传输过来的json转化为后台对应的对象；<br>@RequestBody接收的是一个Json对象的字符串，而不是一个Json对象。（易出错）然而在ajax请求往往传的都是Json对象，用JSON.stringify(data)的方式就能将对象变成字符串。同时ajax请求的时候也要指定dataType: “json”,contentType:”application/json” 这样就可以轻易的将一个对象或者List传到Java端，使用@RequestBody即可绑定对象或者List。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#updata'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        updata_setting: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        Save:function(ev)&#123;</span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">"../updata_setting/updata"</span>;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: <span class="string">"POST"</span>,</span><br><span class="line">                url: url,</span><br><span class="line">                data: JSON.stringify(vm.updata_setting),</span><br><span class="line">                success: function(r)&#123;</span><br><span class="line">                        alert(<span class="string">'操作成功！'</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>用于标注业务层组件，位于service实现层：<br>形如：@Service(“xxxService”)<br><img src="https://img-blog.csdnimg.cn/20200719161449596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h2><p>@Override是伪代码,表示重写(当然不写也可以),不过写上有如下好处:<br>1、可以当注释用,方便阅读。<br>2、编译器可以给你验证@Override下面的方法名是否是你父类中所有的,如果没有则报错。比如你如果没写@Override而你下面的方法名又写错了,这时你的编译器是可以编译通过的(它以为这个方法是你的子类中自己增加的方法)。</p>
<hr>
<h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>@Repository用于标注数据访问组件，即dao层<br><img src="https://img-blog.csdnimg.cn/2020071916203432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果 Web 应用程序采用了经典的三层分层结构的话，最好在持久层、业务层和控制层分别采用上述注解对分层中的类进行注释。@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p>
<hr>
<p><strong><em>END</em></strong></p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot整合Mybatis</title>
    <url>/2020/07/21/SpringBoot%E6%95%B4%E5%90%88Mybatis/</url>
    <content><![CDATA[<h2 id="My-Environment"><a href="#My-Environment" class="headerlink" title="My Environment"></a>My Environment</h2><ul>
<li>IDEA2018.3 </li>
<li>JDK1.8 </li>
<li>SpringBoot2.3.0</li>
<li>360浏览器<h2 id="整合过程"><a href="#整合过程" class="headerlink" title="整合过程"></a>整合过程</h2><ol>
<li>新建一个Spring Initializr项目<br><img src="https://img-blog.csdnimg.cn/20200718104936498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>创建项目的文件结构以及jdk的版本<br><img src="https://img-blog.csdnimg.cn/202007181050333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>选择项目所需要的依赖<br><img src="https://img-blog.csdnimg.cn/20200718105109480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>修改项目名，点击完成<br><img src="https://img-blog.csdnimg.cn/20200718105204109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>选择自动导入依赖<br><img src="https://img-blog.csdnimg.cn/20200718105410937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>pom,xml文件</li>
</ol>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.1.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.cjw&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;demo&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>6.修改配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#server.port=8080</span></span><br><span class="line"><span class="comment">#server.servlet.context-path=/index #访问路径设置</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.datasource.url</span> <span class="string">=</span> <span class="string">jdbc:mysql://localhost:3306/ems?characterEncoding=UTF-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="string">spring.datasource.username</span> <span class="string">=</span> <span class="string">root</span></span><br><span class="line"><span class="string">spring.datasource.password</span> <span class="string">=</span> <span class="number">123456</span></span><br><span class="line"><span class="string">spring.datasource.driverClassName</span> <span class="string">=</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.type</span> <span class="string">=</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"><span class="string">mybatis.mapper-locations</span> <span class="string">=</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="string">mybatis.type-aliases-package</span> <span class="string">=</span> <span class="string">com.dvms.entity</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.resources.static-locations</span> <span class="string">=</span> <span class="string">classpath:/templates/,classpath:/static/</span></span><br></pre></td></tr></table></figure>
<p>这里使用application.properties文件，也可以使用更加简洁的application.yml文件，须要将resource文件夹下原有的application.properties文件删除，染回创建application.yml配置文件（备注：其实SpringBoot底层会把application.yml文件解析为application.properties）<br>7.实现业务流程<br>创建包controller、entity、mapper、service。resources下创建mapper文件夹，用于写sql语句，也可以用注解的方式直接写在mapper文件里。<br>最终框架结构:<br><img src="https://img-blog.csdnimg.cn/20200718110739805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>完成以上，下面在启动类里加上注解用于给出需要扫描的dao文件路径<br>@MapperScan(“com.dvms.dao”) //扫描dao接口,mybatis扫描路径，针对的是接口Mapper类<br>最后启动，浏览器输入地址：<a href="http://localhost:8080/index(根据实际项目)显示出对应界面即可。" target="_blank" rel="noopener">http://localhost:8080/index(根据实际项目)显示出对应界面即可。</a><br><strong><em>END</em></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Maven仓库安装配置教程(windows)</title>
    <url>/2020/07/21/Maven%E4%BB%93%E5%BA%93%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B-windows/</url>
    <content><![CDATA[<h2 id="1-安装本地Maven"><a href="#1-安装本地Maven" class="headerlink" title="1. 安装本地Maven"></a>1. 安装本地Maven</h2><p>点此进入<a href="http://maven.apache.org/guides/getting-started/index.html" target="_blank" rel="noopener">maven官网</a>下载<br><img src="https://img-blog.csdnimg.cn/20200717171858155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><p>系统变量:MAVEN_HOME = D:\apache-maven-3.6.1<br><img src="https://img-blog.csdnimg.cn/20200717172006252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>系统变量:path = %MAVEN_HOME%\bin<br><img src="https://img-blog.csdnimg.cn/20200717172116727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="3-验证安装"><a href="#3-验证安装" class="headerlink" title="3. 验证安装"></a>3. 验证安装</h2><p>然后win+R 运行cmd 输入 mvn -version，如图所示则配置成功！！！<br><img src="https://img-blog.csdnimg.cn/20200717172219961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="4-配置settings文件"><a href="#4-配置settings文件" class="headerlink" title="4. 配置settings文件"></a>4. 配置settings文件</h2><p>在D:\apache-maven-3.6.1\conf下可以找到settings文件<br>找到第52行，这里是maven默认的仓库，复制第53行<br><localRepository>/path/to/local/repo</localRepository><br>将它拿到注释外并将中间的内容改成你需要的路径:(不改也行)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;localRepository&gt;D:/repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>
<p>这里的路径随便设置，注意这里是正斜杠<br>因为国外的服务器下载jar包很慢所以我们改为阿里云服务器（大约在150行左右），这两个仓库只用选一个(根据大家反馈建议使用第一个，第二个在有的版本可能会出现warning)<br> <!-- 阿里云仓库 --><br>        <mirror><br>            <id>alimaven</id><br>            <mirrorOf>central</mirrorOf><br>            <name>aliyun maven</name><br>            <url><a href="http://maven.aliyun.com/nexus/content/repositories/central/" target="_blank" rel="noopener">http://maven.aliyun.com/nexus/content/repositories/central/</a></url><br>        </mirror><br>     或者<br>      <mirror><br>        <id>nexus-aliyun</id><br>        <mirrorOf>*</mirrorOf><br>        <name>Nexus aliyun</name><br>        <url><a href="http://maven.aliyun.com/nexus/content/groups/public" target="_blank" rel="noopener">http://maven.aliyun.com/nexus/content/groups/public</a></url><br>     </mirror><br>在最后配置jdk，也要夹在两个profiles标签之间（不改也没事）</p>
<a id="more"></a>

<!-- java版本 --> 
<profile>
      <id>jdk-1.8</id>
      <activation>
        <activeByDefault>true</activeByDefault>
        <jdk>1.8</jdk>
      </activation>

<pre><code>&lt;properties&gt;
  &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
  &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
  &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;
&lt;/properties&gt;</code></pre></profile>

<p>配置完成，在命令行输入mvn help:system测试，看到下载链接里面是ailiyun的链接表示配置成功：<br><img src="https://img-blog.csdnimg.cn/20200717172718483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqdzEyNTgx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong><em>END</em></strong></p>
]]></content>
  </entry>
</search>
